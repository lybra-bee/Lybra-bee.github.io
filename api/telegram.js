// api/telegram.js - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–æ–≤ Telegram –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Colab
export default async function handler(req, res) {
  if (req.method === 'POST') {
    try {
      const update = req.body;
      console.log('üì® Received Telegram update');
      
      if (update.message && update.message.text) {
        const token = process.env.TELEGRAM_BOT_TOKEN;
        const chatId = update.message.chat.id;
        const userText = update.message.text;
        
        console.log(`üí¨ Message from ${chatId}: ${userText}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /generate
        if (userText.startsWith('/generate')) {
          const prompt = userText.replace('/generate', '').trim();
          if (prompt) {
            await handleGenerateCommand(token, chatId, prompt);
          }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
        else if (userText.startsWith('/')) {
          await handleCommand(token, chatId, userText);
        }
      }
      
      res.status(200).json({ status: 'ok' });
      
    } catch (error) {
      console.error('üí• Error processing webhook:', error);
      res.status(200).json({ status: 'error' });
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}

// üî• ENDPOINT –î–õ–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò COLAB
export async function activateColabHandler(req, res) {
  if (req.method === 'POST') {
    try {
      const { prompt, secret, action_type = 'scheduled', chat_id } = req.body;
      
      console.log('üì® Received activation request:', { prompt, action_type });
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
      if (!secret || secret !== process.env.ACTIVATION_SECRET) {
        console.log('‚ùå Invalid secret');
        return res.status(403).json({ 
          error: 'Forbidden',
          message: 'Invalid activation secret' 
        });
      }
      
      console.log(`üöÄ ${action_type} –∞–∫—Ç–∏–≤–∞—Ü–∏—è Colab:`, prompt);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Telegram –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Colab
      const token = process.env.TELEGRAM_BOT_TOKEN;
      const targetChatId = chat_id || process.env.TELEGRAM_CHAT_ID;
      
      if (!token || !targetChatId) {
        console.log('‚ùå Missing Telegram credentials');
        return res.status(500).json({ 
          error: 'Missing credentials',
          details: 'TELEGRAM_BOT_TOKEN or TELEGRAM_CHAT_ID not set' 
        });
      }
      
      const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: targetChatId,
          text: `/generate ${prompt}`,
          parse_mode: 'Markdown'
        })
      });
      
      const result = await response.json();
      
      if (result.ok) {
        console.log('‚úÖ Activation message sent successfully');
        res.status(200).json({ 
          status: 'success', 
          message: 'Colab –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
          action_type: action_type,
          sent_message: result.result
        });
      } else {
        console.log('‚ùå Failed to send message:', result);
        res.status(500).json({ 
          error: 'Failed to send message', 
          details: result 
        });
      }
      
    } catch (error) {
      console.error('‚ùå Activation error:', error);
      res.status(500).json({ 
        error: 'Internal error', 
        message: error.message 
      });
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}

// üîß –¢–ï–°–¢–û–í–´–ô ENDPOINT –î–õ–Ø –ü–†–û–í–ï–†–ö–ò
export async function testHandler(req, res) {
  if (req.method === 'GET') {
    return res.status(200).json({ 
      status: 'success', 
      message: 'Endpoint —Ä–∞–±–æ—Ç–∞–µ—Ç!',
      timestamp: new Date().toISOString(),
      environment: {
        has_bot_token: !!process.env.TELEGRAM_BOT_TOKEN,
        has_chat_id: !!process.env.TELEGRAM_CHAT_ID,
        has_activation_secret: !!process.env.ACTIVATION_SECRET
      }
    });
  }
  res.status(405).json({ error: 'Method not allowed' });
}

async function handleGenerateCommand(token, chatId, prompt) {
  try {
    await sendMessage(token, chatId, `üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: "${prompt}"\n\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 20-30 —Å–µ–∫—É–Ω–¥...`);
    console.log(`‚úÖ Generated image for: ${prompt}`);
    
  } catch (error) {
    console.error('‚ùå Generation error:', error);
    await sendMessage(token, chatId, '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function handleCommand(token, chatId, command) {
  switch (command) {
    case '/start':
      await sendMessage(token, chatId,
        'ü§ñ **AI Image Generator Bot**\n\n' +
        '–Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è AI-—Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞!\n\n' +
        '**–ö–æ–º–∞–Ω–¥—ã:**\n' +
        '/generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É'
      );
      break;
      
    case '/help':
      await sendMessage(token, chatId,
        'üÜò **–ü–æ–º–æ—â—å:**\n\n' +
        '‚Ä¢ /generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n' +
        '‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏: "4k, digital art, professional"\n' +
        '‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞\n\n' +
        '**–ü—Ä–∏–º–µ—Ä—ã:**\n' +
        '/generate –∫–∏–±–µ—Ä–ø–∞–Ω–∫ –≥–æ—Ä–æ–¥ –Ω–æ—á—å—é\n' +
        '/generate —Ä–æ–±–æ—Ç –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ'
      );
      break;
      
    default:
      await sendMessage(token, chatId,
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n' +
        '–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
      );
  }
}

async function sendMessage(token, chatId, text) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown'
      })
    });
    
    return await response.json();
  } catch (error) {
    console.error('‚ùå Send message error:', error);
    throw error;
  }
}
