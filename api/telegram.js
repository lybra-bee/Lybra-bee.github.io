// üî• ENDPOINT –î–õ–Ø –ê–ö–¢–ò–í–ê–¶–ò–ò COLAB –ò–ó GITHUB ACTIONS
export async function activateColabHandler(req, res) {
  if (req.method === 'POST') {
    try {
      const { prompt, secret, action_type = 'scheduled' } = req.body;
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
      if (secret !== process.env.ACTIVATION_SECRET) {
        return res.status(403).json({ error: 'Forbidden' });
      }
      
      console.log(`üöÄ ${action_type === 'manual' ? '–†—É—á–Ω–∞—è' : '–ü–ª–∞–Ω–æ–≤–∞—è'} –∞–∫—Ç–∏–≤–∞—Ü–∏—è Colab:`, prompt);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤ Telegram –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Colab
      const token = '8006769060:AAEGAKhjUeuAXfnsQWtdLcKpAjkJrrGQ1Fk';
      const CHAT_ID = process.env.ADMIN_CHAT_ID; // –í–∞—à chat_id
      
      await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          chat_id: CHAT_ID,
          text: `/generate ${prompt}`,
          parse_mode: 'Markdown'
        })
      });
      
      res.status(200).json({ 
        status: 'success', 
        message: 'Colab –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω',
        action_type: action_type
      });
      
    } catch (error) {
      console.error('‚ùå Activation error:', error);
      res.status(500).json({ error: 'Internal error' });
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}
