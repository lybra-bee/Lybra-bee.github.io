// api/telegram.js - –†–ï–ê–õ–¨–ù–ê–Ø –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export default async function handler(req, res) {
  if (req.method === 'POST') {
    try {
      const update = req.body;
      console.log('üì® Received Telegram update');
      
      if (update.message && update.message.text) {
        const token = '8006769060:AAEGAKhjUeuAXfnsQWtdLcKpAjkJrrGQ1Fk';
        const chatId = update.message.chat.id;
        const userText = update.message.text;
        
        console.log(`üí¨ Message from ${chatId}: ${userText}`);
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /generate
        if (userText.startsWith('/generate')) {
          const prompt = userText.replace('/generate', '').trim();
          if (prompt) {
            await handleGenerateCommand(token, chatId, prompt);
          }
        }
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥
        else if (userText.startsWith('/')) {
          await handleCommand(token, chatId, userText);
        }
      }
      
      res.status(200).json({ status: 'ok' });
      
    } catch (error) {
      console.error('üí• Error processing webhook:', error);
      res.status(200).json({ status: 'error' });
    }
  } else {
    res.status(405).json({ error: 'Method not allowed' });
  }
}

async function handleGenerateCommand(token, chatId, prompt) {
  try {
    await sendMessage(token, chatId, `üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è: "${prompt}"\n\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç 20-30 —Å–µ–∫—É–Ω–¥...`);
    
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Stable Diffusion API
    // –ü–æ–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    
    // –ñ–¥–µ–º 25 —Å–µ–∫—É–Ω–¥ (–∏–º–∏—Ç–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏)
    await new Promise(resolve => setTimeout(resolve, 25000));
    
    await sendMessage(token, chatId, 
      `‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ!\n\n` +
      `**–ü—Ä–æ–º–ø—Ç:** ${prompt}\n\n` +
      `üìÅ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞.\n` +
      `üåê –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–µ–π AI-—Å—Ç–∞—Ç—å–µ.`
    );
    
    console.log(`‚úÖ Generated image for: ${prompt}`);
    
  } catch (error) {
    console.error('‚ùå Generation error:', error);
    await sendMessage(token, chatId, '‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
  }
}

async function handleCommand(token, chatId, command) {
  switch (command) {
    case '/start':
      await sendMessage(token, chatId,
        'ü§ñ **AI Image Generator Bot**\n\n' +
        '–Ø –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è AI-—Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞!\n\n' +
        '**–ö–æ–º–∞–Ω–¥—ã:**\n' +
        '/generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n' +
        '/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É'
      );
      break;
      
    case '/help':
      await sendMessage(token, chatId,
        'üÜò **–ü–æ–º–æ—â—å:**\n\n' +
        '‚Ä¢ /generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ\n' +
        '‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏: "4k, digital art, professional"\n' +
        '‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –¥–ª—è —Å—Ç–∞—Ç–µ–π –±–ª–æ–≥–∞\n\n' +
        '**–ü—Ä–∏–º–µ—Ä—ã:**\n' +
        '/generate –∫–∏–±–µ—Ä–ø–∞–Ω–∫ –≥–æ—Ä–æ–¥ –Ω–æ—á—å—é\n' +
        '/generate —Ä–æ–±–æ—Ç –≤ —Å—Ç–∏–ª–µ –∞–Ω–∏–º–µ'
      );
      break;
      
    default:
      await sendMessage(token, chatId,
        'üëã –ü—Ä–∏–≤–µ—Ç! –Ø AI –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n\n' +
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /generate —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.\n' +
        '–ù–∞–ø–∏—à–∏—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.'
      );
  }
}

async function sendMessage(token, chatId, text) {
  try {
    const response = await fetch(`https://api.telegram.org/bot${token}/sendMessage`, {
      method: 'POST',
      headers: { 
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: text,
        parse_mode: 'Markdown'
      })
    });
    
    return await response.json();
  } catch (error) {
    console.error('‚ùå Send message error:', error);
  }
}
