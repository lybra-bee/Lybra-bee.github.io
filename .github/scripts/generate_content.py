#!/usr/bin/env python3
import os
import requests
import logging
import json
import re
from datetime import datetime
from pathlib import Path

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)

# –ü—É—Ç–∏
POSTS_DIR = Path("content/posts")
IMAGES_DIR = Path("static/images/posts")
GALLERY_DIR = Path("static/images/gallery")

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è)
for d in [POSTS_DIR, IMAGES_DIR, GALLERY_DIR]:
    if not d.exists():
        d.mkdir(parents=True, exist_ok=True)

# –ö–ª—é—á–∏ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
FUSIONBRAIN_API_KEY = os.getenv("FUSIONBRAIN_API_KEY")
FUSION_SECRET_KEY = os.getenv("FUSION_SECRET_KEY")


def slugify(text: str) -> str:
    return re.sub(r"[^a-zA-Z–∞-—è–ê-–Ø0-9]+", "-", text).strip("-").lower()


def generate_article() -> dict:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ –ø—Ä–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –≤—ã—Å–æ–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"""
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenRouter / Groq")

    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}"}
    payload = {
        "model": "anthropic/claude-3.5-sonnet",
        "messages": [
            {"role": "system", "content": "–¢—ã –ø–∏—à–µ—à—å —Å—Ç–∞—Ç—å—é –¥–ª—è AI-–±–ª–æ–≥–∞."},
            {
                "role": "user",
                "content": "–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.",
            },
        ],
    }

    response = requests.post(url, headers=headers, json=payload, timeout=60)
    response.raise_for_status()
    content = response.json()["choices"][0]["message"]["content"]

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ = –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø–µ—Ä–≤–∞—è —Ñ—Ä–∞–∑–∞
    title = content.split("\n")[0].strip().replace("#", "")
    body = "\n".join(content.split("\n")[1:]).strip()

    return {"title": title, "body": body}


def generate_image(prompt: str, filename: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain"""
    logging.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain")

    url = "https://api.fusionbrain.ai/v1/text2image/run"
    headers = {
        "X-Key": f"Key {FUSIONBRAIN_API_KEY}",
        "X-Secret": f"Secret {FUSION_SECRET_KEY}",
    }
    files = {
        "prompt": (None, prompt),
        "width": (None, "1024"),
        "height": (None, "576"),
    }

    response = requests.post(url, headers=headers, files=files, timeout=120)

    if response.status_code != 200:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {response.text}")
        return ""

    out_path = IMAGES_DIR / filename
    with open(out_path, "wb") as f:
        f.write(response.content)

    # –ö–æ–ø–∏—Ä—É–µ–º –≤ –≥–∞–ª–µ—Ä–µ—é
    gallery_path = GALLERY_DIR / filename
    with open(gallery_path, "wb") as f:
        f.write(response.content)

    return str(out_path)


def save_post(title: str, body: str, image_path: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å—Ç –≤ Hugo"""
    slug = slugify(title)
    date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

    frontmatter = [
        "---",
        f'title: "{title}"',
        f"date: {date}",
        f"slug: {slug}",
        f"image: /images/posts/{Path(image_path).name}" if image_path else "",
        "---",
    ]

    content = "\n".join(frontmatter) + "\n\n" + body
    out_file = POSTS_DIR / f"{slug}.md"

    with open(out_file, "w", encoding="utf-8") as f:
        f.write(content)

    logging.info(f"üìÑ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {out_file}")


def cleanup_posts(keep: int = 5):
    """–£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç—å–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N"""
    posts = sorted(POSTS_DIR.glob("*.md"), key=os.path.getmtime, reverse=True)
    for old in posts[keep:]:
        old.unlink()
        logging.info(f"üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç–∞—Ç—å—è: {old}")


def main():
    article = generate_article()
    filename = slugify(article["title"]) + ".jpg"
    image_path = generate_image(article["title"], filename)
    save_post(article["title"], article["body"], image_path)
    cleanup_posts()


if __name__ == "__main__":
    main()
