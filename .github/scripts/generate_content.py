#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import requests
import random
import time
import logging
import textwrap
import base64
from datetime import datetime, timezone
from pathlib import Path
from PIL import Image, ImageDraw, ImageFont
import re

# ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è =====
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logger = logging.getLogger(__name__)

# ===== –ü—É—Ç–∏ =====
CONTENT_DIR = Path("content/posts")
GALLERY_DIR = Path("assets/images/posts")
MAX_ARTICLES = 5

# ===== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π =====
CONTENT_DIR.mkdir(parents=True, exist_ok=True)
GALLERY_DIR.mkdir(parents=True, exist_ok=True)

# ===== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è =====
GROQ_KEY = os.getenv("GROQ_API_KEY")
FUSION_KEY = os.getenv("FUSIONBRAIN_API_KEY")
FUSION_SECRET = os.getenv("FUSION_SECRET_KEY")

# ===== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Groq =====
def generate_text(prompt: str) -> str:
    headers = {"Authorization": f"Bearer {GROQ_KEY}", "Content-Type": "application/json"}
    data = {
        "model": "llama-3.1-8b-instant",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 2000,
    }
    resp = requests.post("https://api.groq.com/openai/v1/chat/completions", headers=headers, json=data, timeout=30)
    if resp.status_code != 200:
        logger.warning(f"‚ö†Ô∏è Groq –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {resp.status_code}: {resp.text}")
        return fallback_article()
    return resp.json()['choices'][0]['message']['content'].strip()

# ===== Fallback —Å—Ç–∞—Ç—å—è =====
def fallback_article() -> str:
    return (
        "# –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –≤—ã—Å–æ–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏\n\n"
        "## –í–≤–µ–¥–µ–Ω–∏–µ\n"
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è, –≤–Ω–µ–¥—Ä—è—è—Å—å –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏.\n\n"
        "## –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏\n"
        "- –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏\n"
        "- –ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã\n"
        "- –ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ\n\n"
        "## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n"
        "–ë—É–¥—É—â–µ–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –æ–±–µ—â–∞–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∏–Ω–Ω–æ–≤–∞—Ü–∏–π.\n"
    )

# ===== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain =====
def generate_image(title: str) -> str:
    url = "https://api-key.fusionbrain.ai/text2image/run"
    headers = {"X-Key": FUSION_KEY, "X-Secret": FUSION_SECRET}
    prompt = f"{title}, digital art, futuristic, high quality, professional"
    data = {"prompt": prompt, "width": 512, "height": 512, "num_images": 1}
    try:
        resp = requests.post(url, headers=headers, json=data, timeout=60)
        resp.raise_for_status()
        img_base64 = resp.json()['images'][0]
        img_bytes = base64.b64decode(img_base64)
        filename = GALLERY_DIR / f"{slugify(title)}.png"
        with open(filename, "wb") as f:
            f.write(img_bytes)
        logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {filename}")
        return f"/{filename}"
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è FusionBrain: {e}")
        return "/assets/images/default.png"

# ===== –°–ª–∞–≥ =====
def slugify(text: str) -> str:
    text = re.sub(r'[^a-zA-Z0-9–∞-—è–ê-–Ø\s]', '', text).lower()
    text = re.sub(r'\s+', '-', text).strip('-')
    timestamp = str(int(time.time()))[-4:]
    return f"{text[:40]}-{timestamp}"

# ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ =====
def save_article(title: str, content: str, image_path: str):
    now = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
    slug = slugify(title)
    filename = CONTENT_DIR / f"{slug}.md"
    frontmatter = f"""---
title: "{title}"
date: {now}
draft: false
image: "{image_path}"
tags: ["AI", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "2025"]
categories: ["–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]
summary: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è"
---

{content}
"""
    with open(filename, "w", encoding="utf-8") as f:
        f.write(frontmatter)
    logger.info(f"üìÑ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    return filename

# ===== –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç–∞—Ç–µ–π =====
def prune_old_articles():
    articles = sorted(CONTENT_DIR.glob("*.md"), key=lambda x: x.stat().st_mtime, reverse=True)
    if len(articles) <= MAX_ARTICLES:
        return
    for old in articles[MAX_ARTICLES:]:
        old.unlink()
        logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç–∞—Ç—å—è: {old}")

# ===== –û—Å–Ω–æ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è =====
def main():
    logger.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Groq")
    prompt = "–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –ø—Ä–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –≤—ã—Å–æ–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏. –§–æ—Ä–º–∞—Ç Markdown, 400-600 —Å–ª–æ–≤."
    content = generate_text(prompt)
    title_line = content.splitlines()[0].replace("#", "").strip()
    title = title_line if title_line else "–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –∏ –≤—ã—Å–æ–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
    logger.info(f"üìå –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç–∞—Ç—å–∏: {title}")

    logger.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain")
    image_path = generate_image(title)

    save_article(title, content, image_path)
    prune_old_articles()

if __name__ == "__main__":
    main()
