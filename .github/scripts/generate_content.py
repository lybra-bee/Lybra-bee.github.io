#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime
import glob
import base64
import time

# ===== –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ GigaChat =====
def get_gigachat_token():
    client_id = os.getenv('GIGACHAT_CLIENT_ID')
    client_secret = os.getenv('GIGACHAT_CLIENT_SECRET')
    if not client_id or not client_secret:
        print("‚ùå GIGACHAT_CLIENT_ID –∏–ª–∏ GIGACHAT_CLIENT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None

    auth_string = f"{client_id}:{client_secret}"
    auth_key = base64.b64encode(auth_string.encode()).decode()

    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": f"rq-{random.randint(100000, 999999)}-{int(time.time())}",
        "Authorization": f"Basic {auth_key}"
    }
    data = {"scope": "GIGACHAT_API_PERS"}

    try:
        response = requests.post(url, headers=headers, data=data, verify=False, timeout=30)
        if response.status_code == 200:
            return response.json().get("access_token")
        return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ GigaChat: {e}")
        return None

# ===== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º—ã —Å—Ç–∞—Ç—å–∏ =====
def generate_ai_trend_topic():
    current_trends_2025 = [
        "Multimodal AI - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ",
        "AI –∞–≥–µ–Ω—Ç—ã - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "–ù–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è - —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
        "Generative AI - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∫–æ–¥–∞ –∏ –¥–∏–∑–∞–π–Ω–æ–≤",
        "Edge AI - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
        "AI –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ - –ø—Ä–µ–¥–∏–∫—Ç–∏–≤–Ω–∞—è –∑–∞—â–∏—Ç–∞",
        "–≠—Ç–∏—á–Ω—ã–π AI - –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ",
        "AI –≤ healthcare - –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞",
        "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã - –±–µ—Å–ø–∏–ª–æ—Ç–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç",
        "AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è - —Å–∂–∞—Ç–∏–µ –º–æ–¥–µ–ª–µ–π –∏ —É—Å–∫–æ—Ä–µ–Ω–∏–µ inference",
        "–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π AI - –æ–±—ä—è—Å–Ω–∏–º—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã",
        "AI –¥–ª—è –∫–ª–∏–º–∞—Ç–∞ - –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è",
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø–æ–º–æ—â–Ω–∏–∫–∏",
        "AI –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏ - –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ"
    ]
    domains = [
        "–≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ cloud-native –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö",
        "–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∏ IoT",
        "–≤ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
        "–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "–≤ –º–µ–¥–∏—Ü–∏–Ω–µ –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
        "–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
        "–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ smart city",
        "–≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"
    ]
    return f"{random.choice(current_trends_2025)} {random.choice(domains)} –≤ 2025 –≥–æ–¥—É"

# ===== –û—Å–Ω–æ–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è =====
def generate_content():
    KEEP_LAST_ARTICLES = 3
    clean_old_articles(KEEP_LAST_ARTICLES)

    topic = generate_ai_trend_topic()
    print(f"üìù –¢–µ–º–∞: {topic}")

    image_filename = generate_article_image(topic)
    content, model_used = generate_article_content(topic)

    date = datetime.now().strftime("%Y-%m-%d")
    slug = generate_slug(topic)
    filename = f"content/posts/{date}-{slug}.md"

    frontmatter = generate_frontmatter(topic, content, model_used, image_filename)

    os.makedirs("content/posts", exist_ok=True)
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(frontmatter)

    print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filename}")
    return filename

# ===== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ =====
def generate_article_content(topic):
    api_key = os.getenv('OPENROUTER_API_KEY')
    gigachat_token = get_gigachat_token()
    models_to_try = []

    if api_key:
        for model in ["anthropic/claude-3-haiku", "google/gemini-pro"]:
            models_to_try.append((model, lambda m=model: generate_with_openrouter(api_key, m, topic)))

    if gigachat_token:
        models_to_try.append(("GigaChat-2-Max", lambda: generate_with_gigachat(gigachat_token, topic, "GigaChat-2-Max")))

    for model_name, func in models_to_try:
        try:
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º: {model_name}")
            result = func()
            if result:
                return result, model_name
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {model_name}: {e}")
    raise Exception("‚ùå –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

def generate_with_gigachat(token, topic, model):
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}
    prompt = f"–ù–∞–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: '{topic}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, 500-700 —Å–ª–æ–≤, Markdown."
    payload = {"model": model, "messages": [{"role": "user", "content": prompt}], "temperature": 0.7, "max_tokens": 2000}
    r = requests.post(url, headers=headers, json=payload, timeout=60)
    if r.status_code == 200:
        return r.json()['choices'][0]['message']['content']
    raise Exception(f"HTTP {r.status_code}: {r.text}")

def generate_with_openrouter(api_key, model, topic):
    r = requests.post(
        "https://openrouter.ai/api/v1/chat/completions",
        headers={"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"},
        json={"model": model, "messages": [{"role": "user", "content": f"–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É '{topic}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, 500-700 —Å–ª–æ–≤, Markdown."}], "max_tokens": 1500}
    )
    if r.status_code == 200 and r.json().get("choices"):
        return r.json()["choices"][0]["message"]["content"].strip()
    raise Exception(f"HTTP {r.status_code}: {r.text}")

# ===== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è =====
def generate_article_image(topic):
    prompt = f"Futuristic AI illustration for article: {topic}, digital art, neon, cyberpunk."
    try:
        headers = {"api-key": "quickstart-QUdJIGlzIGNvbWluZy4uLi4uK"}  # —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á
        data = {"text": prompt}
        r = requests.post("https://api.deepai.org/api/text2img", headers=headers, data=data, timeout=30)
        if r.status_code == 200 and "output_url" in r.json():
            img = requests.get(r.json()["output_url"], timeout=30)
            if img.status_code == 200:
                return save_article_image(img.content, topic)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    return None

def save_article_image(image_data, topic):
    os.makedirs("static/images/posts", exist_ok=True)
    slug = generate_slug(topic)
    filename = f"images/posts/{slug}.jpg"
    with open(f"static/{filename}", "wb") as f:
        f.write(image_data)
    print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
    return filename

# ===== –°–ª—É–∂–µ–±–Ω—ã–µ =====
def clean_old_articles(keep=3):
    files = sorted(glob.glob("content/posts/*.md"), key=os.path.getmtime)
    for old in files[:-keep]:
        os.remove(old)

def generate_slug(topic):
    slug = topic.lower()
    for old, new in {' ': '-', ':': '', ',': '', '.': '', '/': '-', '\\': '-', '(': '', ')': ''}.items():
        slug = slug.replace(old, new)
    return ''.join(c for c in slug if c.isalnum() or c == '-').strip('-')[:50]

def generate_frontmatter(topic, content, model_used, image_filename):
    now = datetime.now().isoformat()
    tags = ["ai", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "2025"]
    return (
        "---\n"
        f"title: \"{topic}\"\n"
        f"date: {now}\n"
        f"tags: {tags}\n"
        f"author: \"AI Generator\"\n"
        f"model_used: \"{model_used}\"\n"
        f"image: \"{image_filename or ''}\"\n"
        "---\n\n"
        f"{content}"
    )

if __name__ == "__main__":
    generate_content()
