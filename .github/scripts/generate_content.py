#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime, timezone
import shutil
import re
import textwrap
from PIL import Image, ImageDraw, ImageFont
import time
import logging
import argparse
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
REPO_ROOT = os.getcwd()
logger.info(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {REPO_ROOT}")

class FusionBrainAPI:
    def __init__(self, api_key, secret_key):
        self.URL = 'https://api-key.fusionbrain.ai/'
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }
    
    def get_model(self):
        """–ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ pipelines endpoint"""
        try:
            response = requests.get(
                self.URL + 'key/api/v1/pipelines',
                headers=self.AUTH_HEADERS,
                timeout=10
            )
            if response.status_code == 200:
                pipelines = response.json()
                if pipelines:
                    # –ò—â–µ–º Kandinsky pipeline
                    for pipeline in pipelines:
                        if "kandinsky" in pipeline.get("name", "").lower():
                            return pipeline['id']
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ Kandinsky, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                    return pipelines[0]['id']
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π FusionBrain: {e}")
            return None
    
    def generate(self, prompt, width=512, height=512):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º pipeline ID
            pipeline_id = self.get_model()
            if not pipeline_id:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å pipeline ID")
                return None
            
            params = {
                "type": "GENERATE",
                "numImages": 1,
                "width": width,
                "height": height,
                "generateParams": {
                    "query": prompt
                }
            }
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            files = {
                'params': (None, json.dumps(params), 'application/json'),
                'pipeline_id': (None, pipeline_id)
            }
            
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ FusionBrain API")
            response = requests.post(
                self.URL + 'key/api/v1/pipeline/run',
                headers=self.AUTH_HEADERS,
                files=files,
                timeout=30
            )
            
            logger.debug(f"üì• –û—Ç–≤–µ—Ç FusionBrain: {response.status_code}")
            
            # –ö–æ–¥ 201 - —ç—Ç–æ –£–°–ü–ï–®–ù–´–ô –æ—Ç–≤–µ—Ç!
            if response.status_code in [200, 201]:
                data = response.json()
                # –°—Ç–∞—Ç—É—Å INITIAL —Å UUID - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
                if data.get('uuid'):
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ FusionBrain —Å–æ–∑–¥–∞–Ω–∞: {data['uuid']}")
                    return data['uuid']
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç FusionBrain: {data}")
                    return None
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FusionBrain: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FusionBrain: {e}")
            return None
    
    def check_status(self, task_id, attempts=30, delay=6):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        try:
            for attempt in range(attempts):
                if attempt > 0:  # –ù–µ —Å–ø–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    time.sleep(delay)
                    
                logger.info(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ FusionBrain (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{attempts})")
                
                response = requests.get(
                    self.URL + f'key/api/v1/pipeline/status/{task_id}',
                    headers=self.AUTH_HEADERS,
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    status = data.get('status')
                    
                    if status == 'DONE':
                        result = data.get('result', {})
                        images = result.get('files', [])
                        if images:
                            logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FusionBrain –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                            return images[0]
                        else:
                            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ")
                            return None
                    elif status == 'FAIL':
                        error_msg = data.get('errorDescription', 'Unknown error')
                        logger.warning(f"‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FusionBrain –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_msg}")
                        return None
                    elif status in ['INITIAL', 'PROCESSING']:
                        if attempt % 5 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 5 –ø–æ–ø—ã—Ç–æ–∫
                            logger.info(f"‚è≥ –°—Ç–∞—Ç—É—Å FusionBrain: {status}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                        continue
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å FusionBrain: {status}")
                        return None
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ FusionBrain: {response.status_code}")
            
            logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ FusionBrain: {e}")
            return None

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏ ========
def generate_article_prompt():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤"""
    trends = [
        "–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ AI –∞–≥–µ–Ω—Ç—ã", 
        "–∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "–Ω–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
        "–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "–ø–µ—Ä–∏—Ñ–µ—Ä–∏–π–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç (Edge AI)",
        "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "—ç—Ç–∏—á–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –∑–¥—Ä–∞–≤–æ–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏",
        "–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è AI –º–æ–¥–µ–ª–µ–π",
        "–¥–æ–≤–µ—Ä–µ–Ω–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", 
        "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –¥–ª—è —ç–∫–æ–ª–æ–≥–∏–∏",
        "–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã",
        "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"
    ]
    
    domains = [
        "–≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –∏ cloud native –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è",
        "–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ IoT —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã",
        "–æ–±–ª–∞—á–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "–∞–Ω–∞–ª–∏–∑ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞",
        "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–∏–±–µ—Ä–∑–∞—â–∏—Ç–∞",
        "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ñ–∏–Ω—Ç–µ—Ö",
        "–∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "—É–º–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞",
        "–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ EdTech"
    ]
    
    trend = random.choice(trends)
    domain = random.choice(domains)
    
    prompt = f"""–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –æ–±–ª–∞—Å—Ç–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –∏ –Ω–∞–ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: "{trend} –≤ {domain} –≤ 2025 –≥–æ–¥—É".

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Å—Ç–∞—Ç—å–µ:
- –§–æ—Ä–º–∞—Ç: Markdown
- –û–±—ä–µ–º: 400-600 —Å–ª–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–ª–∞–≤–ª–µ–Ω–∏–µ, –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
- –°—Ç–∏–ª—å: –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π
- –ö–æ–Ω—Ç–µ–Ω—Ç: –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã, –∫–µ–π—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è
- –§–æ–∫—É—Å: –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏, —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ 2025 –≥–æ–¥–∞, –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã —Ä–∞–∑–≤–∏—Ç–∏—è

–°—Ç–∞—Ç—å—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–æ–π –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∏ IT-–º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤."""
    
    return prompt, f"{trend} –≤ {domain} –≤ 2025 –≥–æ–¥—É"

# ======== –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π ========
def clean_old_articles(keep_last=3):
    logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º {keep_last} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö...")
    content_dir = os.path.join(REPO_ROOT, "content")
    if os.path.exists(content_dir):
        posts_dir = os.path.join(content_dir, "posts")
        if os.path.exists(posts_dir):
            posts = sorted([f for f in os.listdir(posts_dir) if f.endswith('.md')], 
                          reverse=True)
            for post in posts[keep_last:]:
                os.remove(os.path.join(posts_dir, post))
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç: {post}")
    else:
        os.makedirs(os.path.join(content_dir, "posts"), exist_ok=True)
        with open(os.path.join(content_dir, "_index.md"), "w", encoding="utf-8") as f:
            f.write("---\ntitle: \"–ì–ª–∞–≤–Ω–∞—è\"\n---")
        with open(os.path.join(content_dir, "posts", "_index.md"), "w", encoding="utf-8") as f:
            f.write("---\ntitle: \"–°—Ç–∞—Ç—å–∏\"\n---")
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ content")

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ ========
def generate_content():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    check_environment_variables()
    
    clean_old_articles()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ —Ç–µ–º—É
    prompt, topic = generate_article_prompt()
    logger.info(f"üìù –¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏: {topic}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
    content, model_used = generate_article_content(prompt)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    title = extract_title_from_content(content, topic)
    logger.info(f"üìå –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    image_filename = generate_article_image(title)
    
    date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    slug = generate_slug(title)
    filename = os.path.join(REPO_ROOT, "content", "posts", f"{date}-{slug}.md")
    
    frontmatter = generate_frontmatter(title, content, model_used, image_filename)
    
    os.makedirs(os.path.join(REPO_ROOT, "content", "posts"), exist_ok=True)
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(frontmatter)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω
    if os.path.exists(filename):
        logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filename}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if image_filename and os.path.exists(image_filename):
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–æ: {image_filename}")
        else:
            logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ: {image_filename}")
            
        return filename
    else:
        logger.error(f"‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞: {filename}")
        return None

def extract_title_from_content(content, fallback_topic):
    """–ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        # –ò—â–µ–º –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ Markdown (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å #)
        lines = content.split('\n')
        for line in lines:
            line = line.strip()
            if line.startswith('# ') and len(line) > 2:
                # –£–±–∏—Ä–∞–µ–º Markdown —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
                title = line.replace('# ', '').strip()
                if 10 <= len(title) <= 100:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º reasonable –¥–ª–∏–Ω—É
                    return title
    except:
        pass
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
    return fallback_topic

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_vars = {
        'GROQ_API_KEY': os.getenv('GROQ_API_KEY'),
        'FUSIONBRAIN_API_KEY': os.getenv('FUSIONBRAIN_API_KEY'),
        'FUSION_SECRET_KEY': os.getenv('FUSION_SECRET_KEY')
    }
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for var_name, var_value in env_vars.items():
        status = "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if var_value else "‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        logger.info(f"   {var_name}: {status}")

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Groq ========
def generate_article_content(prompt):
    groq_key = os.getenv('GROQ_API_KEY')
    
    if not groq_key:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        fallback = generate_fallback_content(prompt)
        return fallback, "fallback-generator"

    models_to_try = [
        ("llama-3.1-8b-instant", lambda: generate_with_groq(groq_key, "llama-3.1-8b-instant", prompt)),
        ("llama-3.2-1b-preview", lambda: generate_with_groq(groq_key, "llama-3.2-1b-preview", prompt)),
        ("llama-3.1-70b-versatile", lambda: generate_with_groq(groq_key, "llama-3.1-70b-versatile", prompt))
    ]

    for model_name, generate_func in models_to_try:
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞: {model_name}")
            result = generate_func()
            if result and len(result.strip()) > 100:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ {model_name}")
                return result, model_name
            else:
                logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç {model_name}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ {model_name}: {e}")
            continue

    logger.warning("‚ö†Ô∏è –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
    fallback = generate_fallback_content(prompt)
    return fallback, "fallback-generator"

def generate_fallback_content(prompt):
    """Fallback –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ –≤—Å–µ API –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç"""
    sections = [
        "# –¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –≤ 2025 –≥–æ–¥—É",
        "",
        "## –í–≤–µ–¥–µ–Ω–∏–µ",
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏ –∏ —Å—Ñ–µ—Ä—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –í 2025 –≥–æ–¥—É –º—ã –æ–∂–∏–¥–∞–µ–º –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ advancements –≤ –æ–±–ª–∞—Å—Ç–∏ AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.",
        "",
        "## –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏",
        "- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤",
        "- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI –≤ –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–µ workflow",
        "- –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Å–∫–æ—Ä–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
        "- –†–∞–∑–≤–∏—Ç–∏–µ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π",
        "",
        "## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
        "–ö–æ–º–ø–∞–Ω–∏–∏ –≤–Ω–µ–¥—Ä—è—é—Ç AI —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.",
        "",
        "## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ",
        "–ë—É–¥—É—â–µ–µ –≤—ã–≥–ª—è–¥–∏—Ç –º–Ω–æ–≥–æ–æ–±–µ—â–∞—é—â–µ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è.",
        "",
        "*–°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*"
    ]
    return "\n".join(sections)

def generate_with_groq(api_key, model_name, prompt):
    resp = requests.post(
        "https://api.groq.com/openai/v1/chat/completions",
        headers={"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"},
        json={
            "model": model_name, 
            "messages":[{"role":"user","content":prompt}], 
            "max_tokens": 2000,
            "temperature": 0.7,
            "top_p": 0.9
        },
        timeout=30
    )
    
    if resp.status_code == 200:
        data = resp.json()
        return data['choices'][0]['message']['content'].strip()
    else:
        raise Exception(f"Groq API error {resp.status_code}: {resp.text}")

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ========
def generate_article_image(title):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å—Ç–∞—Ç—å–∏"""
    logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è: {title}")
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã –≤ –ø–æ—Ä—è–¥–∫–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
    methods = [
        try_fusionbrain_api,
        try_craiyon_api,
        try_lexica_art_api,
        generate_enhanced_placeholder
    ]
    
    for method in methods:
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: {method.__name__}")
            result = method(title)
            if result:
                logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ {method.__name__}")
                return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {method.__name__}: {e}")
            continue
    
    return generate_enhanced_placeholder(title)

def try_fusionbrain_api(title):
    """FusionBrain API —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π"""
    api_key = os.getenv('FUSIONBRAIN_API_KEY')
    secret_key = os.getenv('FUSION_SECRET_KEY')
    
    if not api_key or not secret_key:
        logger.warning("‚ö†Ô∏è FusionBrain –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    
    try:
        fb_api = FusionBrainAPI(api_key, secret_key)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–ø—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º –¥–ª—è –ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
        english_prompt = f"trusted artificial intelligence in mobile applications IoT ecosystems 2025, digital art, futuristic technology, professional, high quality"
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ FusionBrain: {english_prompt}")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        task_id = fb_api.generate(english_prompt, width=512, height=512)
        
        if task_id:
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ FusionBrain —Å–æ–∑–¥–∞–Ω–∞, task_id: {task_id}")
            logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FusionBrain...")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–ø—ã—Ç–æ–∫
            image_base64 = fb_api.check_status(task_id, attempts=30, delay=6)
            if image_base64:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64, –¥–ª–∏–Ω–∞: {len(image_base64)} —Å–∏–º–≤–æ–ª–æ–≤")
                try:
                    image_data = base64.b64decode(image_base64)
                    logger.info(f"‚úÖ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Ä–∞–∑–º–µ—Ä: {len(image_data)} –±–∞–π—Ç")
                    return save_image_bytes(image_data, title)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è base64: {e}")
                    return None
            else:
                logger.warning("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FusionBrain –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ")
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ FusionBrain")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ FusionBrain: {e}")
    
    return None

def try_craiyon_api(title):
    """Craiyon API - —Å—Ç–∞—Ä–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    try:
        english_prompt = f"{title}, digital art, futuristic technology, AI, 2025, professional"
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Craiyon: {english_prompt}")
        
        response = requests.post(
            "https://api.craiyon.com/generate",
            json={"prompt": english_prompt},
            timeout=60
        )
        
        if response.status_code == 200:
            data = response.json()
            if data.get("images") and len(data["images"]) > 0:
                image_data = base64.b64decode(data["images"][0])
                return save_image_bytes(image_data, title)
            else:
                logger.warning("‚ö†Ô∏è Craiyon –Ω–µ –≤–µ—Ä–Ω—É–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        else:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Craiyon API: {response.status_code}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Craiyon: {e}")
    
    return None

def try_lexica_art_api(title):
    """Lexica Art API - –ø–æ–∏—Å–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö AI –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        prompt = f"{title}, digital art, futuristic"
        
        search_response = requests.get(
            f"https://lexica.art/api/v1/search?q={requests.utils.quote(prompt)}",
            timeout=20
        )
        
        if search_response.status_code == 200:
            data = search_response.json()
            if data.get('images') and len(data['images']) > 0:
                image_url = data['images'][0]['src']
                img_data = requests.get(image_url, timeout=30).content
                return save_image_bytes(img_data, title)
                
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Lexica Art: {e}")
    
    return None

def save_image_bytes(image_data, title):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ bytes"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        assets_dir = os.path.join(REPO_ROOT, "assets", "images", "posts")
        os.makedirs(assets_dir, exist_ok=True)
        
        slug = generate_slug(title)
        filename = os.path.join(assets_dir, f"{slug}.png")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(filename, "wb") as f:
            f.write(image_data)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
        if os.path.exists(filename):
            file_size = os.path.getsize(filename)
            logger.info(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename} (—Ä–∞–∑–º–µ—Ä: {file_size} –±–∞–π—Ç)")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            abs_path = os.path.abspath(filename)
            logger.info(f"üìÅ –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é: {abs_path}")
            
            return filename
        else:
            logger.error(f"‚ùå –§–∞–π–ª –Ω–µ –±—ã–ª —Å–æ–∑–¥–∞–Ω: {filename}")
            return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def generate_enhanced_placeholder(title):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π placeholder —Å AI-—Å—Ç–∏–ª–µ–º"""
    try:
        assets_dir = os.path.join(REPO_ROOT, "assets", "images", "posts")
        os.makedirs(assets_dir, exist_ok=True)
        
        slug = generate_slug(title)
        filename = os.path.join(assets_dir, f"{slug}.png")
        width, height = 800, 400
        
        img = Image.new('RGB', (width, height), color='#0f172a')
        draw = ImageDraw.Draw(img)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        for i in range(height):
            r = int(15 + (i/height)*40)
            g = int(23 + (i/height)*60)
            b = int(42 + (i/height)*100)
            draw.line([(0, i), (width, i)], fill=(r, g, b))
        
        # –°–µ—Ç–∫–∞
        for i in range(0, width, 40):
            draw.line([(i, 0), (i, height)], fill=(255, 255, 255, 25))
        for i in range(0, height, 40):
            draw.line([(0, i), (width, i)], fill=(255, 255, 255, 25))
        
        # –¢–µ–∫—Å—Ç
        wrapped_text = textwrap.fill(title, width=35)
        
        try:
            font = ImageFont.truetype("Arial.ttf", 22)
        except:
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 20)
            except:
                font = ImageFont.load_default()
        
        bbox = draw.textbbox((0, 0), wrapped_text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        x = (width - text_width) / 2
        y = (height - text_height) / 2
        
        draw.text((x+3, y+3), wrapped_text, font=font, fill="#000000")
        draw.text((x, y), wrapped_text, font=font, fill="#ffffff")
        
        draw.rectangle([(10, height-35), (120, height-10)], fill="#6366f1")
        draw.text((15, height-30), "AI GENERATED", font=ImageFont.load_default(), fill="#ffffff")
        
        img.save(filename)
        logger.info(f"üé® –°–æ–∑–¥–∞–Ω placeholder: {filename}")
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è placeholder: {e}")
        return os.path.join(REPO_ROOT, "assets", "images", "default.png")

# ======== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ========
def generate_slug(text):
    text = text.lower()
    text = text.replace(' ', '-')
    text = re.sub(r'[^a-z0-9\-]', '', text)
    text = re.sub(r'-+', '-', text)
    return text[:60]

def generate_frontmatter(title, content, model_used, image_url):
    now = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
    escaped_title = title.replace(':', ' -').replace('"', "'")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if image_url and image_url.startswith(REPO_ROOT):
        relative_image_url = os.path.relpath(image_url, REPO_ROOT)
    else:
        relative_image_url = image_url
    
    frontmatter = f"""---
title: "{escaped_title}"
date: {now}
draft: false
image: "{relative_image_url}"
ai_model: "{model_used}"
tags: ["ai", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "2025"]
categories: ["–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]
summary: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö AI –≤ 2025 –≥–æ–¥—É"
---

{content}
"""
    return frontmatter

# ======== –ó–∞–ø—É—Å–∫ ========
def main():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä AI –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    parser.add_argument('--debug', action='store_true', help='–í–∫–ª—é—á–∏—Ç—å debug —Ä–µ–∂–∏–º')
    parser.add_argument('--count', type=int, default=1, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏')
    args = parser.parse_args()
    
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.info("üîß Debug —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    print("=" * 50)
    
    check_environment_variables()
    print("=" * 50)
    
    try:
        for i in range(args.count):
            print(f"\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ {i+1}/{args.count}...")
            filename = generate_content()
            
            if filename:
                print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filename}")
            else:
                print(f"‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞")
            
            if i < args.count - 1:
                time.sleep(2)
                
        print("\nüéâ –í—Å–µ —Å—Ç–∞—Ç—å–∏ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
