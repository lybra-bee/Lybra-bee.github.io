#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime
import glob
import time

def generate_content():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π –æ—Å—Ç–∞–≤–ª—è—Ç—å
    KEEP_LAST_ARTICLES = 3
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç—å–∏
    clean_old_articles(KEEP_LAST_ARTICLES)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤ AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
    selected_topic = generate_ai_trend_topic()
    print(f"üìù –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞: {selected_topic}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ AI API
    image_filename = generate_article_image(selected_topic)
    
    # –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter
    api_key = os.getenv('OPENROUTER_API_KEY')
    content = ""
    model_used = "–õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    api_success = False
    
    if api_key and api_key != "":
        working_models = [
            "mistralai/mistral-7b-instruct",
            "google/gemini-pro",
            "anthropic/claude-3-haiku",
            "meta-llama/llama-3-8b-instruct",
        ]
        
        for selected_model in working_models:
            try:
                print(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {selected_model}")
                
                response = requests.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers={
                        "Content-Type": "application/json",
                        "Authorization": f"Bearer {api_key}",
                        "HTTP-Referer": "https://github.com",
                        "X-Title": "AI Blog Generator"
                    },
                    json={
                        "model": selected_model,
                        "messages": [
                            {
                                "role": "user",
                                "content": f"–ù–∞–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: {selected_topic}. –ò—Å–ø–æ–ª—å–∑—É–π Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ ##, **–∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º** –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤. –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ–±—ä–µ–º 300-400 —Å–ª–æ–≤. –°–¥–µ–ª–∞–π —Å—Ç–∞—Ç—å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."
                            }
                        ],
                        "max_tokens": 600,
                        "temperature": 0.7
                    },
                    timeout=20
                )
                
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    if 'choices' in data and len(data['choices']) > 0:
                        content = data['choices'][0]['message']['content']
                        model_used = selected_model
                        api_success = True
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ {selected_model}")
                        content = content.replace('"""', '').replace("'''", "").strip()
                        break
                else:
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –æ—Ç {selected_model}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å {selected_model}: {e}")
                continue
        
        if not api_success:
            print("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            content = generate_fallback_content(selected_topic)
    else:
        print("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
        content = generate_fallback_content(selected_topic)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
    date = datetime.now().strftime("%Y-%m-%d")
    slug = generate_slug(selected_topic)
    filename = f"content/posts/{date}-{slug}.md"
    
    frontmatter = generate_frontmatter(selected_topic, content, model_used, api_success, image_filename)
    
    os.makedirs("content/posts", exist_ok=True)
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(frontmatter)
    
    print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
    return filename

def generate_article_image(topic):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ AI API"""
    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ AI API...")
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_prompt = f"Technology illustration for article about {topic}. Modern, clean, professional style. Abstract technology concept with neural networks, data visualization. Blue and purple color scheme. No text."
    
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ API –ø–æ –æ—á–µ—Ä–µ–¥–∏
    apis_to_try = [
        {"name": "HuggingFace Stable Diffusion", "function": try_huggingface_api},
        {"name": "StabilityAI", "function": try_stabilityai_api},
        {"name": "DeepAI", "function": try_deepai_api},
        {"name": "Fallback", "function": create_fallback_image}
    ]
    
    for api in apis_to_try:
        try:
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º {api['name']}...")
            result = api['function'](image_prompt, topic)
            if result:
                return result
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≤ {api['name']}: {e}")
            continue
    
    return None

def try_huggingface_api(prompt, topic):
    """–ü—Ä–æ–±—É–µ–º Hugging Face Stable Diffusion API"""
    hf_token = os.getenv('HUGGINGFACE_TOKEN')
    if not hf_token:
        return None
    
    try:
        # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π
        models = [
            "stabilityai/stable-diffusion-2-1",
            "runwayml/stable-diffusion-v1-5",
            "prompthero/openjourney"
        ]
        
        for model in models:
            try:
                headers = {"Authorization": f"Bearer {hf_token}"}
                payload = {
                    "inputs": prompt,
                    "parameters": {
                        "width": 800,
                        "height": 400,
                        "num_inference_steps": 25,
                        "guidance_scale": 7.5
                    }
                }
                
                response = requests.post(
                    f"https://api-inference.huggingface.co/models/{model}",
                    headers=headers,
                    json=payload,
                    timeout=45
                )
                
                if response.status_code == 200:
                    filename = save_article_image(response.content, topic)
                    if filename:
                        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ {model}")
                        return filename
                else:
                    print(f"‚ùå –ú–æ–¥–µ–ª—å {model} –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∞: {response.status_code}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å –º–æ–¥–µ–ª—å—é {model}: {e}")
                continue
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ HuggingFace API: {e}")
    
    return None

def try_stabilityai_api(prompt, topic):
    """–ü—Ä–æ–±—É–µ–º Stability AI API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ)"""
    stability_key = os.getenv('STABILITYAI_KEY')
    if not stability_key:
        return None
    
    try:
        headers = {
            "Authorization": f"Bearer {stability_key}",
            "Content-Type": "application/json"
        }
        
        payload = {
            "text_prompts": [{"text": prompt}],
            "cfg_scale": 7,
            "height": 400,
            "width": 800,
            "samples": 1,
            "steps": 30
        }
        
        response = requests.post(
            "https://api.stability.ai/v1/generation/stable-diffusion-v1-6/text-to-image",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            if 'artifacts' in data and data['artifacts']:
                image_data = base64.b64decode(data['artifacts'][0]['base64'])
                filename = save_article_image(image_data, topic)
                if filename:
                    print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Stability AI")
                    return filename
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ Stability AI API: {e}")
    
    return None

def try_deepai_api(prompt, topic):
    """–ü—Ä–æ–±—É–µ–º DeepAI API (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π)"""
    try:
        # DeepAI –∏–º–µ–µ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏
        headers = {
            "api-key": "quickstart-QUdJIGlzIGNvbWluZy4uLi4K",  # –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–ª—é—á
            "Content-Type": "application/json"
        }
        
        payload = {
            "text": prompt,
            "grid_size": "1",
            "width": "800",
            "height": "400"
        }
        
        response = requests.post(
            "https://api.deepai.org/api/text2img",
            headers=headers,
            json=payload,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            if 'output_url' in data:
                image_response = requests.get(data['output_url'], timeout=30)
                if image_response.status_code == 200:
                    filename = save_article_image(image_response.content, topic)
                    if filename:
                        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ DeepAI")
                        return filename
                        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ DeepAI API: {e}")
    
    return None

def save_article_image(image_data, topic):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    try:
        os.makedirs("static/images/posts", exist_ok=True)
        slug = generate_slug(topic)
        filename = f"images/posts/{slug}.jpg"
        full_path = f"static/{filename}"
        
        with open(full_path, 'wb') as f:
            f.write(image_data)
        
        print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def create_fallback_image(prompt, topic):
    """–°–æ–∑–¥–∞–µ—Ç fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é Pillow"""
    try:
        from PIL import Image, ImageDraw, ImageFont
        
        os.makedirs("static/images/posts", exist_ok=True)
        slug = generate_slug(topic)
        filename = f"images/posts/{slug}.jpg"
        full_path = f"static/{filename}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        width, height = 800, 400
        image = Image.new('RGB', (width, height), color=(25, 25, 50))
        draw = ImageDraw.Draw(image)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        for i in range(height):
            r = 25 + i // 8
            g = 25 + i // 12
            b = 50 + i // 6
            draw.line([(0, i), (width, i)], fill=(r, g, b))
        
        # –¢–µ
