#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Hugo –±–ª–æ–≥–∞ —Å AI-—Å—Ç–∞—Ç—å—è–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
"""

import os
import requests
import random
from datetime import datetime, timezone
import re
import logging
import argparse
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "8006769060:AAEGAKhjUeuAXfnsQWtdLcKpAjkJrrGQ1Fk"
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', 'YOUR_CHAT_ID')

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º—ã ========
def generate_ai_trend_topic():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã –ø—Ä–æ AI —Ç—Ä–µ–Ω–¥—ã"""
    current_trends_2025 = [
        "Multimodal AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ",
        "AI –∞–≥–µ–Ω—Ç—ã –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", 
        "–ù–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
        "Generative AI —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        "Edge AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
        "AI –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "–≠—Ç–∏—á–Ω—ã–π AI –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
        "AI –≤ healthcare –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
        "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞"
    ]
    
    application_domains = [
        "–≤ –≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö", 
        "–≤ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö",
        "–≤ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
        "–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ",
        "–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
        "–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ smart city",
        "–≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"
    ]
    
    trend = random.choice(current_trends_2025)
    domain = random.choice(application_domains)
    
    return f"{trend} {domain} –≤ 2025 –≥–æ–¥—É"

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ ========
def generate_article_content(topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏"""
    try:
        # –ü—Ä–æ–±—É–µ–º Groq API
        groq_key = os.getenv('GROQ_API_KEY')
        if groq_key and groq_key not in ['', 'your_groq_api_key_here']:
            try:
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º Groq API...")
                return generate_with_groq(groq_key, topic)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Groq: {e}")
        
        # –ü—Ä–æ–±—É–µ–º OpenRouter API
        openrouter_key = os.getenv('OPENROUTER_API_KEY')
        if openrouter_key and openrouter_key not in ['', 'your_openrouter_api_key_here']:
            try:
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º OpenRouter API...")
                return generate_with_openrouter(openrouter_key, topic)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter: {e}")
                
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    
    # Fallback
    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–Ω—Ç–µ–Ω—Ç")
    return generate_fallback_content(topic)

def generate_with_groq(api_key, topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Groq API"""
    prompt = f"""–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: '{topic}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –§–æ—Ä–º–∞—Ç Markdown
- 300-500 —Å–ª–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã
- –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ 2025 –≥–æ–¥
"""
    
    resp = requests.post(
        "https://api.groq.com/openai/v1/chat/completions",
        headers={"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"},
        json={
            "model": "llama-3.3-70b-versatile",  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
            "messages": [{"role": "user", "content": prompt}], 
            "max_tokens": 1500,
            "temperature": 0.7
        },
        timeout=30
    )
    
    if resp.status_code == 200:
        data = resp.json()
        return data['choices'][0]['message']['content'].strip()
    else:
        raise Exception(f"HTTP error {resp.status_code}: {resp.text}")

def generate_with_openrouter(api_key, topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter API"""
    prompt = f"""–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: '{topic}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –§–æ—Ä–º–∞—Ç Markdown  
- 300-500 —Å–ª–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω
"""
    
    # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏–∑-–∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö DNS –ø—Ä–æ–±–ª–µ–º
    for attempt in range(3):
        try:
            resp = requests.post(
                "https://api.openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {api_key}", 
                    "Content-Type": "application/json",
                    "HTTP-Referer": "https://lybra-bee.github.io"
                },
                json={
                    "model": "anthropic/claude-3-sonnet", 
                    "messages": [{"role": "user", "content": prompt}], 
                    "max_tokens": 1500,
                    "temperature": 0.7
                },
                timeout=30
            )
            
            if resp.status_code == 200:
                data = resp.json()
                return data['choices'][0]['message']['content'].strip()
            else:
                raise Exception(f"HTTP error {resp.status_code}: {resp.text}")
                
        except Exception as e:
            if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                raise e
            time.sleep(2)  # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
            logger.warning(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –¥–ª—è OpenRouter")

def generate_fallback_content(topic):
    """Fallback –∫–æ–Ω—Ç–µ–Ω—Ç"""
    return f"""# {topic}

## –í–≤–µ–¥–µ–Ω–∏–µ
{topic} - —ç—Ç–æ –æ–¥–Ω–∞ –∏–∑ –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π 2025 –≥–æ–¥–∞. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏.

## –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö  
- –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
–ö–æ–º–ø–∞–Ω–∏–∏ –≤–Ω–µ–¥—Ä—è—é—Ç AI —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –ø–æ–∑–≤–æ–ª—è—é—Ç —Ä–µ—à–∞—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω–µ–µ –±—ã–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏.

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã
–†–µ–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º —Ç—Ä–µ–±—É–µ—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
–ë—É–¥—É—â–µ–µ –≤—ã–≥–ª—è–¥–∏—Ç –º–Ω–æ–≥–æ–æ–±–µ—â–∞—é—â–∏–º —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ú—ã –º–æ–∂–µ–º –æ–∂–∏–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –µ—â–µ –±–æ–ª–µ–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π –≤ –±–ª–∏–∂–∞–π—à–∏–µ –≥–æ–¥—ã.

*–°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*
"""

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ========
def generate_article_image(topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
    try:
        prompt = f"{topic}, digital art, futuristic, 4k, high quality"
        
        logger.info(f"üé® –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É
        response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json={
                "chat_id": TELEGRAM_CHAT_ID,
                "text": f"/generate {prompt}",
                "parse_mode": "Markdown"
            },
            timeout=15
        )
        
        logger.info(f"üì§ –û—Ç–≤–µ—Ç Telegram: {response.status_code}")
        
        if response.status_code == 200:
            logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é + –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (40 —Å–µ–∫—É–Ω–¥)...")
            time.sleep(40)
            
            logger.info("‚úÖ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return f"/images/posts/{generate_slug(topic)}.jpg"
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {response.text}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ default –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    return "/images/default.jpg"

def generate_slug(text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug"""
    text = text.lower().replace(' ', '-')
    text = re.sub(r'[^a-z0-9\-]', '', text)
    return re.sub(r'-+', '-', text)[:50]

def clean_old_articles(keep_last=3):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π"""
    content_dir = "content/posts"
    if os.path.exists(content_dir):
        posts = sorted([f for f in os.listdir(content_dir) if f.endswith('.md')], reverse=True)
        for post in posts[keep_last:]:
            os.remove(os.path.join(content_dir, post))
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç: {post}")

def main():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä AI –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    parser.add_argument('--count', type=int, default=1, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π')
    parser.add_argument('--keep', type=int, default=3, help='–°–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π –æ—Å—Ç–∞–≤–ª—è—Ç—å')
    parser.add_argument('--debug', action='store_true', help='–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏')
    args = parser.parse_args()
    
    # –í–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for var in ['OPENROUTER_API_KEY', 'GROQ_API_KEY', 'TELEGRAM_BOT_TOKEN', 'TELEGRAM_CHAT_ID']:
        value = os.getenv(var)
        status = "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if value and value not in ['', f'your_{var.lower()}_here'] else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        logger.info(f"   {var}: {status}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π
    clean_old_articles(args.keep)
    
    for i in range(args.count):
        topic = generate_ai_trend_topic()
        logger.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ {i+1}/{args.count}: {topic}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content = generate_article_content(topic)
        image_path = generate_article_image(topic)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
        slug = generate_slug(topic)
        filename = f"content/posts/{slug}.md"
        
        os.makedirs("content/posts", exist_ok=True)
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"""---
title: "{topic.replace('"', "'")}"
date: {datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')}
image: "{image_path}"
draft: false
tags: ["ai", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "2025"]
categories: ["–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]
summary: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö AI"
---

{content}
""")
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
        
        if i < args.count - 1:
            time.sleep(2)

if __name__ == "__main__":
    main()
