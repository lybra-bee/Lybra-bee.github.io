#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime

def generate_content():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    topics = [
        "–í–µ–±-—Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∏ 2024: React, Vue, Svelte",
        "Serverless –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π", 
        "–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (PWA)",
        "–ö–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π"
    ]
    
    selected_topic = random.choice(topics)
    print(f"üìù –¢–µ–º–∞: {selected_topic}")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ OpenRouter
    api_key = os.getenv('OPENROUTER_API_KEY')
    content = ""
    
    if api_key:
        try:
            print("üîÑ –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ OpenRouter API...")
            
            # –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏
            free_models = [
                "mistralai/mistral-7b-instruct",
                "google/gemini-pro",
                "huggingfaceh4/zephyr-7b-beta"
            ]
            
            selected_model = random.choice(free_models)
            print(f"üéØ –ú–æ–¥–µ–ª—å: {selected_model}")
            
            response = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Content-Type": "application/json",
                    "Authorization": f"Bearer {api_key}",
                    "HTTP-Referer": "https://github.com",
                    "X-Title": "AI Blog Generator"
                },
                json={
                    "model": selected_model,
                    "messages": [
                        {
                            "role": "user",
                            "content": f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∞–±–∑–∞—Ü (100-150 —Å–ª–æ–≤) –Ω–∞ —Ç–µ–º—É: {selected_topic}. –ò—Å–ø–æ–ª—å–∑—É–π Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                        }
                    ],
                    "max_tokens": 300,
                    "temperature": 0.7
                },
                timeout=15
            )
            
            print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
            
            if response.status_code == 200:
                data = response.json()
                if 'choices' in data and len(data['choices']) > 0:
                    content = data['choices'][0]['message']['content']
                    print("‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ API")
                else:
                    raise Exception("–ù–µ—Ç choices –≤ –æ—Ç–≤–µ—Ç–µ API")
            else:
                error_msg = response.text[:200] if response.text else "No error message"
                raise Exception(f"API error {response.status_code}: {error_msg}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ API: {e}")
            # Fallback –∫–æ–Ω—Ç–µ–Ω—Ç
            content = f"""## {selected_topic}

–í 2024 –≥–æ–¥—É **{selected_topic.split(':')[0]}** –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è. 

### –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏

- **–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã** –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ
- **–£–ª—É—á—à–µ–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å** —Å–∏—Å—Ç–µ–º
- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏**
- **–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å

–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ª–∞–Ω–¥—à–∞—Ñ—Ç –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –º–µ–Ω—è–µ—Ç—Å—è, –ø—Ä–µ–¥–ª–∞–≥–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã—Ö –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º—ã—Ö —Ä–µ—à–µ–Ω–∏–π."""
    else:
        print("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
        content = f"""## {selected_topic}

–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö –≤ –æ–±–ª–∞—Å—Ç–∏ {selected_topic.lower()}.

**–ö–ª—é—á–µ–≤—ã–µ –∞—Å–ø–µ–∫—Ç—ã:**
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏  
- –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±–ª–∞—á–Ω—ã–º–∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º–∏"""
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    date = datetime.now().strftime("%Y-%m-%d")
    slug = selected_topic.lower().replace(' ', '-').replace(':', '').replace('(', '').replace(')', '')[:30]
    slug = ''.join(c for c in slug if c.isalnum() or c == '-')
    filename = f"content/posts/{date}-{slug}.md"
    
    frontmatter = f"""---
title: "{selected_topic}"
date: {datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")}
draft: false
tags: ["–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
categories: ["–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞"]
---

# {selected_topic}

{content}

---

### üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

- **–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {datetime.now().strftime("%d.%m.%Y %H:%M")}
- **–¢–µ–º–∞:** {selected_topic}
- **–°—Ç–∞—Ç—É—Å:** {'‚úÖ API –≥–µ–Ω–µ—Ä–∞—Ü–∏—è' if api_key and 'API' in content else '‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è'}

> *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ GitHub Actions*
"""
    
    os.makedirs("content/posts", exist_ok=True)
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(frontmatter)
    
    print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
    
    # –ü–æ–∫–∞–∂–µ–º –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    with open(filename, 'r', encoding='utf-8') as f:
        preview = f.read(500)
    print(f"üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n{preview}...")
    
    return filename

if __name__ == "__main__":
    generate_content()
