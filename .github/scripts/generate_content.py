#!/usr/bin/env python3
import os
import requests
import logging
import base64
import shutil
import time
import re
from datetime import datetime
import textwrap
import yaml

# === –õ–û–ì–ò ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
FUSIONBRAIN_API_KEY = os.getenv("FUSIONBRAIN_API_KEY")
FUSION_SECRET_KEY = os.getenv("FUSION_SECRET_KEY")

POSTS_DIR = "content/posts"
ASSETS_DIR = "assets/images/posts"
STATIC_DIR = "static/images/posts"
GALLERY_FILE = "data/gallery.yaml"

MAX_POSTS = 5


# === –£–¢–ò–õ–ò–¢–´ ===
def slugify(text):
    text = text.lower()
    text = re.sub(r"[^a-z–∞-—è0-9]+", "-", text)
    return text.strip("-")


def save_article(title, content, model, image_path, slug):
    os.makedirs(POSTS_DIR, exist_ok=True)

    filename = os.path.join(POSTS_DIR, f"{slug}.md")
    with open(filename, "w", encoding="utf-8") as f:
        f.write(textwrap.dedent(f"""\
        ---
        title: "{title}"
        date: {datetime.utcnow().isoformat()}Z
        image: {image_path}
        model: {model}
        ---

        {content}
        """))

    logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")


def cleanup_old_posts():
    files = sorted(
        [os.path.join(POSTS_DIR, f) for f in os.listdir(POSTS_DIR) if f.endswith(".md")],
        key=os.path.getmtime,
        reverse=True
    )
    if len(files) > MAX_POSTS:
        for f in files[MAX_POSTS:]:
            os.remove(f)
            logging.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç–∞—Ç—å—è: {f}")


# === –ì–ï–ù–ï–†–ê–¶–ò–Ø –¢–ï–ö–°–¢–ê ===
def generate_article():
    prompt = (
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö "
        "–∏ –Ω–∞–ø–∏—à–∏ —É–Ω–∏–∫–∞–ª—å–Ω—É—é –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ 400-600 —Å–ª–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
        "–°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∞–±–∑–∞—Ü–∞–º–∏. –î–∞–π –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫."
    )

    headers = {"Authorization": f"Bearer {OPENROUTER_API_KEY}"}
    data = {
        "model": "mistral-large-latest",
        "messages": [{"role": "user", "content": prompt}]
    }

    try:
        r = requests.post("https://openrouter.ai/api/v1/chat/completions",
                          headers=headers, json=data, timeout=60)
        r.raise_for_status()
        text = r.json()["choices"][0]["message"]["content"]
        logging.info("‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ OpenRouter")
        return text, "openrouter"
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")
        headers = {"Authorization": f"Bearer {GROQ_API_KEY}"}
        data["model"] = "llama-3.1-70b-versatile"
        r = requests.post("https://api.groq.com/openai/v1/chat/completions",
                          headers=headers, json=data, timeout=60)
        r.raise_for_status()
        text = r.json()["choices"][0]["message"]["content"]
        logging.info("‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ Groq")
        return text, "groq"


# === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø ===
def generate_image(title, slug):
    logging.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain...")

    headers = {
        "X-Key": f"Key {FUSIONBRAIN_API_KEY}",
        "X-Secret": f"Secret {FUSION_SECRET_KEY}"
    }

    prompt = f"–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ —Å—Ç–∞—Ç—å–µ: {title}. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, hi-tech, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç."
    params = {
        "type": "GENERATE",
        "style": "DEFAULT",
        "width": 1024,
        "height": 576,
        "num_images": 1,
        "text": prompt
    }

    files = {"params": (None, str(params))}
    url = "https://api-key.fusionbrain.ai/key/api/v1/text2image/run"
    r = requests.post(url, headers=headers, files=files, timeout=60)
    r.raise_for_status()
    data = r.json()
    uuid = data.get("uuid")

    if not uuid:
        logging.error("‚ùå FusionBrain –Ω–µ –≤–µ—Ä–Ω—É–ª UUID –∑–∞–¥–∞—á–∏")
        return "/images/placeholder.jpg"

    status_url = f"https://api-key.fusionbrain.ai/key/api/v1/text2image/status/{uuid}"
    for i in range(20):
        s = requests.get(status_url, headers=headers, timeout=30)
        s.raise_for_status()
        resp = s.json()

        if resp.get("status") == "DONE":
            img_b64 = resp["images"][0]
            img_data = base64.b64decode(img_b64)

            os.makedirs(ASSETS_DIR, exist_ok=True)
            os.makedirs(STATIC_DIR, exist_ok=True)

            img_path = os.path.join(ASSETS_DIR, f"{slug}.png")
            with open(img_path, "wb") as f:
                f.write(img_data)
            shutil.copy(img_path, os.path.join(STATIC_DIR, f"{slug}.png"))

            logging.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return f"/images/posts/{slug}.png"

        logging.info(f"‚åõ –ñ–¥—ë–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... ({i+1}/20)")
        time.sleep(3)

    logging.error("‚ö†Ô∏è FusionBrain –Ω–µ —É—Å–ø–µ–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    return "/images/placeholder.jpg"


# === –û–ë–ù–û–í–õ–ï–ù–ò–ï –ì–ê–õ–ï–†–ï–ò ===
def update_gallery(image_path, title):
    os.makedirs("data", exist_ok=True)
    gallery = []

    if os.path.exists(GALLERY_FILE):
        with open(GALLERY_FILE, "r", encoding="utf-8") as f:
            gallery = yaml.safe_load(f) or []

    gallery.insert(0, {"src": image_path, "alt": title, "title": title})

    with open(GALLERY_FILE, "w", encoding="utf-8") as f:
        yaml.dump(gallery, f, allow_unicode=True)

    logging.info("üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")


# === MAIN ===
def main():
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏...")
    text, model = generate_article()

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ = –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å #
    title_line = text.strip().split("\n")[0]
    title = re.sub(r"^#+\s*", "", title_line).strip()
    if len(title) < 5:
        title = "–ù–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ"

    slug = slugify(title)

    img_path = generate_image(title, slug)
    save_article(title, text, model, img_path, slug)
    cleanup_old_posts()
    update_gallery(img_path, title)


if __name__ == "__main__":
    main()
