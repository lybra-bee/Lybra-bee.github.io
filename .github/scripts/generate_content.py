#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime, timezone
import shutil
import re
import textwrap
from PIL import Image, ImageDraw, ImageFont
import time
import logging
import argparse
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ Replicate (–æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏)
REPLICATE_FREE_MODELS = [
    {
        "name": "FLUX.1 Schnell",
        "id": "black-forest-labs/flux-1-schnell",
        "version": "5c8c8347c5c4b3bb79a3c0c2f53a2a9e30889f5b4f6b2c2d5c8d2e5e8c2d5c8d",
        "prompt_template": "{topic}, digital art, futuristic, professional, 4k quality"
    },
    {
        "name": "Stable Diffusion XL", 
        "id": "stability-ai/sdxl",
        "version": "39ed52f2a78e934b3ba6e2a89f5b1c712de7dfea535525255b1aa35c5565e08b",
        "prompt_template": "{topic}, digital art, futuristic style, high quality"
    },
    {
        "name": "FLUX Dev",
        "id": "black-forest-labs/flux-dev",
        "version": "0e0e2a5f40c9c233d133c5b8f19dc2b1c5b8f19dc2b1c5b8f19dc2b1c5b8f19dc",
        "prompt_template": "{topic}, experimental, AI art, futuristic technology"
    },
    {
        "name": "Karlo",
        "id": "kakaobrain/karlo",
        "version": "3c9c9a5f7b3c3e5f5e5c5b5a5f5e5c5b5a5f5e5c5b5a5f5e5c5b5a5f5e5c5b5a",
        "prompt_template": "{topic}, digital art, creative, innovative design"
    }
]

# ======== [–û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î –û–°–¢–ê–ï–¢–°–Ø –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô] ========
# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)

def try_replicate_free_models(topic):
    """–ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –º–æ–¥–µ–ª–∏ Replicate —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –≤–µ—Ä—Å–∏—è–º–∏"""
    REPLICATE_TOKEN = os.getenv('REPLICATE_API_TOKEN')
    if not REPLICATE_TOKEN:
        logger.warning("‚ö†Ô∏è Replicate —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return None
    
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—è
    random.shuffle(REPLICATE_FREE_MODELS)
    
    for model_info in REPLICATE_FREE_MODELS:
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {model_info['name']}")
            
            prompt = model_info['prompt_template'].format(topic=topic)
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏
            version = get_latest_model_version(REPLICATE_TOKEN, model_info["id"])
            if not version:
                logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–µ—Ä—Å–∏—é –¥–ª—è {model_info['name']}")
                continue
                
            response = requests.post(
                "https://api.replicate.com/v1/predictions",
                headers={
                    "Authorization": f"Bearer {REPLICATE_TOKEN}",
                    "Content-Type": "application/json"
                },
                json={
                    "version": version,
                    "input": {
                        "prompt": prompt,
                        "width": 512,
                        "height": 512,
                        "num_outputs": 1,
                        "num_inference_steps": 20
                    }
                },
                timeout=30
            )
            
            if response.status_code == 200:
                prediction_id = response.json()['id']
                logger.info(f"‚úÖ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {prediction_id}")
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                for attempt in range(8):  # –£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
                    time.sleep(2)
                    status_response = requests.get(
                        f"https://api.replicate.com/v1/predictions/{prediction_id}",
                        headers={"Authorization": f"Bearer {REPLICATE_TOKEN}"},
                        timeout=15
                    )
                    
                    if status_response.status_code == 200:
                        status_data = status_response.json()
                        status = status_data.get('status', '')
                        
                        if status == 'succeeded':
                            image_url = status_data['output'][0]
                            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ: {image_url}")
                            img_data = requests.get(image_url, timeout=30).content
                            return save_image_bytes(img_data, topic)
                        elif status == 'failed':
                            error_msg = status_data.get('error', 'Unknown error')
                            logger.warning(f"‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_msg}")
                            break
                        else:
                            logger.info(f"‚è≥ –°—Ç–∞—Ç—É—Å: {status} (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1})")
                    else:
                        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞: {status_response.status_code}")
                        break
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏ {model_info['name']}: {e}")
            continue
    
    return None

def get_latest_model_version(replicate_token, model_id):
    """–ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –º–æ–¥–µ–ª–∏"""
    try:
        response = requests.get(
            f"https://api.replicate.com/v1/models/{model_id}/versions",
            headers={"Authorization": f"Bearer {replicate_token}"},
            timeout=10
        )
        
        if response.status_code == 200:
            versions = response.json().get('results', [])
            if versions:
                # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é
                return versions[0]['id']
        return None
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ –¥–ª—è {model_id}: {e}")
        return None

# ======== [–û–°–¢–ê–õ–¨–ù–û–ô –ö–û–î –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô] ========
