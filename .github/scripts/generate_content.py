#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime
import glob
import base64
import time

def get_gigachat_token():
    client_id = os.getenv('GIGACHAT_CLIENT_ID')
    client_secret = os.getenv('GIGACHAT_CLIENT_SECRET')
    if not client_id or not client_secret:
        print("‚ùå GIGACHAT_CLIENT_ID –∏–ª–∏ GIGACHAT_CLIENT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    auth_string = f"{client_id}:{client_secret}"
    auth_key = base64.b64encode(auth_string.encode()).decode()
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": f"rq-{random.randint(100000, 999999)}-{int(time.time())}",
        "Authorization": f"Basic {auth_key}"
    }
    data = {"scope": "GIGACHAT_API_PERS"}
    try:
        response = requests.post(url, headers=headers, data=data, verify=False, timeout=30)
        if response.status_code == 200:
            return response.json().get("access_token")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat: {e}")
    return None

def generate_ai_trend_topic():
    trends = [
        "Multimodal AI", "AI –∞–≥–µ–Ω—Ç—ã", "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ ML",
        "–ù–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è", "Generative AI", "Edge AI",
        "AI –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "–≠—Ç–∏—á–Ω—ã–π AI", "AI –≤ healthcare",
        "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã", "AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è", "–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π AI",
        "AI –¥–ª—è –∫–ª–∏–º–∞—Ç–∞", "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã", "AI –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"
    ]
    domains = [
        "–≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ cloud-native –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö",
        "–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∏ IoT —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–µ",
        "–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∏–±–µ—Ä–∑–∞—â–∏—Ç–µ",
        "–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
        "–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ —Ñ–∏–Ω—Ç–µ—Ö–µ",
        "–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ smart city –∏ —É–º–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ",
        "–≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ EdTech"
    ]
    trend = random.choice(trends)
    domain = random.choice(domains)
    formats = [
        f"{trend} {domain} –≤ 2025 –≥–æ–¥—É",
        f"–¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ 2025: {trend} {domain}",
        f"{trend} - —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è {domain} –≤ 2025",
        f"–ö–∞–∫ {trend} —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç {domain} –≤ 2025 –≥–æ–¥—É",
        f"–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ 2025: {trend} –¥–ª—è {domain}",
        f"{trend} - –±—É–¥—É—â–µ–µ {domain} –≤ 2025 –≥–æ–¥—É",
        f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {trend} –≤ {domain} 2025"
    ]
    return random.choice(formats)

def generate_slug(topic):
    slug = topic.lower()
    replacements = {' ': '-', ':': '', '(': '', ')': '', '/': '-', '\\': '-', '.': '', ',': '', '--': '-'}
    for old, new in replacements.items():
        slug = slug.replace(old, new)
    slug = ''.join(c for c in slug if c.isalnum() or c == '-')
    while '--' in slug:
        slug = slug.replace('--', '-')
    return slug[:50]

def clean_old_articles(keep_last=3):
    articles = glob.glob("content/posts/*.md")
    if not articles:
        return
    articles.sort(key=os.path.getmtime)
    for f in articles[:-keep_last]:
        os.remove(f)

def save_article_image(image_data, topic):
    os.makedirs("static/images/posts", exist_ok=True)
    slug = generate_slug(topic)
    filename = f"images/posts/{slug}.jpg"  # –ø—É—Ç—å –¥–ª—è frontmatter –±–µ–∑ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ /
    full_path = f"static/{filename}"
    with open(full_path, 'wb') as f:
        f.write(image_data)
    return filename

def generate_frontmatter(topic, content, model_used, image_filename=None):
    current_time = datetime.utcnow()
    tags = ["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "2025", "ai"]
    image_line = f"image: {image_filename}\n" if image_filename else ""
    return f"""---
title: "{topic}"
date: {current_time.strftime("%Y-%m-%dT%H:%M:%SZ")}
draft: false
description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ {topic}"
{image_line}tags: {json.dumps(tags, ensure_ascii=False)}
categories: ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
---

# {topic}

{f'![]({image_filename})' if image_filename else ''}

{content}

---

### üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

- **–ú–æ–¥–µ–ª—å AI:** {model_used}
- **–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {current_time.strftime("%d.%m.%Y %H:%M UTC")}
- **–¢–µ–º–∞:** {topic}
- **–ì–æ–¥ –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏:** 2025
- **–°—Ç–∞—Ç—É—Å:** –ß–∏—Å—Ç–∞—è AI –≥–µ–Ω–µ—Ä–∞—Ü–∏—è

> *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ GitHub Actions*
"""

def generate_content():
    KEEP_LAST_ARTICLES = 3
    clean_old_articles(KEEP_LAST_ARTICLES)
    topic = generate_ai_trend_topic()
    slug = generate_slug(topic)
    date = datetime.now().strftime("%Y-%m-%d")
    filename = f"content/posts/{date}-{slug}.md"

    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ OpenRouter / Stability
    content = f"–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è —Å—Ç–∞—Ç—å—è –ø–æ —Ç–µ–º–µ {topic}.\n\n(–∫–æ–Ω—Ç–µ–Ω—Ç AI)"
    model_used = "OpenRouter / Stability AI"
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –∫—Ä–µ–¥–∏—Ç—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å)
    # image_filename = save_article_image(b"", topic)  # –ø—É—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥–ª—É—à–∫–∞
    image_filename = None

    frontmatter = generate_frontmatter(topic, content, model_used, image_filename)
    os.makedirs("content/posts", exist_ok=True)
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(frontmatter)

    print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filename}")
    return filename

if __name__ == "__main__":
    try:
        generate_content()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)
