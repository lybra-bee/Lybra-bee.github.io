#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import json
import requests
import random
import base64
import glob
from datetime import datetime
from typing import Optional, Tuple

# ==========
# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
# ==========
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
STABILITYAI_KEY = os.getenv("STABILITYAI_KEY")

POSTS_DIR = "content/posts"
IMAGES_DIR = "static/images/posts"   # –∫–ª–∞–¥—ë–º –≤ static, —á—Ç–æ–±—ã Hugo —Ç–æ—á–Ω–æ –æ—Ç–¥–∞–ª
KEEP_LAST_ARTICLES = 6               # —Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π –¥–µ—Ä–∂–∞—Ç—å –º–∞–∫—Å–∏–º—É–º

# ==========
# –£—Ç–∏–ª–∏—Ç—ã
# ==========
def ensure_dirs():
    os.makedirs(POSTS_DIR, exist_ok=True)
    os.makedirs(IMAGES_DIR, exist_ok=True)

def transliterate_ru_to_en(text: str) -> str:
    table = {
        '–∞':'a','–±':'b','–≤':'v','–≥':'g','–¥':'d','–µ':'e','—ë':'e','–∂':'zh','–∑':'z','–∏':'i','–π':'y',
        '–∫':'k','–ª':'l','–º':'m','–Ω':'n','–æ':'o','–ø':'p','—Ä':'r','—Å':'s','—Ç':'t','—É':'u','—Ñ':'f',
        '—Ö':'h','—Ü':'ts','—á':'ch','—à':'sh','—â':'sch','—ä':'','—ã':'y','—å':'','—ç':'e','—é':'yu','—è':'ya'
    }
    res = []
    for ch in text.lower():
        if ch in table: res.append(table[ch])
        elif ch.isalnum(): res.append(ch)
        elif ch in [' ', '-', '_']: res.append('-')
        else: res.append('-')
    slug = ''.join(res)
    while '--' in slug: slug = slug.replace('--', '-')
    return slug.strip('-')[:70]

def generate_slug(topic: str) -> str:
    return transliterate_ru_to_en(topic)

def clean_old_articles(keep_last=KEEP_LAST_ARTICLES):
    files = sorted(glob.glob(f"{POSTS_DIR}/*.md"), key=os.path.getmtime, reverse=True)
    for path in files[keep_last:]:
        try:
            os.remove(path)
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å {path}: {e}")

def write_file(path: str, content: bytes, binary: bool = False):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    mode = "wb" if binary else "w"
    with open(path, mode, encoding=None if binary else "utf-8") as f:
        f.write(content)

# ==========
# LLM: –≤—ã–±–æ—Ä —Ç–µ–º—ã –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏
# ==========
def llm_chat_groq(prompt: str, model: str = "llama-3.1-8b-instant", max_tokens: int = 1400) -> str:
    if not GROQ_API_KEY:
        raise RuntimeError("GROQ_API_KEY not set")
    url = "https://api.groq.com/openai/v1/chat/completions"
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}", "Content-Type": "application/json"}
    body = {
        "model": model,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "top_p": 0.9,
        "max_tokens": max_tokens
    }
    r = requests.post(url, headers=headers, json=body, timeout=60)
    if r.status_code != 200:
        raise RuntimeError(f"Groq chat HTTP {r.status_code}: {r.text[:200]}")
    data = r.json()
    return data["choices"][0]["message"]["content"].strip()

def llm_chat_openrouter(prompt: str, model: str = "anthropic/claude-3-haiku") -> str:
    if not OPENROUTER_API_KEY:
        raise RuntimeError("OPENROUTER_API_KEY not set")
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://github.com/lybra-bee",
        "X-Title": "AI Blog Generator",
    }
    body = {
        "model": model,
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 1400
    }
    r = requests.post(url, headers=headers, json=body, timeout=60)
    if r.status_code != 200:
        raise RuntimeError(f"OpenRouter chat HTTP {r.status_code}: {r.text[:200]}")
    data = r.json()
    return data["choices"][0]["message"]["content"].strip()

def generate_topic() -> str:
    prompt = (
        "–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –û–î–ù–£ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ–º—É —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º –ø—Ä–æ —Å–∞–º—ã–µ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã "
        "–≤ –ò–ò –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö (2025). –ö–æ—Ä–æ—Ç–∫–∏–π, —Ç–µ—Ö–Ω–∏—á–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–¥–æ 80 —Å–∏–º–≤–æ–ª–æ–≤), "
        "–±–µ–∑ –∫–∞–≤—ã—á–µ–∫."
    )
    # Groq ‚Üí OpenRouter ‚Üí —Å–ø–∏—Å–æ–∫ fallback
    try:
        topic = llm_chat_groq(prompt)
        topic = topic.splitlines()[0].strip().strip('"').strip()
        if topic:
            return topic
    except Exception as e:
        print(f"‚ö†Ô∏è –¢–µ–º–∞ —á–µ—Ä–µ–∑ Groq –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞: {e}")
    try:
        topic = llm_chat_openrouter(prompt)
        topic = topic.splitlines()[0].strip().strip('"').strip()
        if topic:
            return topic
    except Exception as e:
        print(f"‚ö†Ô∏è –¢–µ–º–∞ —á–µ—Ä–µ–∑ OpenRouter –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞: {e}")

    fallback = [
        "–ú—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ –º–æ–¥–µ–ª–∏: –æ—Ç –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è –∫ –¥–µ–π—Å—Ç–≤–∏—è–º",
        "AI-–∞–≥–µ–Ω—Ç—ã –≤ –ø—Ä–æ–¥–µ: –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å",
        "–≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –Ω–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –≤ edge-AI",
        "–ü—Ä–∞–∫—Ç–∏–∫–∞ RAG 2.0 –¥–ª—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö",
        "–°–∂–∞—Ç–∏–µ LLM: –∫–≤–∞–Ω—Ç–æ–≤–∞–Ω–∏–µ –∏ –¥–∏—Å—Ç–∏–ª–ª—è—Ü–∏—è –≤ 2025",
    ]
    return random.choice(fallback)

def generate_article(topic: str) -> Tuple[str, str]:
    prompt = (
        f"–ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—É—é —Ç–µ—Ö—Å—Ç–∞—Ç—å—é (400‚Äì700 —Å–ª–æ–≤) –Ω–∞ —Ç–µ–º—É: {topic}.\n"
        "–§–æ—Ä–º–∞—Ç: Markdown, –∑–∞–≥–æ–ª–æ–≤–∫–∏ ##, —Å–ø–∏—Å–∫–∏, **–∂–∏—Ä–Ω—ã–π** –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤.\n"
        "–Ø–∑—ã–∫: —Ä—É—Å—Å–∫–∏–π, –∞—É–¥–∏—Ç–æ—Ä–∏—è: —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏.\n"
        "–û—Å–≤–µ—Ç–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –ø—Ä–∞–∫—Ç–∏–∫—É –≤–Ω–µ–¥—Ä–µ–Ω–∏—è, —Ä–∏—Å–∫–∏ –∏ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞.\n"
        "–§–æ–∫—É—Å: 2025, —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã, –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã."
    )
    # Groq ‚Üí OpenRouter ‚Üí fallback
    try:
        content = llm_chat_groq(prompt, model="llama-3.1-70b-versatile", max_tokens=1600)
        if len(content) > 300:
            return content, "Groq-llama-3.1-70b-versatile"
    except Exception as e:
        print(f"‚ö†Ô∏è –°—Ç–∞—Ç—å—è —á–µ—Ä–µ–∑ Groq –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞: {e}")

    try:
        content = llm_chat_openrouter(prompt, model="anthropic/claude-3-haiku")
        if len(content) > 300:
            return content, "OpenRouter-claude-3-haiku"
    except Exception as e:
        print(f"‚ö†Ô∏è –°—Ç–∞—Ç—å—è —á–µ—Ä–µ–∑ OpenRouter –Ω–µ –ø–æ–ª—É—á–µ–Ω–∞: {e}")

    fallback = (
        f"# {topic}\n\n"
        "## –í–≤–µ–¥–µ–Ω–∏–µ\n"
        "–ö–ª—é—á–µ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã 2025 –≥–æ–¥–∞ –≤ –ò–ò –º–µ–Ω—è—é—Ç –ø–æ–¥—Ö–æ–¥ –∫ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º.\n\n"
        "## –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞\n"
        "- **–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã**, **–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å**, **RAG**, **–∏–Ω—Ñ–µ—Ä–µ–Ω—Å –Ω–∞ edge**.\n"
        "- –ö–æ–Ω—Ç—Ä–æ–ª—å –∫–∞—á–µ—Å—Ç–≤–∞: offline-–º–µ—Ç—Ä–∏–∫–∏ –∏ online-—ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã.\n\n"
        "## –ü—Ä–∞–∫—Ç–∏–∫–∞\n"
        "- –î–µ–ø–ª–æ–π —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ —Å–µ—Ä–≤–µ—Ä–ª–µ—Å—Å.\n"
        "- –ù–∞–±–ª—é–¥–∞–µ–º–æ—Å—Ç—å: —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤, –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å, —Å—Ç–æ–∏–º–æ—Å—Ç—å.\n\n"
        "## –†–∏—Å–∫–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n"
        "- Prompt-–∏–Ω—ä–µ–∫—Ü–∏–∏, —É—Ç–µ—á–∫–∏, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –ø–æ–ª–∏—Ç–∏–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.\n\n"
        "## –í—ã–≤–æ–¥—ã\n"
        "–ö–æ–º–±–∏–Ω–∞—Ü–∏—è –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç–∏ –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω–æ–≥–æ –∏–Ω—Ñ–µ—Ä–µ–Ω—Å–∞ –¥–∞—ë—Ç –±–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç—å —É–∂–µ —Å–µ–≥–æ–¥–Ω—è."
    )
    return fallback, "fallback-generator"

# ==========
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
# ==========
def craft_image_prompt(topic: str) -> str:
    """–ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∞–Ω–≥–ª. –ø—Ä–æ–º–ø—Ç —á–µ—Ä–µ–∑ Groq/OpenRouter; –µ—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è ‚Äî –±–∞–∑–æ–≤—ã–π."""
    ask = (
        f"Write a concise (max 2 sentences) English prompt for a futuristic, professional, "
        f"text-free tech illustration matching the article topic: '{topic}'. "
        "Blue/purple palette, abstract AI, neural nets, data flows."
    )
    try:
        return llm_chat_groq(ask, model="llama-3.1-8b-instant", max_tokens=80)
    except Exception:
        pass
    try:
        return llm_chat_openrouter(ask, model="mistralai/mistral-7b-instruct")
    except Exception:
        pass
    return f"Futuristic abstract AI illustration for '{topic}', no text, blue/purple palette, neural networks and data."

def save_image_bytes(topic: str, img_bytes: bytes) -> str:
    slug = generate_slug(topic)
    filename = f"{slug}.jpg"
    full_path = os.path.join(IMAGES_DIR, filename)
    write_file(full_path, img_bytes, binary=True)
    print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {full_path}")
    # –ø—É–±–ª–∏—á–Ω—ã–π URL –≤ Hugo (static/** –ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –∫–∞–∫ /)
    return f"/images/posts/{filename}"

def generate_image_with_groq(prompt: str, topic: str) -> Optional[str]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π endpoint images/generations.
    –ï—Å–ª–∏ —É —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Groq –Ω–µ—Ç image API ‚Äî —ç—Ç–æ—Ç —à–∞–≥ –ø—Ä–æ—Å—Ç–æ —É–ø–∞–¥—ë—Ç –∏ –º—ã –ø–µ—Ä–µ–π–¥—ë–º –∫ Stability.
    """
    if not GROQ_API_KEY:
        return None
    url = "https://api.groq.com/openai/v1/images/generations"
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}", "Content-Type": "application/json"}
    body = {"prompt": prompt, "n": 1, "size": "1024x512", "response_format": "b64_json"}
    r = requests.post(url, headers=headers, json=body, timeout=90)
    if r.status_code != 200:
        raise RuntimeError(f"Groq images HTTP {r.status_code}: {r.text[:200]}")
    data = r.json()
    b64 = data["data"][0].get("b64_json")
    if not b64:
        raise RuntimeError("Groq images: empty b64_json")
    img = base64.b64decode(b64)
    return save_image_bytes(topic, img)

def generate_image_with_stability(prompt: str, topic: str) -> Optional[str]:
    if not STABILITYAI_KEY:
        return None
    url = "https://api.stability.ai/v1/generation/stable-diffusion-xl-1024-v1-0/text-to-image"
    headers = {"Authorization": f"Bearer {STABILITYAI_KEY}", "Content-Type": "application/json", "Accept": "application/json"}
    body = {
        "text_prompts": [{"text": prompt, "weight": 1.0}],
        "cfg_scale": 7,
        "height": 512,
        "width": 1024,
        "samples": 1,
        "steps": 30,
        "style_preset": "digital-art"
    }
    r = requests.post(url, headers=headers, json=body, timeout=120)
    if r.status_code != 200:
        raise RuntimeError(f"Stability HTTP {r.status_code}: {r.text[:200]}")
    data = r.json()
    if not data.get("artifacts"):
        raise RuntimeError("Stability: no artifacts")
    img = base64.b64decode(data["artifacts"][0]["base64"])
    return save_image_bytes(topic, img)

def generate_article_image(topic: str) -> Optional[str]:
    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è‚Ä¶")
    prompt = craft_image_prompt(topic)
    # Groq ‚Üí Stability ‚Üí None
    try:
        path = generate_image_with_groq(prompt, topic)
        if path: return path
    except Exception as e:
        print(f"‚ö†Ô∏è Groq image fail: {e}")
    try:
        path = generate_image_with_stability(prompt, topic)
        if path: return path
    except Exception as e:
        print(f"‚ö†Ô∏è Stability image fail: {e}")
    print("‚ÑπÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ ‚Äî –ø—É–±–ª–∏–∫—É–µ–º —Å—Ç–∞—Ç—å—é –±–µ–∑ –Ω–µ–≥–æ.")
    return None

# ==========
# Hugo –ø–æ—Å—Ç
# ==========
def build_frontmatter(topic: str, content_md: str, model_used: str, image_url: Optional[str]) -> str:
    now = datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")
    tags = ["ai", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "2025", "–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π-–∏–∏", "–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ—Å—Ç—å"]
    fm = {
        "title": topic,
        "date": now,
        "draft": False,
        "description": f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –ø—Ä–æ: {topic}",
        "tags": tags,
        "categories": ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
    }
    if image_url:
        fm["image"] = image_url
    front = "---\n" + "\n".join(
        [f'title: "{fm["title"]}"',
         f"date: {fm['date']}",
         f"draft: {str(fm['draft']).lower()}",
         f'description: "{fm["description"]}"',
         *( [f'image: "{fm["image"]}"'] if "image" in fm else [] ),
         f"tags: {json.dumps(fm['tags'], ensure_ascii=False)}",
         'categories: ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]'
        ]) + "\n---\n\n"
    # –í—Å—Ç–∞–≤–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–ª–æ
    body = f"# {topic}\n\n" + (f"![]({image_url})\n\n" if image_url else "") + content_md + "\n\n---\n" \
           f"**–ú–æ–¥–µ–ª—å:** {model_used}  \n" \
           f"**–î–∞—Ç–∞:** {now}  \n" \
           f"*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ GitHub Actions*"
    return front + body

def write_post(topic: str, content_md: str, model_used: str, image_url: Optional[str]) -> str:
    date = datetime.now().strftime("%Y-%m-%d")
    slug = generate_slug(topic)
    path = f"{POSTS_DIR}/{date}-{slug}.md"
    fm = build_frontmatter(topic, content_md, model_used, image_url)
    write_file(path, fm.encode("utf-8"), binary=True)
    print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {path}")
    return path

# ==========
# Main
# ==========
def main():
    print("=" * 60)
    print("ü§ñ AI CONTENT GENERATOR (Groq/OpenRouter + Groq/Stability Images)")
    print("=" * 60)
    ensure_dirs()
    clean_old_articles()

    print(f"üîë OPENROUTER_API_KEY: {'‚úÖ' if OPENROUTER_API_KEY else '‚ùå'}")
    print(f"üîë GROQ_API_KEY: {'‚úÖ' if GROQ_API_KEY else '‚ùå'}")
    print(f"üîë STABILITYAI_KEY: {'‚úÖ' if STABILITYAI_KEY else '‚ùå'}")

    topic = generate_topic()
    print(f"üìù –¢–µ–º–∞: {topic}")

    image_url = generate_article_image(topic)
    content_md, model_used = generate_article(topic)
    write_post(topic, content_md, model_used, image_url)

    print("üéâ –ì–æ—Ç–æ–≤–æ.")

if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        # –ù–µ –≤–∞–ª–∏–º job: –ø—É—Å–∫–∞–π Workflow –ø—Ä–æ–¥–æ–ª–∂–∏—Ç —Å–±–æ—Ä–∫—É/–¥–µ–ø–ª–æ–π —É–∂–µ –∏–º–µ—é—â–µ–≥–æ—Å—è
        # (–Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —à–∞–≥–∏ –≤ workflow –ø–æ–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ)
        exit(0)
