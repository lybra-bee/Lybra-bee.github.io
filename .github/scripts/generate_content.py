#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime
import glob
import base64
from PIL import Image
import io

def generate_content():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è - —Å–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π –æ—Å—Ç–∞–≤–ª—è—Ç—å
    KEEP_LAST_ARTICLES = 3
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ—á–∏—Å—Ç–∏–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç—å–∏
    clean_old_articles(KEEP_LAST_ARTICLES)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤ AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π
    selected_topic = generate_ai_trend_topic()
    print(f"üìù –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞: {selected_topic}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—å–∏
    image_filename = generate_article_image(selected_topic)
    image_markdown = f"![{selected_topic}]({image_filename})" if image_filename else ""
    
    # –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ OpenRouter
    api_key = os.getenv('OPENROUTER_API_KEY')
    content = ""
    model_used = "–õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    api_success = False
    
    if api_key and api_key != "":
        # –ü–†–û–í–ï–†–ï–ù–ù–´–ï –†–ê–ë–û–ß–ò–ï –ú–û–î–ï–õ–ò (–≤ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ)
        working_models = [
            "mistralai/mistral-7b-instruct",      # ‚úÖ –ü–†–û–í–ï–†–ï–ù–ê - –†–ê–ë–û–¢–ê–ï–¢
            "google/gemini-pro",                  # ‚úÖ –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            "anthropic/claude-3-haiku",           # ‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å
            "meta-llama/llama-3-8b-instruct",     # ‚úÖ –ü–æ–ø—É–ª—è—Ä–Ω–∞—è –º–æ–¥–µ–ª—å
            "huggingfaceh4/zephyr-7b-beta",       # ‚úÖ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è
        ]
        
        # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª–∏ –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º —Ä–∞–±–æ—á—É—é
        for selected_model in working_models:
            try:
                print(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–æ–¥–µ–ª—å: {selected_model}")
                
                response = requests.post(
                    "https://openrouter.ai/api/v1/chat/completions",
                    headers={
                        "Content-Type": "application/json",
                        "Authorization": f"Bearer {api_key}",
                        "HTTP-Referer": "https://github.com",
                        "X-Title": "AI Blog Generator"
                    },
                    json={
                        "model": selected_model,
                        "messages": [
                            {
                                "role": "user",
                                "content": f"–ù–∞–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: {selected_topic}. –ò—Å–ø–æ–ª—å–∑—É–π Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ ##, **–∂–∏—Ä–Ω—ã–º —à—Ä–∏—Ñ—Ç–æ–º** –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏. –û—Ç–≤–µ—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ–±—ä–µ–º 300-400 —Å–ª–æ–≤. –°–¥–µ–ª–∞–π —Å—Ç–∞—Ç—å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–π, —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤. –û—Å–≤–µ—â–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã 2024-2025 –≥–æ–¥–∞."
                            }
                        ],
                        "max_tokens": 600,
                        "temperature": 0.7,
                        "top_p": 0.9
                    },
                    timeout=15
                )
                
                print(f"üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
                
                if response.status_code == 200:
                    data = response.json()
                    if 'choices' in data and len(data['choices']) > 0:
                        content = data['choices'][0]['message']['content']
                        model_used = selected_model
                        api_success = True
                        print(f"‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ {selected_model}")
                        
                        # –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –æ—Ç –ª–∏—à–Ω–∏—Ö –∫–∞–≤—ã—á–µ–∫
                        content = content.replace('"""', '').replace("'''", "").strip()
                        break  # –í—ã—Ö–æ–¥–∏–º –∏–∑ —Ü–∏–∫–ª–∞ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                    else:
                        print(f"‚ö†Ô∏è –ù–µ—Ç choices –≤ –æ—Ç–≤–µ—Ç–µ –æ—Ç {selected_model}")
                else:
                    error_msg = response.text[:100] if response.text else "No error message"
                    print(f"‚ùå –û—à–∏–±–∫–∞ {response.status_code} –æ—Ç {selected_model}: {error_msg}")
                    
            except Exception as e:
                print(f"‚ö†Ô∏è –ò—Å–∫–ª—é—á–µ–Ω–∏–µ —Å {selected_model}: {e}")
                continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –º–æ–¥–µ–ª—å
        
        if not api_success:
            print("‚ùå –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            content = generate_fallback_content(selected_topic)
    else:
        print("‚ö†Ô∏è API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
        content = generate_fallback_content(selected_topic)
    
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç–∞—Ç—å—é
    date = datetime.now().strftime("%Y-%m-%d")
    slug = generate_slug(selected_topic)
    filename = f"content/posts/{date}-{slug}.md"
    
    frontmatter = generate_frontmatter(selected_topic, content, model_used, api_success, image_filename)
    
    os.makedirs("content/posts", exist_ok=True)
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(frontmatter)
    
    print(f"‚úÖ –§–∞–π–ª —Å–æ–∑–¥–∞–Ω: {filename}")
    
    # –ü–æ–∫–∞–∂–µ–º –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    with open(filename, 'r', encoding='utf-8') as f:
        preview = f.read(400)
    print(f"üìÑ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n{preview}...")
    
    return filename

def generate_article_image(topic):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ AI API"""
    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç–∞—Ç—å–∏...")
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ AI image generation API
    image_apis = [
        {"name": "Stable Diffusion", "url": "https://api-inference.huggingface.co/models/runwayml/stable-diffusion-v1-5"},
        {"name": "DALL-E", "url": "https://api.openai.com/v1/images/generations"},
    ]
    
    # –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_prompt = f"Technology illustration for article about {topic}. Modern, clean, professional style. Abstract technology concept with neural networks, data visualization, futuristic elements. Blue and purple color scheme. No text."
    
    for api in image_apis:
        try:
            if api["name"] == "Stable Diffusion":
                # –ü–æ–ø—Ä–æ–±—É–µ–º Hugging Face Stable Diffusion
                hf_token = os.getenv('HUGGINGFACE_TOKEN')
                if not hf_token:
                    continue
                    
                headers = {"Authorization": f"Bearer {hf_token}"}
                payload = {
                    "inputs": image_prompt,
                    "parameters": {
                        "width": 800,
                        "height": 400,
                        "num_inference_steps": 20,
                        "guidance_scale": 7.5
                    }
                }
                
                response = requests.post(api["url"], headers=headers, json=payload, timeout=30)
                
                if response.status_code == 200:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    image_data = response.content
                    return save_article_image(image_data, topic)
                    
            elif api["name"] == "DALL-E":
                # –ü–æ–ø—Ä–æ–±—É–µ–º DALL-E (–µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á)
                openai_key = os.getenv('OPENAI_API_KEY')
                if not openai_key:
                    continue
                    
                headers = {
                    "Authorization": f"Bearer {openai_key}",
                    "Content-Type": "application/json"
                }
                payload = {
                    "model": "dall-e-2",
                    "prompt": image_prompt,
                    "size": "800x400",
                    "n": 1
                }
                
                response = requests.post(api["url"], headers=headers, json=payload, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    if 'data' in data and len(data['data']) > 0:
                        image_url = data['data'][0]['url']
                        image_response = requests.get(image_url, timeout=30)
                        if image_response.status_code == 200:
                            return save_article_image(image_response.content, topic)
                            
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ {api['name']}: {e}")
            continue
    
    # Fallback - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ placeholder
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
    return create_fallback_image(topic)

def save_article_image(image_data, topic):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        os.makedirs("static/images/posts", exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        slug = generate_slug(topic)
        filename = f"images/posts/{slug}.jpg"
        full_path = f"static/{filename}"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with open(full_path, 'wb') as f:
            f.write(image_data)
        
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def create_fallback_image(topic):
    """–°–æ–∑–¥–∞–µ—Ç fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    try:
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ
        from PIL import Image, ImageDraw, ImageFont
        import numpy as np
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        os.makedirs("static/images/posts", exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        slug = generate_slug(topic)
        filename = f"images/posts/{slug}.jpg"
        full_path = f"static/{filename}"
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        width, height = 800, 400
        image = Image.new('RGB', (width, height), color=(25, 25, 50))
        draw = ImageDraw.Draw(image)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –≥—Ä–∞–¥–∏–µ–Ω—Ç
        for i in range(height):
            color = (25, 25, 50 + i//2)
            draw.line([(0, i), (width, i)], fill=color)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–æ-–∫—Ä—É–≥–∏
        for i in range(3):
            x = random.randint(100, width-100)
            y = random.randint(100, height-100)
            size = random.randint(50, 150)
            draw.ellipse([x-size, y-size, x+size, y+size], outline=(100, 100, 255), width=3)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        image.save(full_path, 'JPEG', quality=85)
        print(f"‚úÖ Fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: {filename}")
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None

def generate_ai_trend_topic():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤ AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π 2024-2025"""
    # ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
    # [–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ generate_ai_trend_topic]

def clean_old_articles(keep_last=3):
    """–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç–∞—Ç–µ–π, —É–¥–∞–ª—è–µ—Ç –æ—Å—Ç–∞–ª—å–Ω—ã–µ"""
    # ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    # [–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ clean_old_articles]

def generate_fallback_content(topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π —Ç–µ–º—ã"""
    # ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    # [–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ generate_fallback_content]

def generate_slug(topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã"""
    # ... (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
    # [–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ generate_slug]

def generate_frontmatter(topic, content, model_used, api_success, image_filename=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è frontmatter –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ"""
    current_time = datetime.now()
    status = "‚úÖ API –≥–µ–Ω–µ—Ä–∞—Ü–∏—è" if api_success else "‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–≥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–º—ã
    tags = ["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "2024-2025"]
    if "–≤–µ–±" in topic.lower() or "web" in topic.lower():
        tags.append("–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞")
    if "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" in topic.lower() or "security" in topic.lower():
        tags.append("–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å")
    if "–æ–±–ª–∞–∫–æ" in topic.lower() or "cloud" in topic.lower():
        tags.append("–æ–±–ª–∞—á–Ω—ã–µ-–≤—ã—á–∏—Å–ª–µ–Ω–∏—è")
    if "–¥–∞–Ω–Ω" in topic.lower() or "data" in topic.lower():
        tags.append("–∞–Ω–∞–ª–∏–∑-–¥–∞–Ω–Ω—ã—Ö")
    
    image_section = f"image: /{image_filename}\n" if image_filename else ""
    
    return f"""---
title: "{topic}"
date: {datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")}
draft: false
description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ {topic}"
{image_section}tags: {json.dumps(tags, ensure_ascii=False)}
categories: ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
---

# {topic}

{f'![]({image_filename})' if image_filename else ''}

{content}

---

### üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

- **–ú–æ–¥–µ–ª—å AI:** {model_used}
- **–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {current_time.strftime("%d.%m.%Y %H:%M UTC")}
- **–¢–µ–º–∞:** {topic}
- **–°—Ç–∞—Ç—É—Å:** {status}
- **–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å:** –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
- **–ê–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å:** –¢—Ä–µ–Ω–¥—ã 2024-2025

> *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ GitHub Actions + OpenRouter*
"""

if __name__ == "__main__":
    generate_content()
