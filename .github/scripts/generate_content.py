import os
import requests
import base64
import time
import logging
from datetime import datetime
from pathlib import Path
import random
import string
from PIL import Image, ImageDraw, ImageFont

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger(__name__)


# ==========================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ==========================

def slugify(value: str) -> str:
    """–£–±–∏—Ä–∞–µ–º —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
    return "".join(c if c.isalnum() else "-" for c in value).strip("-").lower()


def save_image_bytes(image_bytes, title):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –±–∞–π—Ç–æ–≤"""
    images_dir = Path("assets/images/posts")
    images_dir.mkdir(parents=True, exist_ok=True)

    filename = f"{datetime.now().strftime('%Y-%m-%d')}-{slugify(title)}.png"
    filepath = images_dir / filename

    with open(filepath, "wb") as f:
        f.write(image_bytes)

    logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {filepath}")
    return str(filepath)


def save_article(title, content, image_path):
    """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é –≤ content/posts"""
    posts_dir = Path("content/posts")
    posts_dir.mkdir(parents=True, exist_ok=True)

    filename = f"{datetime.now().strftime('%Y-%m-%d')}-{slugify(title)}.md"
    filepath = posts_dir / filename

    front_matter = f"""---
title: "{title}"
date: {datetime.now().strftime('%Y-%m-%d')}
image: /{image_path}
draft: false
---

"""

    with open(filepath, "w", encoding="utf-8") as f:
        f.write(front_matter + content)

    logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filepath}")


# ==========================
# PLACEHOLDER IMAGE
# ==========================

def generate_enhanced_placeholder(title):
    """–°–æ–∑–¥–∞–Ω–∏–µ placeholder-–∫–∞—Ä—Ç–∏–Ω–∫–∏"""
    images_dir = Path("assets/images/posts")
    images_dir.mkdir(parents=True, exist_ok=True)

    filename = f"{datetime.now().strftime('%Y-%m-%d')}-{slugify(title)}.png"
    filepath = images_dir / filename

    img = Image.new("RGB", (800, 400), color=(200, 200, 200))
    draw = ImageDraw.Draw(img)

    text = "No Image Available"
    font = ImageFont.load_default()
    text_w, text_h = draw.textsize(text, font=font)
    draw.text(((800 - text_w) / 2, (400 - text_h) / 2), text, fill=(50, 50, 50), font=font)

    img.save(filepath)
    logger.info(f"üé® –°–æ–∑–¥–∞–Ω placeholder: {filepath}")
    return str(filepath)


# ==========================
# FUSIONBRAIN API
# ==========================

class FusionBrainAPI:
    def __init__(self, api_key, secret_key):
        self.api_key = api_key
        self.secret_key = secret_key
        self.url = "https://api.fusionbrain.ai"

    def generate(self, prompt, width=512, height=512):
        headers = {
            "X-Key": f"Key {self.api_key}",
            "X-Secret": f"Secret {self.secret_key}",
        }
        data = {
            "type": "GENERATE",
            "width": width,
            "height": height,
            "num_images": 1,
            "prompt": prompt,
        }
        r = requests.post(f"{self.url}/key/api/v1/text2image/run", headers=headers, json=data)
        if r.status_code == 201:
            task_id = r.json()["uuid"]
            return task_id
        else:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FusionBrain: {r.status_code} - {r.text}")
            return None

    def check_status(self, task_id, attempts=40, delay=3):
        headers = {
            "X-Key": f"Key {self.api_key}",
            "X-Secret": f"Secret {self.secret_key}",
        }
        for i in range(attempts):
            r = requests.get(f"{self.url}/key/api/v1/text2image/status/{task_id}", headers=headers)
            if r.status_code == 200:
                status = r.json().get("status")
                if status == "DONE":
                    return r.json()["images"][0]
                elif status == "FAIL":
                    logger.warning("‚ö†Ô∏è FusionBrain: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å")
                    return None
                else:
                    time.sleep(delay)
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ FusionBrain: {r.status_code} - {r.text}")
                return None
        return None

    def generate_and_wait(self, prompt, width=512, height=512, attempts=40, delay=3):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
        task_id = self.generate(prompt, width, height)
        if not task_id:
            return None
        logger.info(f"‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FusionBrain, task_id: {task_id}")
        return self.check_status(task_id, attempts=attempts, delay=delay)


def try_fusionbrain_api(title):
    """FusionBrain API —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    api_key = os.getenv("FUSIONBRAIN_API_KEY")
    secret_key = os.getenv("FUSION_SECRET_KEY")

    if not api_key or not secret_key:
        logger.warning("‚ö†Ô∏è FusionBrain –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None

    try:
        fb_api = FusionBrainAPI(api_key, secret_key)
        english_prompt = f"{title}, digital art, futuristic technology, AI, 2025, professional, high quality"
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ FusionBrain: {english_prompt}")

        image_base64 = fb_api.generate_and_wait(english_prompt)
        if image_base64:
            image_data = base64.b64decode(image_base64)
            return save_image_bytes(image_data, title)
        else:
            logger.warning("‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FusionBrain –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ FusionBrain: {e}")
    return None


# ==========================
# CRAIYON API
# ==========================

def try_craiyon_api(title):
    try:
        english_prompt = f"{title}, digital art, futuristic technology, AI, 2025, professional"
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Craiyon: {english_prompt}")
        r = requests.post("https://backend.craiyon.com/generate", json={"prompt": english_prompt})
        if r.status_code == 200:
            image_base64 = r.json()["images"][0]
            image_data = base64.b64decode(image_base64)
            return save_image_bytes(image_data, title)
        else:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Craiyon API: {r.status_code}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Craiyon: {e}")
    return None


# ==========================
# LEXICA API
# ==========================

def try_lexica_art_api(title):
    try:
        logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: try_lexica_art_api")
        query = f"{title}, futuristic digital art, AI, professional"
        r = requests.get(f"https://lexica.art/api/v1/search?q={query}")
        if r.status_code == 200:
            data = r.json()
            if "images" in data and len(data["images"]) > 0:
                img_url = data["images"][0]["src"]
                img_data = requests.get(img_url).content
                return save_image_bytes(img_data, title)
        else:
            logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ Lexica API: {r.status_code}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Lexica: {e}")
    return None


# ==========================
# –û–°–ù–û–í–ù–û–ô PIPELINE
# ==========================

def generate_content(title, content):
    logger.info(f"üìå –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
    logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è: {title}")

    image_path = None
    for method in [try_fusionbrain_api, try_craiyon_api, try_lexica_art_api]:
        image_path = method(title)
        if image_path:
            break

    if not image_path:
        logger.info("üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: generate_enhanced_placeholder")
        image_path = generate_enhanced_placeholder(title)

    save_article(title, content, image_path)


# ==========================
# –ó–ê–ü–£–°–ö
# ==========================

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —Å–≤–æ—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏
    test_title = "–≠—Ç–∏—á–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏ —Ñ–∏–Ω—Ç–µ—Ö –≤ 2025 –≥–æ–¥—É"
    test_content = "–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å—Ç–∞—Ç—å–∏..."
    generate_content(test_title, test_content)
