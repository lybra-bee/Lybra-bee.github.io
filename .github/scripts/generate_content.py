#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime, timezone
import shutil
import re
import textwrap
from PIL import Image, ImageDraw, ImageFont
import time
import logging
import argparse
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class FusionBrainAPI:
    def __init__(self, api_key, secret_key):
        self.URL = 'https://api-key.fusionbrain.ai/'
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }
    
    def get_model(self):
        """–ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—É—é –º–æ–¥–µ–ª—å —á–µ—Ä–µ–∑ pipelines endpoint"""
        try:
            response = requests.get(
                self.URL + 'key/api/v1/pipelines',
                headers=self.AUTH_HEADERS,
                timeout=10
            )
            if response.status_code == 200:
                pipelines = response.json()
                if pipelines:
                    # –ò—â–µ–º Kandinsky pipeline
                    for pipeline in pipelines:
                        if "kandinsky" in pipeline.get("name", "").lower():
                            return pipeline['id']
                    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ Kandinsky, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
                    return pipelines[0]['id']
            return None
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π FusionBrain: {e}")
            return None
    
    def generate(self, prompt, width=512, height=512):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º pipeline ID
            pipeline_id = self.get_model()
            if not pipeline_id:
                logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å pipeline ID")
                return None
            
            params = {
                "type": "GENERATE",
                "numImages": 1,
                "width": width,
                "height": height,
                "generateParams": {
                    "query": prompt
                }
            }
            
            # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö —Å–æ–≥–ª–∞—Å–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            files = {
                'params': (None, json.dumps(params), 'application/json'),
                'pipeline_id': (None, pipeline_id)
            }
            
            response = requests.post(
                self.URL + 'key/api/v1/pipeline/run',
                headers=self.AUTH_HEADERS,
                files=files,
                timeout=30
            )
            
            # –ö–æ–¥ 201 - —ç—Ç–æ –£–°–ü–ï–®–ù–´–ô –æ—Ç–≤–µ—Ç!
            if response.status_code in [200, 201]:
                data = response.json()
                # –°—Ç–∞—Ç—É—Å INITIAL —Å UUID - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏
                if data.get('uuid'):
                    logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ FusionBrain —Å–æ–∑–¥–∞–Ω–∞: {data['uuid']}")
                    return data['uuid']
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç FusionBrain: {data}")
                    return None
            else:
                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FusionBrain: {response.status_code} - {response.text}")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ FusionBrain: {e}")
            return None
    
    def check_status(self, task_id, attempts=30, delay=6):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏"""
        try:
            for attempt in range(attempts):
                if attempt > 0:  # –ù–µ —Å–ø–∞—Ç—å –ø–µ—Ä–µ–¥ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                    time.sleep(delay)
                    
                logger.info(f"‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ FusionBrain (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{attempts})")
                
                response = requests.get(
                    self.URL + f'key/api/v1/pipeline/status/{task_id}',
                    headers=self.AUTH_HEADERS,
                    timeout=10
                )
                
                if response.status_code == 200:
                    data = response.json()
                    status = data.get('status')
                    
                    if status == 'DONE':
                        result = data.get('result', {})
                        images = result.get('files', [])
                        if images:
                            logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FusionBrain –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                            return images[0]
                        else:
                            logger.warning("‚ö†Ô∏è –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –æ—Ç–≤–µ—Ç–µ")
                            return None
                    elif status == 'FAIL':
                        error_msg = data.get('errorDescription', 'Unknown error')
                        logger.warning(f"‚ö†Ô∏è –ì–µ–Ω–µ—Ä–∞—Ü–∏—è FusionBrain –Ω–µ —É–¥–∞–ª–∞—Å—å: {error_msg}")
                        return None
                    elif status in ['INITIAL', 'PROCESSING']:
                        if attempt % 5 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 5 –ø–æ–ø—ã—Ç–æ–∫
                            logger.info(f"‚è≥ –°—Ç–∞—Ç—É—Å FusionBrain: {status}")
                        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∂–¥–∞—Ç—å
                        continue
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å FusionBrain: {status}")
                        return None
                else:
                    logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ FusionBrain: {response.status_code}")
            
            logger.warning("‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ FusionBrain: {e}")
            return None

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–∞ –¥–ª—è —Å—Ç–∞—Ç—å–∏ ========
def generate_article_prompt():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è —Å—Ç–∞—Ç—å–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–µ–Ω–¥–æ–≤"""
    trends = [
        "AI", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏", "–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π AI", 
        "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ", "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"
    ]
    
    domains = [
        "–≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–º–æ–±–∏–ª—å–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", "–æ–±–ª–∞—á–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
        "–∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö", "–∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "–º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"
    ]
    
    trend = random.choice(trends)
    domain = random.choice(domains)
    
    prompt = f"""–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É "{trend} –≤ {domain}" –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –§–æ—Ä–º–∞—Ç: Markdown
- –û–±—ä–µ–º: 300-500 —Å–ª–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
- –°—Ç–∏–ª—å: —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π
- –§–æ–∫—É—Å: –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏ —Ç—Ä–µ–Ω–¥—ã 2024-2025 –≥–æ–¥–æ–≤"""
    
    return prompt, f"{trend} –≤ {domain}"

# ======== –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π ========
def clean_old_articles(keep_last=3):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π"""
    logger.info(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º {keep_last} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö...")
    
    content_dir = "content"
    posts_dir = os.path.join(content_dir, "posts")
    
    if os.path.exists(posts_dir):
        posts = [f for f in os.listdir(posts_dir) if f.endswith('.md') and os.path.isfile(os.path.join(posts_dir, f))]
        posts.sort(reverse=True)
        
        for post in posts[keep_last:]:
            post_path = os.path.join(posts_dir, post)
            os.remove(post_path)
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç: {post}")

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ ========
def generate_content():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    check_environment_variables()
    
    clean_old_articles()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –∏ —Ç–µ–º—É
    prompt, topic = generate_article_prompt()
    logger.info(f"üìù –¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏: {topic}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
    content, model_used = generate_article_content(prompt)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    title = extract_title_from_content(content, topic)
    logger.info(f"üìå –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    image_filename = generate_article_image(title)
    
    date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    slug = generate_slug(title)
    filename = f"content/posts/{date}-{slug}.md"
    
    frontmatter = generate_frontmatter(title, content, model_used, image_filename)
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(frontmatter)
    
    logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filename}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–Ω
    if os.path.exists(filename):
        logger.info(f"‚úÖ –§–∞–π–ª —Å—Ç–∞—Ç—å–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.abspath(filename)}")
    else:
        logger.error(f"‚ùå –§–∞–π–ª —Å—Ç–∞—Ç—å–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω: {filename}")
    
    return filename

def extract_title_from_content(content, fallback_topic):
    """–ò–∑–≤–ª–µ–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    try:
        lines = content.split('\n')
        for line in lines:
            line = line.strip()
            if line.startswith('# ') and len(line) > 2:
                title = line.replace('# ', '').strip()
                if 5 <= len(title) <= 100:
                    return title
    except:
        pass
    
    return fallback_topic

def check_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    env_vars = {
        'GROQ_API_KEY': os.getenv('GROQ_API_KEY'),
        'FUSIONBRAIN_API_KEY': os.getenv('FUSIONBRAIN_API_KEY'),
        'FUSION_SECRET_KEY': os.getenv('FUSION_SECRET_KEY')
    }
    
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for var_name, var_value in env_vars.items():
        status = "‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if var_value else "‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
        logger.info(f"   {var_name}: {status}")

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Groq ========
def generate_article_content(prompt):
    groq_key = os.getenv('GROQ_API_KEY')
    
    if not groq_key:
        logger.warning("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞")
        fallback = generate_fallback_content(prompt)
        return fallback, "fallback-generator"

    models_to_try = [
        ("llama-3.1-8b-instant", lambda: generate_with_groq(groq_key, "llama-3.1-8b-instant", prompt)),
        ("llama-3.2-1b-preview", lambda: generate_with_groq(groq_key, "llama-3.2-1b-preview", prompt)),
        ("llama-3.1-70b-versatile", lambda: generate_with_groq(groq_key, "llama-3.1-70b-versatile", prompt))
    ]

    for model_name, generate_func in models_to_try:
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Ç–µ–∫—Å—Ç–∞: {model_name}")
            result = generate_func()
            if result and len(result.strip()) > 100:
                logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ {model_name}")
                return result, model_name
            else:
                logger.warning(f"‚ö†Ô∏è –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç {model_name}")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ {model_name}: {e}")
            continue

    logger.warning("‚ö†Ô∏è –í—Å–µ –º–æ–¥–µ–ª–∏ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
    fallback = generate_fallback_content(prompt)
    return fallback, "fallback-generator"

def generate_fallback_content(prompt):
    """Fallback –∫–æ–Ω—Ç–µ–Ω—Ç"""
    return f"""# {prompt.split('"')[1] if '"' in prompt else "AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"}

## –í–≤–µ–¥–µ–Ω–∏–µ
–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –±—ã—Å—Ç—Ä—ã–º–∏ —Ç–µ–º–ø–∞–º–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ—Ç—Ä–∞—Å–ª–µ–π.

## –û—Å–Ω–æ–≤–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
- –£–ª—É—á—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞
- –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
–ë—É–¥—É—â–µ–µ –≤—ã–≥–ª—è–¥–∏—Ç –º–Ω–æ–≥–æ–æ–±–µ—â–∞—é—â–µ —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π.

*–°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*"""

def generate_with_groq(api_key, model_name, prompt):
    resp = requests.post(
        "https://api.groq.com/openai/v1/chat/completions",
        headers={"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"},
        json={
            "model": model_name, 
            "messages":[{"role":"user","content":prompt}], 
            "max_tokens": 1500,
            "temperature": 0.7
        },
        timeout=30
    )
    
    if resp.status_code == 200:
        data = resp.json()
        return data['choices'][0]['message']['content'].strip()
    else:
        raise Exception(f"Groq API error {resp.status_code}: {resp.text}")

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ========
def generate_article_image(title):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è: {title}")
    
    methods = [try_fusionbrain_api, generate_enhanced_placeholder]
    
    for method in methods:
        try:
            logger.info(f"üîÑ –ü—Ä–æ–±—É–µ–º –º–µ—Ç–æ–¥: {method.__name__}")
            result = method(title)
            if result:
                logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ {method.__name__}")
                return result
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {method.__name__}: {e}")
            continue
    
    return generate_enhanced_placeholder(title)

def try_fusionbrain_api(title):
    """FusionBrain API"""
    api_key = os.getenv('FUSIONBRAIN_API_KEY')
    secret_key = os.getenv('FUSION_SECRET_KEY')
    
    if not api_key or not secret_key:
        logger.warning("‚ö†Ô∏è FusionBrain –∫–ª—é—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return None
    
    try:
        fb_api = FusionBrainAPI(api_key, secret_key)
        
        english_prompt = f"{title}, digital art, technology, futuristic, professional"
        logger.info(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ FusionBrain: {english_prompt}")
        
        task_id = fb_api.generate(english_prompt, width=512, height=512)
        
        if task_id:
            logger.info(f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, task_id: {task_id}")
            
            image_base64 = fb_api.check_status(task_id, attempts=20, delay=5)
            if image_base64:
                logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
                image_data = base64.b64decode(image_base64)
                return save_image_bytes(image_data, title)
        return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ FusionBrain: {e}")
        return None

def save_image_bytes(image_data, title):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    try:
        os.makedirs("assets/images/posts", exist_ok=True)
        filename = f"assets/images/posts/{generate_slug(title)}.png"
        
        with open(filename, "wb") as f:
            f.write(image_data)
        
        if os.path.exists(filename):
            logger.info(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
            return filename
        return None
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return None

def generate_enhanced_placeholder(title):
    """–°–æ–∑–¥–∞–Ω–∏–µ placeholder"""
    try:
        os.makedirs("assets/images/posts", exist_ok=True)
        filename = f"assets/images/posts/{generate_slug(title)}.png"
        
        img = Image.new('RGB', (800, 400), color='#1a365d')
        draw = ImageDraw.Draw(img)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
        try:
            font = ImageFont.load_default()
        except:
            font = None
        
        text = f"{title}\nAI Generated"
        draw.text((50, 150), text, fill="white", font=font)
        
        img.save(filename)
        logger.info(f"üé® –°–æ–∑–¥–∞–Ω placeholder: {filename}")
        return filename
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è placeholder: {e}")
        return None

# ======== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ========
def generate_slug(text):
    text = text.lower()
    text = re.sub(r'[^a-z0-9–∞-—è—ë\s]', '', text)
    text = text.replace(' ', '-')
    text = re.sub(r'-+', '-', text)
    return text[:50]

def generate_frontmatter(title, content, model_used, image_url):
    now = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
    
    frontmatter = f"""---
title: "{title.replace('"', "'")}"
date: {now}
draft: false
image: "{image_url}"
ai_model: "{model_used}"
tags: ["ai", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
categories: ["–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]
summary: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è"
---

{content}
"""
    return frontmatter

# ======== –ó–∞–ø—É—Å–∫ ========
def main():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä AI –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    parser.add_argument('--count', type=int, default=1, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π')
    args = parser.parse_args()
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    
    try:
        for i in range(args.count):
            print(f"\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ {i+1}/{args.count}...")
            filename = generate_content()
            
            if filename and os.path.exists(filename):
                print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filename}")
            else:
                print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∞—Ç—å–∏")
                
        print("\nüéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()
