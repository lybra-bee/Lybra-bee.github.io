#!/usr/bin/env python3
import os
import json
import requests
import logging
from pathlib import Path
from datetime import datetime

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

BASE_DIR = Path(__file__).parent.parent
CONTENT_DIR = BASE_DIR / "content/posts"
GALLERY_DIR = BASE_DIR / "static/images/gallery"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
if GALLERY_DIR.exists() and not GALLERY_DIR.is_dir():
    logging.warning(f"{GALLERY_DIR} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è. –£–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É.")
    GALLERY_DIR.unlink()
GALLERY_DIR.mkdir(parents=True, exist_ok=True)
CONTENT_DIR.mkdir(parents=True, exist_ok=True)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ —Ñ–æ–ª–±–µ–∫ API
def generate_article():
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ –ø—É–±–ª–∏—á–Ω—ã–π —Ñ–æ–ª–±–µ–∫ API")
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É–±–ª–∏—á–Ω—ã–π API –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞
        response = requests.get("https://api.quotable.io/random")
        data = response.json()
        content = f"{data.get('content', '–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—å–∏ –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö.')}"
        title = content.split('.')[0][:50]  # –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        return title, content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        title = "–ü—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—å–∏"
        content = "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—å–∏ –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö."
        return title, content

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
def save_article(title, content):
    filename = f"{title.replace(' ', '-').lower()[:50]}.md"
    filepath = CONTENT_DIR / filename
    md_content = f"""---
title: "{title}"
date: {datetime.now().isoformat()}
---

{content}
"""
    with open(filepath, "w", encoding="utf-8") as f:
        f.write(md_content)
    logging.info(f"üìÑ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath.name}")

# –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç—å–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
def cleanup_articles():
    files = sorted(CONTENT_DIR.glob("*.md"), key=lambda x: x.stat().st_mtime, reverse=True)
    for f in files[5:]:
        f.unlink()
        logging.info(f"üßπ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç–∞—Ç—å—è: {f.name}")

def main():
    title, content = generate_article()
    save_article(title, content)
    cleanup_articles()

if __name__ == "__main__":
    main()
