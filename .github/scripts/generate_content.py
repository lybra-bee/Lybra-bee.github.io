#!/usr/bin/env python3
import os
import json
import random
from datetime import datetime, timezone
import shutil
import re
import textwrap
from PIL import Image, ImageDraw, ImageFont
import logging
import base64
import requests
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ö–ª—é—á–∏ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ GitHub
OPENAI_KEY = os.getenv("OPENAI_API_KEY")
FAL_API_KEY = os.getenv("FAL_API_KEY")

if OPENAI_KEY:
    openai.api_key = OPENAI_KEY

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º—ã ========
def generate_ai_trend_topic():
    trends = [
        "Multimodal AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ",
        "AI –∞–≥–µ–Ω—Ç—ã –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "–ù–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
        "Generative AI —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –¥–∏–∑–∞–π–Ω–æ–≤",
        "Edge AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
        "AI –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "–≠—Ç–∏—á–Ω—ã–π AI –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
        "AI –≤ healthcare –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–µ–¥–∏—Ü–∏–Ω–∞",
        "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞"
    ]
    domains = [
        "–≤ –≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ cloud native –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö",
        "–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∏ IoT —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–µ",
        "–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∏–±–µ—Ä–∑–∞—â–∏—Ç–µ",
        "–≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ EdTech"
    ]
    trend = random.choice(trends)
    domain = random.choice(domains)
    return f"{trend} {domain} –≤ 2025 –≥–æ–¥—É"

# ======== –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π ========
def clean_old_articles(keep_last=3):
    posts_dir = "content/posts"
    if os.path.exists(posts_dir):
        posts = sorted([f for f in os.listdir(posts_dir) if f.endswith('.md')], reverse=True)
        for post in posts[keep_last:]:
            os.remove(os.path.join(posts_dir, post))
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç: {post}")
    else:
        os.makedirs(posts_dir, exist_ok=True)
        os.makedirs("content", exist_ok=True)
        with open("content/_index.md", "w", encoding="utf-8") as f:
            f.write("---\ntitle: \"–ì–ª–∞–≤–Ω–∞—è\"\n---")
        with open("content/posts/_index.md", "w", encoding="utf-8") as f:
            f.write("---\ntitle: \"–°—Ç–∞—Ç—å–∏\"\n---")
        logger.info("‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ content")

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ ========
def generate_article_content(topic):
    if not OPENAI_KEY:
        return generate_fallback_content(topic), "fallback-generator"
    prompt = f"–ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: '{topic}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –§–æ—Ä–º–∞—Ç Markdown, 400-600 —Å–ª–æ–≤."
    try:
        resp = openai.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7,
            max_tokens=2000
        )
        content = resp.choices[0].message.content.strip()
        return content, "OpenAI GPT-4"
    except Exception as e:
        logger.warning(f"‚ùå OpenAI GPT –æ—à–∏–±–∫–∞: {e}")
        return generate_fallback_content(topic), "fallback-generator"

def generate_fallback_content(topic):
    return f"# {topic}\n\n## –í–≤–µ–¥–µ–Ω–∏–µ\n–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è.\n\n## –û—Å–Ω–æ–≤–Ω–æ–µ\n–ö–æ–Ω—Ç–µ–Ω—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\n\n## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ\n–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ fallback."

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ========
def generate_article_image(topic):
    os.makedirs("assets/images/posts", exist_ok=True)
    filename = f"assets/images/posts/{generate_slug(topic)}.png"

    # 1. FAL API
    if FAL_API_KEY:
        try:
            logger.info("üé® –ü—Ä–æ–±—É–µ–º FAL API...")
            url = "https://api.openfml.com/v1/generate-image"
            headers = {"Authorization": f"Bearer {FAL_API_KEY}"}
            resp = requests.post(url, json={"prompt": topic, "size": "1024x1024"}, headers=headers, timeout=60)
            data = resp.json()
            if resp.status_code == 200 and "image" in data:
                img_bytes = base64.b64decode(data["image"])
                with open(filename, "wb") as f:
                    f.write(img_bytes)
                logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ FAL API: {filename}")
                return filename
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è FAL API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    # 2. Craiyon (–±–µ–∑ –∫–ª—é—á–∞)
    try:
        logger.info("üé® –ü—Ä–æ–±—É–µ–º Craiyon...")
        resp = requests.post("https://api.craiyon.com/v3", json={"prompt": topic}, timeout=60)
        if resp.status_code == 200 and "images" in resp.json():
            img_url = resp.json()["images"][0]
            img_data = requests.get(img_url, timeout=30).content
            with open(filename, "wb") as f:
                f.write(img_data)
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ Craiyon: {filename}")
            return filename
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è Craiyon –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    # 3. OpenAI DALL¬∑E
    if OPENAI_KEY:
        try:
            logger.info("üé® –ü—Ä–æ–±—É–µ–º DALL¬∑E...")
            resp = openai.images.generate(model="gpt-image-1", prompt=topic, size="1024x1024")
            img_bytes = base64.b64decode(resp.data[0].b64_json)
            with open(filename, "wb") as f:
                f.write(img_bytes)
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ —á–µ—Ä–µ–∑ DALL¬∑E: {filename}")
            return filename
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è DALL¬∑E –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    # 4. –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä
    return generate_placeholder(topic, filename)

def generate_placeholder(topic, filename):
    width, height = 800, 400
    img = Image.new("RGB", (width, height), "#0f172a")
    draw = ImageDraw.Draw(img)
    wrapped = textwrap.fill(topic, width=35)
    try:
        font = ImageFont.truetype("Arial.ttf", 22)
    except:
        font = ImageFont.load_default()
    bbox = draw.textbbox((0, 0), wrapped, font=font)
    x = (width - (bbox[2]-bbox[0]))/2
    y = (height - (bbox[3]-bbox[1]))/2
    draw.text((x+3, y+3), wrapped, font=font, fill="#000000")
    draw.text((x, y), wrapped, font=font, fill="#ffffff")
    img.save(filename)
    logger.info(f"üíæ Placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
    return filename

# ======== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ========
def generate_slug(text):
    slug = re.sub(r"[^\w\s-]", "", text).strip().lower()
    slug = re.sub(r"[\s_-]+", "-", slug)
    return slug

def generate_frontmatter(title, content, model_used, image_filename):
    return f"""---
title: "{title}"
date: {datetime.now(timezone.utc).strftime('%Y-%m-%d')}
image: "{image_filename}"
model: "{model_used}"
---
{content}
"""

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ ========
def generate_content():
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    clean_old_articles()
    topic = generate_ai_trend_topic()
    logger.info(f"üìù –¢–µ–º–∞: {topic}")
    image_filename = generate_article_image(topic)
    content, model_used = generate_article_content(topic)
    slug = generate_slug(topic)
    os.makedirs("content/posts", exist_ok=True)
    filename = f"content/posts/{datetime.now(timezone.utc).strftime('%Y-%m-%d')}-{slug}.md"
    frontmatter = generate_frontmatter(topic, content, model_used, image_filename)
    with open(filename, "w", encoding="utf-8") as f:
        f.write(frontmatter)
    logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filename}")
    return filename

if __name__ == "__main__":
    generate_content()
