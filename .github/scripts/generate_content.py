#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime, timezone
import glob
import base64
import time

# ---------- –¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏ ----------
def generate_ai_trend_topic():
    trends = [
        "Multimodal AI - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ",
        "AI –∞–≥–µ–Ω—Ç—ã - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "Generative AI - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∫–æ–¥–∞",
        "Edge AI - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
        "AI –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "AI –≤ healthcare",
        "AI –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"
    ]
    domains = [
        "–≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        "–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö",
        "–≤ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö",
        "–≤ –±–∏–∑–Ω–µ—Å-–∞–Ω–∞–ª–∏—Ç–∏–∫–µ",
        "–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ",
        "–≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"
    ]
    trend = random.choice(trends)
    domain = random.choice(domains)
    return f"{trend} {domain} –≤ 2025 –≥–æ–¥—É"

# ---------- –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π ----------
def clean_old_articles(keep_last=3):
    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º {keep_last} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö...")
    articles = glob.glob("content/posts/*.md")
    if not articles:
        return
    articles.sort(key=os.path.getmtime, reverse=True)
    for a in articles[keep_last:]:
        try:
            os.remove(a)
            print(f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {os.path.basename(a)}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {a}: {e}")

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ ----------
def generate_article_content(topic):
    openrouter_key = os.getenv('OPENROUTER_API_KEY')
    groq_key = os.getenv('GROQ_API_KEY')

    models = []
    if groq_key:
        groq_models = ["llama-3.1-8b-instant"]
        for m in groq_models:
            models.append((f"Groq-{m}", lambda m=m: generate_with_groq(groq_key, m, topic)))
    if openrouter_key:
        openrouter_models = ["anthropic/claude-3-haiku"]
        for m in openrouter_models:
            models.append((m, lambda m=m: generate_with_openrouter(openrouter_key, m, topic)))

    for name, func in models:
        try:
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º: {name}")
            content = func()
            if content and len(content.strip()) > 100:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ {name}")
                return content, name
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {name}: {e}")
    # fallback
    print("‚ö†Ô∏è –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É")
    fallback = f"# {topic}\n\n–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ {topic}."
    return fallback, "fallback"

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Groq ----------
def generate_with_groq(api_key, model_name, topic):
    prompt = f"–ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: {topic}"
    response = requests.post(
        "https://api.groq.com/openai/v1/chat/completions",
        headers={"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"},
        json={"model": model_name, "messages":[{"role":"user","content":prompt}], "max_tokens":1500},
        timeout=30
    )
    if response.status_code == 200:
        data = response.json()
        return data['choices'][0]['message']['content'].strip()
    raise Exception(f"HTTP {response.status_code}: {response.text[:200]}")

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter ----------
def generate_with_openrouter(api_key, model_name, topic):
    prompt = f"–ù–∞–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: {topic}"
    response = requests.post(
        "https://openrouter.ai/api/v1/chat/completions",
        headers={"Authorization": f"Bearer {api_key}", "Content-Type": "application/json"},
        json={"model": model_name, "messages":[{"role":"user","content":prompt}], "max_tokens":1500},
        timeout=30
    )
    if response.status_code == 200:
        data = response.json()
        return data['choices'][0]['message']['content'].strip()
    raise Exception(f"HTTP {response.status_code}")

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ----------
def generate_image(text, filename):
    generators = [generate_image_openrouter, generate_image_craiyon, generate_image_deepai]
    for gen in generators:
        try:
            result = gen(text, filename)
            if result:
                return result
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ {gen.__name__}: {e}")
    print("‚ùå –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
    return None

# OpenRouter Images
def generate_image_openrouter(text, filename):
    key = os.getenv('OPENROUTER_API_KEY')
    if not key:
        raise Exception("–ù–µ—Ç OPENROUTER_API_KEY")
    prompt = text
    response = requests.post(
        "https://openrouter.ai/api/v1/images/generations",
        headers={"Authorization": f"Bearer {key}", "Content-Type": "application/json"},
        json={"model":"openai-image-1","prompt":prompt,"size":"1024x1024","n":1},
        timeout=30
    )
    if response.status_code == 200:
        data = response.json()
        img_data = data['data'][0]['b64_json']
        with open(filename, 'wb') as f:
            f.write(base64.b64decode(img_data))
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        return filename
    raise Exception(f"HTTP {response.status_code}")

# Craiyon (–±–µ–∑ —Ç–æ–∫–µ–Ω–∞)
def generate_image_craiyon(text, filename):
    response = requests.post("https://backend.craiyon.com/generate", json={"prompt": text})
    if response.status_code == 200:
        img_data = response.json()['images'][0]
        with open(filename, 'wb') as f:
            f.write(base64.b64decode(img_data))
        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (Craiyon): {filename}")
        return filename
    return None

# DeepAI (—Å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º)
def generate_image_deepai(text, filename):
    token = "6d27650a"
    response = requests.post(
        "https://api.deepai.org/api/text2img",
        data={"text": text},
        headers={"api-key": token}
    )
    if response.status_code == 200:
        data = response.json()
        img_url = data.get("output_url")
        if img_url:
            img_data = requests.get(img_url).content
            with open(filename, 'wb') as f:
                f.write(img_data)
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ (DeepAI): {filename}")
            return filename
    return None

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug ----------
def generate_slug(text):
    text = text.lower()
    text = ''.join(c for c in text if c.isalnum() or c in ' -')
    text = text.replace(' ','-').replace('--','-')
    return text[:100]

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è frontmatter ----------
def generate_frontmatter(title, content, image_filename):
    now = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
    fm = f"""---
title: "{title}"
date: {now}
draft: false
tags: ["AI","–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏","2025"]
categories: ["–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]
image: "/{image_filename}"  # –ø–æ–¥—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –≤ –±–ª–æ–≥
summary: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ {title}"
---
{content}
"""
    return fm

# ---------- –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ----------
def generate_content():
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    clean_old_articles(keep_last=3)

    topic = generate_ai_trend_topic()
    print(f"üìù –¢–µ–º–∞: {topic}")
    
    content, model = generate_article_content(topic)

    date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    slug = generate_slug(topic)
    filename_md = f"content/posts/{date}-{slug}.md"
    image_filename = f"static/images/posts/{slug}.png"
    os.makedirs("content/posts", exist_ok=True)
    os.makedirs("static/images/posts", exist_ok=True)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    generate_image(content, image_filename)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é —Å frontmatter
    frontmatter = generate_frontmatter(topic, content, f"images/posts/{slug}.png")
    with open(filename_md,'w',encoding='utf-8') as f:
        f.write(frontmatter)
    print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filename_md}")
    return filename_md

if __name__ == "__main__":
    generate_content()
