#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime, timezone
import glob
import base64
import re
from openai import OpenAI

# -------------------- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–ª—é—á–µ–π --------------------
OPENAI_API_KEY = "your-openai-api-key"  # –≠—Ç–æ—Ç –∫–ª—é—á –≤—Å—ë –µ—â—ë –º–æ–∂–µ—Ç –±—ã—Ç—å —É –≤–∞—Å –Ω–∞ –º–µ—Å—Ç–µ
DEEP_AI_KEY = "98c841c4-f3dc-42b0-b02e-de2fcdebd001"

# –ü–æ–¥—Ç—è–≥–∏–≤–∞–µ–º –∫–ª—é—á–∏ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ GitHub
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")  # –ü–æ–ª—É—á–∞–µ–º OpenRouter API –∫–ª—é—á –∏–∑ GitHub Secrets
GROQ_API_KEY = os.getenv("GROQ_API_KEY")  # –ü–æ–ª—É—á–∞–µ–º Groq API –∫–ª—é—á –∏–∑ GitHub Secrets

CRAION_API_URL = "https://api.craiyon.com/generate"  # Craiyon endpoint

client = OpenAI(api_key=OPENAI_API_KEY)

# -------------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º—ã --------------------
def generate_ai_trend_topic():
    prompt = "–ü—Ä–µ–¥–ª–æ–∂–∏ –æ–¥–Ω—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É –¥–ª—è —Å—Ç–∞—Ç—å–∏ 2025 –≥–æ–¥–∞ –æ —Ç—Ä–µ–Ω–¥–∞—Ö –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ, –∫—Ä–∞—Ç–∫–æ –∏ —ë–º–∫–æ"
    resp = client.chat.completions.create(
        model="gpt-4",
        messages=[{"role":"user","content":prompt}],
        temperature=0.8
    )
    topic = resp.choices[0].message.content.strip()
    return topic

# -------------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ --------------------
def generate_article_content(topic):
    models_to_try = []

    # OpenRouter –º–æ–¥–µ–ª–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    if OPENROUTER_API_KEY:
        print("üîë OpenRouter API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
        openrouter_models = [
            "anthropic/claude-3-haiku",
            "google/gemini-pro", 
            "mistralai/mistral-7b-instruct",
            "meta-llama/llama-3-8b-instruct",
        ]
        for model_name in openrouter_models:
            models_to_try.append((model_name, lambda m=model_name: generate_with_openrouter(OPENROUTER_API_KEY, m, topic)))

    # Groq –º–æ–¥–µ–ª–∏ (–∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç)
    if GROQ_API_KEY:
        print("üîë Groq API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω")
        groq_models = [
            "llama-3.1-8b-instant",
            "llama-3.2-1b-preview",
            "llama-3.2-3b-preview",
            "mixtral-8x7b-32768",
            "gemma2-9b-it"
        ]
        for model_name in groq_models:
            models_to_try.append((f"Groq-{model_name}", lambda m=model_name: generate_with_groq(GROQ_API_KEY, m, topic)))

    # –ü–µ—Ä–µ–±–æ—Ä –º–æ–¥–µ–ª–µ–π
    for model_name, generate_func in models_to_try:
        try:
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º: {model_name}")
            result = generate_func()
            if result and len(result.strip()) > 100:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ {model_name}")
                return result, model_name
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {model_name}: {str(e)[:100]}")
            continue

    # Fallback
    print("‚ö†Ô∏è –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É")
    fallback_content = f"# {topic}\n\n–°—Ç–∞—Ç—å—è –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞."
    return fallback_content, "fallback-generator"

# -------------------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è --------------------
def generate_article_image(topic):
    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")

    # –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Craiyon
    try:
        print("üîÑ –ü—Ä–æ–±—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: Craiyon (DALL¬∑E Mini)")
        response = requests.post(
            CRAION_API_URL,
            json={"prompt": f"{topic}, —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å, –Ω–µ–π—Ä–æ—Å–µ—Ç–∏, –∫–∏–±–µ—Ä–ø–∞–Ω–∫"},
        )
        response.raise_for_status()
        result = response.json()
        if result and 'images' in result:
            image_url = result['images'][0]  # –ü–µ—Ä–≤–æ–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_response = requests.get(image_url)
            image_bytes = image_response.content
            os.makedirs("assets/images/posts", exist_ok=True)
            slug = generate_slug(topic)
            filename = f"assets/images/posts/{slug}.png"
            with open(filename, "wb") as f:
                f.write(image_bytes)
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —á–µ—Ä–µ–∑ Craiyon: {filename}")
            return f"/images/posts/{slug}.png"
    except Exception as e:
        print(f"‚ö†Ô∏è Craiyon –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    # –ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ DeepAI
    try:
        print("üîÑ –ü—Ä–æ–±—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä: DeepAI")
        response = requests.post(
            "https://api.deepai.org/api/text2img",
            data={'text': f"{topic}, —Ü–∏—Ñ—Ä–æ–≤–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ, —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å"},
            headers={'api-key': DEEP_AI_KEY}
        )
        response.raise_for_status()
        result = response.json()
        if 'output_url' in result:
            print(f"‚úÖ DeepAI —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {result['output_url']}")
            image_response = requests.get(result['output_url'])
            image_bytes = image_response.content
            os.makedirs("assets/images/posts", exist_ok=True)
            slug = generate_slug(topic)
            filename = f"assets/images/posts/{slug}.png"
            with open(filename, "wb") as f:
                f.write(image_bytes)
            return f"/images/posts/{slug}.png"
    except Exception as e:
        print(f"‚ö†Ô∏è DeepAI –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    # –ï—Å–ª–∏ –æ–±–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É")
    return "/images/posts/default.png"

# -------------------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ --------------------
def generate_slug(text):
    text = text.lower()
    text = text.replace(' ', '-')
    text = text.replace('--', '-')
    text = re.sub(r'[^a-z0-9\-]', '', text)
    text = re.sub(r'-+', '-', text)
    return text[:60]

def generate_frontmatter(title, content, model_used, image_url):
    now = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
    escaped_title = title.replace(':', ' -').replace('"','').replace("'",'').replace('\\','')
    frontmatter_lines = [
        "---",
        f'title: "{escaped_title}"',
        f"date: {now}",
        "draft: false",
        'tags: ["AI", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "2025"]',
        'categories: ["–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]',
        'summary: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ–± –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ"'
    ]
    if image_url:
        frontmatter_lines.append(f'image: "{image_url}"')
    frontmatter_lines.append("---")
    frontmatter_lines.append(content)
    return "\n".join(frontmatter_lines)

def clean_old_articles(keep_last=3):
    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º {keep_last} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö...")
    try:
        articles = glob.glob("content/posts/*.md")
        if not articles:
            print("üìÅ –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
            return
        articles.sort(key=os.path.getmtime, reverse=True)
        articles_to_keep = articles[:keep_last]
        articles_to_delete = articles[keep_last:]
        for article_path in articles_to_delete:
            os.remove(article_path)
            slug = os.path.basename(article_path).replace('.md','')
            image_path = f"assets/images/posts/{slug}.png"
            if os.path.exists(image_path):
                os.remove(image_path)
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ: {e}")

# -------------------- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ --------------------
def generate_content():
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    KEEP_LAST_ARTICLES = 3
    clean_old_articles(KEEP_LAST_ARTICLES)

    topic = generate_ai_trend_topic()
    print(f"üìù –ê–∫—Ç—É–∞–ª—å–Ω–∞—è —Ç–µ–º–∞ 2025: {topic}")

    image_filename = generate_article_image(topic)
    content, model_used = generate_article_content(topic)

    date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    slug = generate_slug(topic)
    filename = f"content/posts/{date}-{slug}.md"
    frontmatter = generate_frontmatter(topic, content, model_used, image_filename)

    os.makedirs("content/posts", exist_ok=True)
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(frontmatter)
    print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filename}")
    return filename


if __name__ == "__main__":
    generate_content()
