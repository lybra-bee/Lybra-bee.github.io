#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime, timezone
import glob
import time

# -----------------------------
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–º—ã
# -----------------------------
def generate_ai_trend_topic():
    current_trends_2025 = [
        "Multimodal AI - –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ",
        "AI –∞–≥–µ–Ω—Ç—ã - –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ ML",
        "–ù–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è",
        "Generative AI - —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏ –∫–æ–¥–∞",
        "Edge AI - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
        "AI –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "–≠—Ç–∏—á–Ω—ã–π AI",
        "AI –≤ healthcare",
        "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "AI –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è",
        "–î–æ–≤–µ—Ä–µ–Ω–Ω—ã–π AI",
        "AI –¥–ª—è –∫–ª–∏–º–∞—Ç–∞",
        "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ AI –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã",
        "AI –≤ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"
    ]
    application_domains = [
        "–≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ cloud-native –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö",
        "–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∏ IoT —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö",
        "–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ",
        "–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
        "–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ smart city –∏ —É–º–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ",
        "–≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"
    ]
    trend = random.choice(current_trends_2025)
    domain = random.choice(application_domains)
    templates = [
        f"{trend} {domain} –≤ 2025 –≥–æ–¥—É",
        f"–¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ 2025: {trend} {domain}",
        f"{trend} - —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è {domain} –≤ 2025",
        f"–ö–∞–∫ {trend} —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç {domain} –≤ 2025 –≥–æ–¥—É",
        f"–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ 2025: {trend} –¥–ª—è {domain}",
        f"{trend} - –±—É–¥—É—â–µ–µ {domain} –≤ 2025 –≥–æ–¥—É",
        f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {trend} –≤ {domain} 2025"
    ]
    return random.choice(templates)

# -----------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ API
# -----------------------------
def generate_article_content(topic):
    openrouter_key = os.getenv('OPENROUTER_API_KEY')
    groq_key = os.getenv('GROQ_API_KEY')

    models_to_try = []

    if groq_key:
        groq_models = ["llama-3.1-8b-instant", "llama-3.2-1b-preview"]
        for m in groq_models:
            models_to_try.append((f"Groq-{m}", lambda m=m: generate_with_groq(groq_key, m, topic)))

    if openrouter_key:
        openrouter_models = ["anthropic/claude-3-haiku", "google/gemini-pro"]
        for m in openrouter_models:
            models_to_try.append((m, lambda m=m: generate_with_openrouter(openrouter_key, m, topic)))

    for model_name, func in models_to_try:
        try:
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º: {model_name}")
            result = func()
            if result and len(result.strip()) > 100:
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ {model_name}")
                return result, model_name
            time.sleep(1)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {model_name}: {str(e)[:100]}")
            continue

    # fallback
    print("‚ö†Ô∏è –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É")
    fallback_content = f"""# {topic}

## –í–≤–µ–¥–µ–Ω–∏–µ
{topic} - –∫–ª—é—á–µ–≤–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI –Ω–∞ 2025 –≥–æ–¥.

## –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã
- **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–∏**: {topic} –≤–∫–ª—é—á–∞–µ—Ç –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
- **–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ**: –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö
- **–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã**: –û–∂–∏–¥–∞–µ—Ç—Å—è —Ä–æ—Å—Ç –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
{topic} –∏–º–µ–µ—Ç –±–æ–ª—å—à–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª –¥–ª—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–π
"""
    return fallback_content, "fallback-generator"

# -----------------------------
# Groq API
# -----------------------------
def generate_with_groq(api_key, model_name, topic):
    prompt = f"–ù–∞–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: '{topic}'. 400-600 —Å–ª–æ–≤, Markdown, —Ä—É—Å—Å–∫–∏–π, —Å—Ç–∏–ª—å: –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"
    response = requests.post(
        "https://api.groq.com/openai/v1/chat/completions",
        headers={"Content-Type":"application/json", "Authorization": f"Bearer {api_key}"},
        json={"model": model_name, "messages":[{"role":"user","content":prompt}], "max_tokens":1500, "temperature":0.7},
        timeout=30
    )
    if response.status_code == 200:
        data = response.json()
        return data['choices'][0]['message']['content'].strip()
    raise Exception(f"HTTP {response.status_code}: {response.text[:200]}")

# -----------------------------
# OpenRouter API
# -----------------------------
def generate_with_openrouter(api_key, model_name, topic):
    prompt = f"–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é: '{topic}' 400-600 —Å–ª–æ–≤, Markdown, —Ä—É—Å—Å–∫–∏–π, –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"
    response = requests.post(
        "https://openrouter.ai/api/v1/chat/completions",
        headers={"Content-Type":"application/json","Authorization":f"Bearer {api_key}"},
        json={"model": model_name, "messages":[{"role":"user","content":prompt}],"max_tokens":1500,"temperature":0.7},
        timeout=30
    )
    if response.status_code == 200:
        data = response.json()
        return data['choices'][0]['message']['content'].strip()
    raise Exception(f"HTTP {response.status_code}")

# -----------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
# -----------------------------
def generate_image(topic, filename):
    # –ü–µ—Ä–µ–±–æ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    generators = [
        generate_image_openrouter,
        generate_image_deepai,
        generate_image_craiyon,
        generate_image_lexica
    ]
    for gen in generators:
        try:
            url = gen(topic, filename)
            if url:
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ {gen.__name__}")
                return url
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ {gen.__name__}: {e}")
            continue
    print("‚ùå –í—Å–µ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
    return None

def generate_image_openrouter(topic, filename):
    key = os.getenv('OPENROUTER_API_KEY')
    if not key:
        raise Exception("–ù–µ—Ç OPENROUTER_API_KEY")
    prompt = f"–°–æ–∑–¥–∞–π –∏–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—é –∫ —Å—Ç–∞—Ç—å–µ: '{topic}'"
    response = requests.post(
        "https://openrouter.ai/api/v1/images/generations",
        headers={"Authorization": f"Bearer {key}"},
        json={"prompt":prompt,"size":"1024x1024"},
        timeout=30
    )
    if response.status_code == 200:
        data = response.json()
        image_base64 = data['data'][0]['b64_json']
        image_bytes = base64.b64decode(image_base64)
        os.makedirs("static/images/posts", exist_ok=True)
        with open(f"static/images/posts/{filename}", 'wb') as f:
            f.write(image_bytes)
        return f"images/posts/{filename}"
    raise Exception(f"HTTP {response.status_code}: {response.text}")

def generate_image_deepai(topic, filename):
    key = "6d27650a"
    response = requests.post(
        "https://api.deepai.org/api/text2img",
        headers={"api-key": key},
        data={"text": topic},
        timeout=30
    )
    if response.status_code == 200:
        data = response.json()
        image_url = data.get('output_url')
        if image_url:
            return image_url
    raise Exception(f"HTTP {response.status_code}: {response.text}")

def generate_image_craiyon(topic, filename):
    response = requests.post(
        "https://backend.craiyon.com/generate",
        json={"prompt": topic},
        timeout=30
    )
    if response.status_code == 200:
        data = response.json()
        if "images" in data:
            return data["images"][0]
    raise Exception(f"HTTP {response.status_code}: {response.text}")

def generate_image_lexica(topic, filename):
    response = requests.get(
        f"https://lexica.art/api/v1/search?q={requests.utils.quote(topic)}",
        timeout=30
    )
    if response.status_code == 200:
        data = response.json()
        if data.get("images"):
            return data["images"][0]["srcSmall"]
    raise Exception(f"HTTP {response.status_code}: {response.text}")

# -----------------------------
# –°–æ–∑–¥–∞–Ω–∏–µ slug
# -----------------------------
def generate_slug(text):
    text = text.lower()
    text = ''.join(c for c in text if c.isalnum() or c in ' -')
    text = text.replace(' ', '-').replace('--','-')
    return text[:100]

# -----------------------------
# Frontmatter Hugo
# -----------------------------
def generate_frontmatter(title, content, image_filename):
    now = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
    fm = f"""---
title: "{title}"
date: "{now}"
draft: false
tags: ["AI","–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏","2025"]
categories: ["–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]
image: "/{image_filename}" 
summary: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ {title}"
---
{content}
"""
    return fm

# -----------------------------
# –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π
# -----------------------------
def clean_old_articles(keep_last=3):
    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º {keep_last} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö...")
    try:
        articles = glob.glob("content/posts/*.md")
        articles.sort(key=os.path.getmtime, reverse=True)
        for a in articles[keep_last:]:
            try: os.remove(a)
            except: pass
    except Exception as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")

# -----------------------------
# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
# -----------------------------
def generate_content():
    print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...")
    clean_old_articles(3)
    topic = generate_ai_trend_topic()
    print(f"üìù –¢–µ–º–∞: {topic}")
    content, model_used = generate_article_content(topic)
    slug = generate_slug(topic)
    date = datetime.now(timezone.utc).strftime("%Y-%m-%d")
    image_filename = f"{slug}.png"
    image_url = generate_image(topic, image_filename)
    frontmatter = generate_frontmatter(topic, content, image_filename if image_url else "")
    os.makedirs("content/posts", exist_ok=True)
    filepath = f"content/posts/{date}-{slug}.md"
    with open(filepath, 'w', encoding='utf-8') as f:
        f.write(frontmatter)
    print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filepath}")
    return filepath

if __name__ == "__main__":
    generate_content()
