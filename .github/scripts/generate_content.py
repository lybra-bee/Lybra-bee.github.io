#!/usr/bin/env python3
import os
import json
import requests
import random
from datetime import datetime
import glob
import base64
import time

def get_gigachat_token():
    """–ü–æ–ª—É—á–∞–µ—Ç Access Token –¥–ª—è GigaChat API"""
    client_id = os.getenv('GIGACHAT_CLIENT_ID')
    client_secret = os.getenv('GIGACHAT_CLIENT_SECRET')
    
    if not client_id or not client_secret:
        print("‚ùå GIGACHAT_CLIENT_ID –∏–ª–∏ GIGACHAT_CLIENT_SECRET –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        print("‚ÑπÔ∏è  –î–æ–±–∞–≤—å—Ç–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ GitHub Settings ‚Üí Secrets ‚Üí Actions")
        return None
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º Authorization Key
    auth_string = f"{client_id}:{client_secret}"
    auth_key = base64.b64encode(auth_string.encode()).decode()
    
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    headers = {
        "Content-Type": "application/x-www-form-urlencoded",
        "Accept": "application/json",
        "RqUID": f"rq-{random.randint(100000, 999999)}-{int(time.time())}",
        "Authorization": f"Basic {auth_key}"
    }
    data = {
        "scope": "GIGACHAT_API_PERS"
    }
    
    try:
        response = requests.post(url, headers=headers, data=data, verify=False, timeout=30)
        if response.status_code == 200:
            token_data = response.json()
            return token_data.get("access_token")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ GigaChat: {response.status_code}")
            print(f"üìã –û—Ç–≤–µ—Ç: {response.text[:200]}...")
            return None
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞ GigaChat: {e}")
        return None

def generate_content():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    KEEP_LAST_ARTICLES = 3
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π
    clean_old_articles(KEEP_LAST_ARTICLES)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ–º—É
    selected_topic = generate_ai_trend_topic()
    print(f"üìù –í—ã–±—Ä–∞–Ω–∞ —Ç–µ–º–∞: {selected_topic}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: GigaChat ‚Üí –¥—Ä—É–≥–∏–µ API)
    image_filename = generate_article_image(selected_topic)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    content, model_used, api_success = generate_article_content(selected_topic)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å—Ç–∞—Ç—å–∏
    date = datetime.now().strftime("%Y-%m-%d")
    slug = generate_slug(selected_topic)
    filename = f"content/posts/{date}-{slug}.md"
    
    frontmatter = generate_frontmatter(selected_topic, content, model_used, api_success, image_filename)
    
    os.makedirs("content/posts", exist_ok=True)
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(frontmatter)
    
    print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filename}")
    return filename

def generate_article_content(topic):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ API"""
    api_key = os.getenv('OPENROUTER_API_KEY')
    gigachat_token = get_gigachat_token()
    
    content = ""
    model_used = "–õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    api_success = False
    
    # –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –º–æ–¥–µ–ª–µ–π
    models_to_try = []
    
    # 1. GigaChat (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
    if gigachat_token:
        models_to_try.append(("GigaChat", lambda: generate_with_gigachat(gigachat_token, topic)))
    
    # 2. OpenRouter –º–æ–¥–µ–ª–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
    if api_key:
        openrouter_models = [
            "anthropic/claude-3-haiku",
            "google/gemini-pro",
            "mistralai/mistral-7b-instruct",
            "meta-llama/llama-3-8b-instruct",
        ]
        for model_name in openrouter_models:
            models_to_try.append((model_name, lambda m=model_name: generate_with_openrouter(api_key, m, topic)))
    
    # –ü—Ä–æ–±—É–µ–º –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏
    for model_name, generate_func in models_to_try:
        try:
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º: {model_name}")
            result = generate_func()
            if result:
                content = result
                model_used = model_name
                api_success = True
                print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ {model_name}")
                break
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {model_name}: {e}")
            continue
    
    # Fallback
    if not content:
        print("‚ùå –í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –≥–µ–Ω–µ—Ä–∞—Ü–∏—é")
        content = generate_fallback_content(topic)
    
    return content, model_used, api_success

def generate_with_gigachat(token, topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ GigaChat"""
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}",
        "Accept": "application/json"
    }
    
    prompt = f"""–ù–∞–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: "{topic}".

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
- –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ ## –∏ ###
- **–ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç** –¥–ª—è —Ç–µ—Ä–º–∏–Ω–æ–≤
- 300-400 —Å–ª–æ–≤, —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
- –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã

–°—Ç—Ä—É–∫—Ç—É—Ä–∞:
1. –í–≤–µ–¥–µ–Ω–∏–µ
2. –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏  
3. –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
4. –ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã
5. –ó–∞–∫–ª—é—á–µ–Ω–∏–µ"""
    
    payload = {
        "model": "GigaChat",
        "messages": [{"role": "user", "content": prompt}],
        "temperature": 0.7,
        "max_tokens": 1500
    }
    
    response = requests.post(url, headers=headers, json=payload, timeout=45)
    
    if response.status_code == 200:
        data = response.json()
        return data['choices'][0]['message']['content']
    raise Exception(f"HTTP {response.status_code}")

def generate_with_openrouter(api_key, model_name, topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter"""
    response = requests.post(
        "https://openrouter.ai/api/v1/chat/completions",
        headers={
            "Content-Type": "application/json",
            "Authorization": f"Bearer {api_key}",
            "HTTP-Referer": "https://github.com",
            "X-Title": "AI Blog Generator"
        },
        json={
            "model": model_name,
            "messages": [{
                "role": "user",
                "content": f"–ù–∞–ø–∏—à–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: {topic}. –ò—Å–ø–æ–ª—å–∑—É–π Markdown, –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ ##, **–∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç**. –†—É—Å—Å–∫–∏–π —è–∑—ã–∫, 300-400 —Å–ª–æ–≤, –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤."
            }],
            "max_tokens": 800,
            "temperature": 0.7
        },
        timeout=25
    )
    
    if response.status_code == 200:
        data = response.json()
        if data.get('choices'):
            content = data['choices'][0]['message']['content']
            return content.replace('"""', '').replace("'''", "").strip()
    
    raise Exception(f"HTTP {response.status_code}")

def generate_article_image(topic):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI API"""
    print("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    image_prompt = f"Technology illustration for article about {topic}. Modern, clean, professional style. Abstract technology concept with neural networks, data visualization. Blue and purple color scheme. No text."
    
    # –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ API –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    apis_to_try = [
        ("GigaChat", try_gigachat_image),
        ("HuggingFace", try_huggingface_api),
        ("DeepAI", try_deepai_api)
    ]
    
    for api_name, api_func in apis_to_try:
        try:
            print(f"üîÑ –ü—Ä–æ–±—É–µ–º {api_name} –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
            result = api_func(image_prompt, topic)
            if result:
                return result
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {api_name}: {e}")
            continue
    
    # Fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    return create_fallback_image(image_prompt, topic)

def try_gigachat_image(prompt, topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ GigaChat"""
    token = get_gigachat_token()
    if not token:
        return None
    
    try:
        # GigaChat –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ endpoints –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ endpoints
        url = "https://gigachat.devices.sberbank.ru/api/v1/models"
        headers = {
            "Authorization": f"Bearer {token}",
            "Accept": "application/json"
        }
        
        response = requests.get(url, headers=headers, timeout=30)
        if response.status_code == 200:
            models = response.json()
            print(f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ GigaChat: {[m.get('id') for m in models.get('data', [])]}")
        
        # –ü—Ä–æ–±—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–µ—Å–ª–∏ endpoint –¥–æ—Å—Ç—É–ø–µ–Ω)
        # Note: GigaChat –º–æ–∂–µ—Ç –Ω–µ –∏–º–µ—Ç—å image generation –≤ —Ç–µ–∫—É—â–µ–º API
        # –í —ç—Ç–æ–º —Å–ª—É—á–∞–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
        return None
        
    except Exception as e:
        print(f"‚ùå GigaChat image error: {e}")
        return None

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (try_huggingface_api, try_deepai_api, create_fallback_image, 
# generate_ai_trend_topic, clean_old_articles, generate_fallback_content, 
# generate_slug, generate_frontmatter) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞)

def try_huggingface_api(prompt, topic):
    """–ü—Ä–æ–±—É–µ–º Hugging Face API"""
    hf_token = os.getenv('HUGGINGFACE_TOKEN')
    if not hf_token:
        return None
    
    try:
        models = [
            "stabilityai/stable-diffusion-2-1",
            "runwayml/stable-diffusion-v1-5"
        ]
        
        for model in models:
            try:
                headers = {"Authorization": f"Bearer {hf_token}"}
                payload = {
                    "inputs": prompt,
                    "parameters": {
                        "width": 800,
                        "height": 400,
                        "num_inference_steps": 25
                    }
                }
                
                response = requests.post(
                    f"https://api-inference.huggingface.co/models/{model}",
                    headers=headers,
                    json=payload,
                    timeout=45
                )
                
                if response.status_code == 200:
                    filename = save_article_image(response.content, topic)
                    if filename:
                        print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ {model}")
                        return filename
                
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ {model}: {e}")
                continue
                
    except Exception as e:
        print(f"‚ùå HuggingFace error: {e}")
    
    return None

def try_deepai_api(prompt, topic):
    """–ü—Ä–æ–±—É–µ–º DeepAI API"""
    try:
        headers = {
            "api-key": "quickstart-QUdJIGlzIGNvbWluZy4uLi4K",
            "Content-Type": "application/x-www-form-urlencoded"
        }
        
        data = {
            "text": prompt,
            "grid_size": "1",
            "width": "800",
            "height": "400"
        }
        
        response = requests.post(
            "https://api.deepai.org/api/text2img",
            headers=headers,
            data=data,
            timeout=30
        )
        
        if response.status_code == 200:
            data = response.json()
            if 'output_url' in data:
                image_response = requests.get(data['output_url'], timeout=30)
                if image_response.status_code == 200:
                    filename = save_article_image(image_response.content, topic)
                    if filename:
                        print("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ DeepAI")
                        return filename
                        
    except Exception as e:
        print(f"‚ùå DeepAI error: {e}")
    
    return None

def save_article_image(image_data, topic):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    try:
        os.makedirs("static/images/posts", exist_ok=True)
        slug = generate_slug(topic)
        filename = f"images/posts/{slug}.jpg"
        full_path = f"static/{filename}"
        
        with open(full_path, 'wb') as f:
            f.write(image_data)
        
        print(f"üíæ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return None

def create_fallback_image(prompt, topic):
    """–°–æ–∑–¥–∞–µ—Ç fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    try:
        from PIL import Image, ImageDraw, ImageFont
        import numpy as np
        
        os.makedirs("static/images/posts", exist_ok=True)
        slug = generate_slug(topic)
        filename = f"images/posts/{slug}.jpg"
        full_path = f"static/{filename}"
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ç–µ—Ö–Ω–æ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        width, height = 800, 400
        image = Image.new('RGB', (width, height), color=(20, 25, 45))
        draw = ImageDraw.Draw(image)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        for y in range(height):
            color = (
                int(20 + y * 0.1),
                int(25 + y * 0.08), 
                int(45 + y * 0.12)
            )
            draw.line([(0, y), (width, y)], fill=color)
        
        # –¢–µ—Ö–Ω–æ-—ç–ª–µ–º–µ–Ω—Ç—ã
        draw.rectangle([15, 15, width-15, height-15], outline=(70, 130, 255), width=2)
        
        # –°–µ—Ç–∫–∞ –∏ —Ç–æ—á–∫–∏
        for i in range(0, width, 40):
            alpha = random.randint(30, 80)
            draw.line([(i, 0), (i, height)], fill=(70, 130, 255, alpha), width=1)
        
        for i in range(0, height, 40):
            alpha = random.randint(30, 80)
            draw.line([(0, i), (width, i)], fill=(70, 130, 255, alpha), width=1)
        
        # –°–ª—É—á–∞–π–Ω—ã–µ –ª–∏–Ω–∏–∏ –∏ —Ç–æ—á–∫–∏
        for _ in range(25):
            x1, y1 = random.randint(20, width-20), random.randint(20, height-20)
            x2, y2 = x1 + random.randint(-150, 150), y1 + random.randint(-80, 80)
            color = (random.randint(50, 150), random.randint(100, 200), 255)
            draw.line([(x1, y1), (x2, y2)], fill=color, width=random.randint(1, 3))
        
        for _ in range(50):
            x = random.randint(30, width-30)
            y = random.randint(30, height-30)
            size = random.randint(2, 6)
            color = (random.randint(100, 200), random.randint(150, 230), 255)
            draw.ellipse([x, y, x+size, y+size], fill=color)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º
        image.save(full_path, 'JPEG', quality=95, optimize=True)
        print("üé® –°–æ–∑–¥–∞–Ω–æ fallback –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
        return filename
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è fallback: {e}")
        return None

def generate_ai_trend_topic():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ç–µ–º—É"""
    tech_domains = [
        "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–≥–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ AI",
        "–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ", "–æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞", "–±–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏"
    ]
    
    current_trends = [
        "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –∏ attention –º–µ—Ö–∞–Ω–∏–∑–º—ã", "–º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—ã–µ AI —Å–∏—Å—Ç–µ–º—ã",
        "few-shot –æ–±—É—á–µ–Ω–∏–µ", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å –ø–∞–º—è—Ç—å—é", "–æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º"
    ]
    
    applications = [
        "–≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ", "–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö", "–≤ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö",
        "–≤ –∞–Ω–∞–ª–∏–∑–µ –¥–∞–Ω–Ω—ã—Ö", "–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
    ]
    
    domain = random.choice(tech_domains)
    trend = random.choice(current_trends)
    application = random.choice(applications)
    
    topic_formats = [
        f"{trend}: –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ {domain} {application}",
        f"{domain} 2025: –∫–∞–∫ {trend} –º–µ–Ω—è—é—Ç {application}",
        f"{trend} –≤ {domain} - –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã {application}"
    ]
    
    selected_topic = random.choice(topic_formats)
    if random.random() > 0.3:
        selected_topic = f"{selected_topic} –≤ 2024-2025"
    
    return selected_topic

def clean_old_articles(keep_last=3):
    """–û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç–∞—Ç–µ–π"""
    print(f"üßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π, –æ—Å—Ç–∞–≤–ª—è–µ–º {keep_last} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö...")
    
    articles = glob.glob("content/posts/*.md")
    if not articles:
        print("üìÅ –ù–µ—Ç —Å—Ç–∞—Ç–µ–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏")
        return
    
    articles.sort(key=os.path.getmtime)
    articles_to_keep = articles[-keep_last:]
    articles_to_delete = articles[:-keep_last]
    
    print(f"üìä –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {len(articles)}")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º: {len(articles_to_keep)}")
    print(f"üóëÔ∏è –£–¥–∞–ª—è–µ–º: {len(articles_to_delete)}")
    
    for article_path in articles_to_delete:
        try:
            os.remove(article_path)
            print(f"‚ùå –£–¥–∞–ª–µ–Ω–æ: {os.path.basename(article_path)}")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è {article_path}: {e}")

def generate_fallback_content(topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è fallback –∫–æ–Ω—Ç–µ–Ω—Ç–∞"""
    return f"""## {topic}

–í 2024-2025 –≥–æ–¥–∞—Ö **{topic.split(':')[0]}** –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ª–∞–Ω–¥—à–∞—Ñ—Ç.

### –ö–ª—é—á–µ–≤—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏

- **–ü–µ—Ä–µ–¥–æ–≤—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã** –∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
- **–£–ª—É—á—à–µ–Ω–Ω–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å** –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π  
- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –æ–±–ª–∞—á–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏** –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º–∞–º–∏
- **–ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å** –∏ —ç—Ç–∏—á–µ—Å–∫–∏–µ considerations
- **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è** —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤

### –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π impact

–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑—É—é—Ç cutting-edge –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π. –≠–∫–æ—Å–∏—Å—Ç–µ–º–∞ –±—ã—Å—Ç—Ä–æ —ç–≤–æ–ª—é—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞—è –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ workflow."""

def generate_slug(topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã"""
    slug = topic.lower()
    replacements = {' ': '-', ':': '', '(': '', ')': '', '/': '-', '\\': '-', '.': '', ',': ''}
    for old, new in replacements.items():
        slug = slug.replace(old, new)
    slug = ''.join(c for c in slug if c.isalnum() or c == '-')
    while '--' in slug:
        slug = slug.replace('--', '-')
    return slug[:40]

def generate_frontmatter(topic, content, model_used, api_success, image_filename=None):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è frontmatter"""
    current_time = datetime.now()
    status = "‚úÖ API –≥–µ–Ω–µ—Ä–∞—Ü–∏—è" if api_success else "‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"
    
    tags = ["–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π-–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏", "2024-2025"]
    image_section = f"image: /{image_filename}\n" if image_filename else ""
    
    return f"""---
title: "{topic}"
date: {datetime.utcnow().strftime("%Y-%m-%dT%H:%M:%SZ")}
draft: false
description: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ {topic}"
{image_section}tags: {json.dumps(tags, ensure_ascii=False)}
categories: ["–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
---

# {topic}

{f'![](/{image_filename})' if image_filename else ''}

{content}

---

### üîß –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏

- **–ú–æ–¥–µ–ª—å AI:** {model_used}
- **–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {current_time.strftime("%d.%m.%Y %H:%M UTC")}
- **–¢–µ–º–∞:** {topic}
- **–°—Ç–∞—Ç—É—Å:** {status}
- **–£–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å:** –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —Ç–æ–ª—å–∫–æ 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏

> *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ GitHub Actions*
"""

if __name__ == "__main__":
    generate_content()
