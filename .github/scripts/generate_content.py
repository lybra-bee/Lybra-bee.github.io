#!/usr/bin/env python3
import os
import requests
import logging
import base64
import shutil
import re
from datetime import datetime, timezone
import time

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S"
)

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
CONTENT_DIR = "content/posts"
ASSETS_DIR = "assets/images/posts"
STATIC_DIR = "static/images/posts"

# –ö–ª—é—á–∏ –∏–∑ ENV
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
FUSIONBRAIN_API_KEY = os.getenv("FUSIONBRAIN_API_KEY")

# –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–ª–∞–≥–∞
def slugify(text):
    return re.sub(r'[^a-z0-9-]', '', text.lower().replace(" ", "-"))[:50]

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ ===
def generate_article():
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏...")

    prompt = (
        "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö "
        "–∏ –Ω–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –æ–±—ä–µ–º–æ–º 400‚Äì600 —Å–ª–æ–≤. "
        "–í –Ω–∞—á–∞–ª–µ —É–∫–∞–∂–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: '–ó–∞–≥–æ–ª–æ–≤–æ–∫: ...'."
    )

    headers = {"Content-Type": "application/json"}
    body = {
        "model": "gpt-4o-mini",
        "messages": [{"role": "user", "content": prompt}]
    }

    # –ü—Ä–æ–±—É–µ–º OpenRouter
    if OPENROUTER_API_KEY:
        try:
            r = requests.post(
                "https://openrouter.ai/api/v1/chat/completions",
                headers={**headers, "Authorization": f"Bearer {OPENROUTER_API_KEY}"},
                json=body,
                timeout=60
            )
            r.raise_for_status()
            content = r.json()["choices"][0]["message"]["content"]
            logging.info("‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ OpenRouter")
            return content, "OpenRouter"
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è OpenRouter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    # –ü—Ä–æ–±—É–µ–º Groq
    if GROQ_API_KEY:
        try:
            r = requests.post(
                "https://api.groq.com/openai/v1/chat/completions",
                headers={**headers, "Authorization": f"Bearer {GROQ_API_KEY}"},
                json=body,
                timeout=60
            )
            r.raise_for_status()
            content = r.json()["choices"][0]["message"]["content"]
            logging.info("‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ Groq")
            return content, "Groq"
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Groq –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    raise RuntimeError("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é")

# === –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ ===
def extract_title(text):
    match = re.search(r"–ó–∞–≥–æ–ª–æ–≤–æ–∫:\s*(.+)", text)
    if match:
        return match.group(1).strip()
    return "AI –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: —Å–≤–µ–∂–∏–π –æ–±–∑–æ—Ä"

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
def generate_image(title, slug):
    logging.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain...")

    url = "https://api-key.fusionbrain.ai/key/api/v1/text2image/run"
    headers = {"X-Key": f"Key {FUSIONBRAIN_API_KEY}"}

    payload = {
        "type": "GENERATE",
        "style": "DEFAULT",
        "width": 1024,
        "height": 576,
        "num_images": 1,
        "text": f"–ò–ª–ª—é—Å—Ç—Ä–∞—Ü–∏—è –∫ —Å—Ç–∞—Ç—å–µ: {title}. –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å, hi-tech, –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç."
    }

    r = requests.post(url, headers=headers, json=payload, timeout=60)
    r.raise_for_status()
    data = r.json()
    uuid = data.get("uuid")

    if not uuid:
        logging.error("‚ùå FusionBrain –Ω–µ –≤–µ—Ä–Ω—É–ª UUID –∑–∞–¥–∞—á–∏")
        return "/images/placeholder.jpg"

    # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    status_url = f"https://api-key.fusionbrain.ai/key/api/v1/text2image/status/{uuid}"
    for i in range(20):  # –¥–æ 60 —Å–µ–∫—É–Ω–¥ –æ–∂–∏–¥–∞–Ω–∏—è
        s = requests.get(status_url, headers=headers)
        s.raise_for_status()
        resp = s.json()

        if resp.get("status") == "DONE":
            img_b64 = resp["images"][0]
            img_data = base64.b64decode(img_b64)

            os.makedirs(ASSETS_DIR, exist_ok=True)
            os.makedirs(STATIC_DIR, exist_ok=True)

            img_path = os.path.join(ASSETS_DIR, f"{slug}.png")
            with open(img_path, "wb") as f:
                f.write(img_data)
            shutil.copy(img_path, os.path.join(STATIC_DIR, f"{slug}.png"))

            logging.info("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
            return f"/images/posts/{slug}.png"

        logging.info(f"‚åõ –ñ–¥—ë–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è... ({i+1}/20)")
        time.sleep(3)

    logging.error("‚ö†Ô∏è FusionBrain –Ω–µ —É—Å–ø–µ–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    return "/images/placeholder.jpg"

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ===
def save_article(title, content, model, image_url):
    os.makedirs(CONTENT_DIR, exist_ok=True)
    slug = slugify(title)

    filename = os.path.join(
        CONTENT_DIR, f"{datetime.now().strftime('%Y-%m-%d')}-{slug}.md"
    )

    with open(filename, "w", encoding="utf-8") as f:
        f.write("---\n")
        f.write(f'title: "{title}"\n')
        f.write(f'date: {datetime.now(timezone.utc).isoformat()}\n')
        f.write(f'model: {model}\n')
        f.write(f'image: {image_url}\n')
        f.write("---\n\n")
        f.write(content)

    logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")

# === –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π ===
def cleanup_articles():
    files = sorted(
        [os.path.join(CONTENT_DIR, f) for f in os.listdir(CONTENT_DIR)],
        key=os.path.getmtime,
        reverse=True
    )
    for old in files[5:]:
        os.remove(old)
        logging.info(f"üóë –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç–∞—Ç—å—è: {old}")

# === –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ===
def main():
    content, model = generate_article()
    title = extract_title(content)
    slug = slugify(title)
    img_path = generate_image(title, slug)
    save_article(title, content, model, img_path)
    cleanup_articles()

if __name__ == "__main__":
    main()
