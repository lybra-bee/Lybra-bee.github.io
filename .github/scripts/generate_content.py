#!/usr/bin/env python3
import os
import json
import requests
import random
import logging
import time
from pathlib import Path
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)

# –ü—É—Ç–∏
BASE_DIR = Path(__file__).parent.parent
CONTENT_DIR = BASE_DIR / "content/posts"
GALLERY_DIR = BASE_DIR / "static/images/gallery"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≥–∞–ª–µ—Ä–µ–∏
if GALLERY_DIR.exists() and not GALLERY_DIR.is_dir():
    logging.warning(f"{GALLERY_DIR} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –Ω–æ —ç—Ç–æ –Ω–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è. –£–¥–∞–ª—è–µ–º –∏ —Å–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É.")
    GALLERY_DIR.unlink()  # —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª

GALLERY_DIR.mkdir(parents=True, exist_ok=True)
CONTENT_DIR.mkdir(parents=True, exist_ok=True)

# –ö–ª—é—á–∏ –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤ GitHub Actions
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")
FUSIONBRAIN_API_KEY = os.environ.get("FUSIONBRAIN_API_KEY")
FUSION_SECRET_KEY = os.environ.get("FUSION_SECRET_KEY")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Groq
def generate_article():
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ Groq")
    headers = {"Authorization": f"Bearer {GROQ_API_KEY}"} if GROQ_API_KEY else {}
    payload = {
        "prompt": "–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, —Å—Ç–∏–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π, –æ–±—ä–µ–º –æ–∫–æ–ª–æ 500 —Å–ª–æ–≤.",
        "max_output_tokens": 1000
    }
    try:
        if GROQ_API_KEY:
            response = requests.post("https://api.groq.ai/v1/complete", headers=headers, json=payload)
            response.raise_for_status()
            data = response.json()
            content = data.get("completion", "")
        else:
            # –§–æ–ª–±–µ–∫ –±–µ–∑ –∫–ª—é—á–∞: –∏—Å–ø–æ–ª—å–∑—É–µ–º public API https://api.quotable.io/random –∫–∞–∫ –∑–∞–≥–ª—É—à–∫—É —Ç–µ–∫—Å—Ç–∞
            logging.warning("‚ùå GROQ API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–±–µ–∫")
            content = "–≠—Ç–æ –ø—Ä–∏–º–µ—Ä —Å—Ç–∞—Ç—å–∏ –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö. –ü–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–Ω–¥—ã..."
        title = content.split('\n')[0][:50]  # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –±–µ—Ä–µ–º –∏–∑ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        return title, content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        raise

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain
class FusionBrainAPI:
    def __init__(self, url, api_key, secret_key):
        self.URL = url
        self.AUTH_HEADERS = {
            'X-Key': f'Key {api_key}',
            'X-Secret': f'Secret {secret_key}',
        }

    def get_pipeline(self):
        response = requests.get(self.URL + 'key/api/v1/pipelines', headers=self.AUTH_HEADERS)
        data = response.json()
        return data[0]['uuid']

    def generate(self, prompt, pipeline_id, images=1, width=1024, height=1024):
        params = {
            "type": "GENERATE",
            "numImages": images,
            "width": width,
            "height": height,
            "generateParams": {
                "query": prompt
            }
        }
        data = {
            'pipeline_id': (None, pipeline_id),
            'params': (None, json.dumps(params), 'application/json')
        }
        response = requests.post(self.URL + 'key/api/v1/pipeline/run', headers=self.AUTH_HEADERS, files=data)
        response.raise_for_status()
        return response.json()['uuid']

    def check_generation(self, request_id, attempts=10, delay=10):
        while attempts > 0:
            response = requests.get(self.URL + 'key/api/v1/pipeline/status/' + request_id, headers=self.AUTH_HEADERS)
            data = response.json()
            if data['status'] == 'DONE':
                return data['result']['files']
            attempts -= 1
            time.sleep(delay)
        return []

def generate_image(prompt):
    logging.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain")
    try:
        api = FusionBrainAPI('https://api-key.fusionbrain.ai/', FUSIONBRAIN_API_KEY, FUSION_SECRET_KEY)
        pipeline_id = api.get_pipeline()
        uuid = api.generate(prompt, pipeline_id)
        files = api.check_generation(uuid)
        if files:
            image_data = files[0]
            image_path = GALLERY_DIR / f"{datetime.now().strftime('%Y%m%d%H%M%S')}.png"
            with open(image_path, "wb") as f:
                f.write(bytes(image_data, 'utf-8'))  # Base64 –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            return image_path.name
        else:
            logging.warning("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return ""
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è FusionBrain: {e}")
        return ""

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
def save_article(title, content, image_name):
    filename = f"{title.replace(' ', '-').lower()[:50]}.md"
    filepath = CONTENT_DIR / filename
    md_content = f"""---
title: "{title}"
date: {datetime.now().isoformat()}
image: "/images/gallery/{image_name}"
---

{content}
"""
    with open(filepath, "w", encoding="utf-8") as f:
        f.write(md_content)
    logging.info(f"üìÑ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filepath.name}")

# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å—Ç–∞—Ç—å–∏, –æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5
def cleanup_articles():
    files = sorted(CONTENT_DIR.glob("*.md"), key=lambda x: x.stat().st_mtime, reverse=True)
    for f in files[5:]:
        f.unlink()
        logging.info(f"üßπ –£–¥–∞–ª–µ–Ω–∞ —Å—Ç–∞—Ä–∞—è —Å—Ç–∞—Ç—å—è: {f.name}")

def main():
    title, content = generate_article()
    image_name = generate_image(title)
    save_article(title, content, image_name)
    cleanup_articles()

if __name__ == "__main__":
    main()
