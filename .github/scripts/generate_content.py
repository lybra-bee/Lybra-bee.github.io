#!/usr/bin/env python3
import os
import requests
import json
import random
from datetime import datetime, timezone
import logging
import base64
import hashlib
import hmac
from pathlib import Path

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤ ===
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)

# === API –∫–ª—é—á–∏ ===
OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
FUSIONBRAIN_API_KEY = os.getenv("FUSIONBRAIN_API_KEY")
FUSION_SECRET_KEY = os.getenv("FUSION_SECRET_KEY")

# === –ü—É—Ç–∏ ===
CONTENT_DIR = Path("content/posts")
IMAGES_DIR = Path("assets/images/posts")

CONTENT_DIR.mkdir(parents=True, exist_ok=True)
IMAGES_DIR.mkdir(parents=True, exist_ok=True)

# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ ===
def generate_article():
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenRouter / Groq")

    prompt = (
        "–ù–∞–ø–∏—à–∏ —Å–≤–µ–∂—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö, "
        "–æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –º–∏—Ä–æ–≤—ã—Ö —Ç—Ä–µ–Ω–¥–∞—Ö. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–∏–¥—É–º–∞–π –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫."
    )

    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
    }

    payload = {
        "model": "gpt-4o-mini",
        "messages": [{"role": "user", "content": prompt}],
    }

    try:
        r = requests.post(url, headers=headers, json=payload, timeout=60)
        r.raise_for_status()
        data = r.json()
        text = data["choices"][0]["message"]["content"].strip()

        # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Ç–µ–∫—Å—Ç
        if "\n" in text:
            title, body = text.split("\n", 1)
        else:
            title, body = "–°—Ç–∞—Ç—å—è –æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è—Ö", text

        return title.strip("# ").strip(), body.strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏: {e}")
        return "–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é."


# === –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain ===
def generate_image(prompt, filename):
    logging.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain")

    url = "https://api-key.fusionbrain.ai/text2image/run"
    nonce = str(int(datetime.now().timestamp()))
    sign = hmac.new(FUSION_SECRET_KEY.encode(), nonce.encode(), hashlib.sha256).hexdigest()

    headers = {
        "X-Key": f"Key {FUSIONBRAIN_API_KEY}",
        "X-Nonce": nonce,
        "X-Sign": f"Signature {sign}",
    }

    payload = {"text": prompt, "size": "1024x1024"}
    try:
        r = requests.post(url, headers=headers, json=payload, timeout=120)
        r.raise_for_status()
        data = r.json()
        if "image" in data:
            image_b64 = data["image"]
            img_path = IMAGES_DIR / filename
            with open(img_path, "wb") as f:
                f.write(base64.b64decode(image_b64))
            logging.info(f"‚úÖ –ö–∞—Ä—Ç–∏–Ω–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {img_path}")
            return str(img_path)
        else:
            logging.warning("FusionBrain –Ω–µ –≤–µ—Ä–Ω—É–ª –∫–∞—Ä—Ç–∏–Ω–∫—É")
            return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        return None


# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ ===
def save_article(title, body, image_filename):
    safe_title = title.replace('"', "'")
    slug = "-".join(title.lower().split()[:6])
    filename = CONTENT_DIR / f"{slug}.md"

    front_matter = [
        "---",
        f'title: "{safe_title}"',
        f'date: {datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S%z")}',
        f'image: "/images/posts/{image_filename}"',
        'tags: ["–ù–µ–π—Ä–æ—Å–µ—Ç–∏", "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]',
        "---",
    ]

    content = "\n".join(front_matter) + "\n\n" + body
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)

    logging.info(f"üìÑ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")


# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
def main():
    title, body = generate_article()
    image_filename = f"{title.replace(' ', '_')}.png"

    image_path = generate_image(title, image_filename)
    if not image_path:
        image_filename = "default.png"  # –µ—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞ –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å

    save_article(title, body, image_filename)


if __name__ == "__main__":
    main()
