#!/usr/bin/env python3
import os
import requests
import json
import logging
from datetime import datetime
import yaml
from slugify import slugify

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

OPENROUTER_API_KEY = os.environ.get("OPENROUTER_API_KEY")
GROQ_API_KEY = os.environ.get("GROQ_API_KEY")
FUSIONBRAIN_API_KEY = os.environ.get("FUSIONBRAIN_API_KEY")

CONTENT_DIR = "content/posts"
IMAGE_DIR = "assets/images/posts"
GALLERY_FILE = "data/gallery.yaml"

PROMPT = "–ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–¥—ã –≤ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–µ –∏ –≤—ã—Å–æ–∫–∏—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ –Ω–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ 400-600 —Å–ª–æ–≤."

# -----------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ OpenRouter/Groq
# -----------------------------
def generate_article():
    logging.info("üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏...")
    # OpenRouter
    try:
        r = requests.post(
            "https://openrouter.ai/api/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {OPENROUTER_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "openai/gpt-4o-mini",
                "messages": [
                    {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –∏ –≤—ã—Å–æ–∫–∏–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º."},
                    {"role": "user", "content": PROMPT}
                ]
            }
        )
        r.raise_for_status()
        text = r.json()["choices"][0]["message"]["content"].strip()
        logging.info("‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ OpenRouter")
        return text, "OpenRouter"
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è OpenRouter –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {e}")

    # fallback –Ω–∞ Groq
    try:
        r = requests.post(
            "https://api.groq.com/openai/v1/chat/completions",
            headers={
                "Authorization": f"Bearer {GROQ_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": "llama-3.1-70b-versatile",
                "messages": [
                    {"role": "system", "content": "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–º—É –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É –∏ –≤—ã—Å–æ–∫–∏–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º."},
                    {"role": "user", "content": PROMPT}
                ]
            }
        )
        r.raise_for_status()
        text = r.json()["choices"][0]["message"]["content"].strip()
        logging.info("‚úÖ –°—Ç–∞—Ç—å—è –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ Groq")
        return text, "Groq"
    except Exception as e:
        logging.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∞—Ç—å—é: {e}")
        return None, None

# -----------------------------
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain
# -----------------------------
def generate_image(title, slug):
    logging.info("üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain...")
    try:
        r = requests.post(
            "https://api.fusionbrain.ai/v1/text2image",
            headers={
                "Authorization": f"Bearer {FUSIONBRAIN_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "prompt": title,
                "width": 1024,
                "height": 1024,
                "num_images": 1
            }
        )
        r.raise_for_status()
        img_data = r.json()["images"][0]
        img_bytes = bytes(img_data, encoding='utf-8')
        os.makedirs(IMAGE_DIR, exist_ok=True)
        img_path = os.path.join(IMAGE_DIR, f"{slug}.png")
        with open(img_path, "wb") as f:
            f.write(base64.b64decode(img_data))
        logging.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {img_path}")
        return img_path
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        placeholder = os.path.join(IMAGE_DIR, "placeholder.jpg")
        os.makedirs(IMAGE_DIR, exist_ok=True)
        if not os.path.exists(placeholder):
            with open(placeholder, "wb") as f:
                f.write(b"placeholder")
        return placeholder

# -----------------------------
# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—å—é –≤ content/posts
# -----------------------------
def save_article(title, text, model, img_path):
    slug = slugify(title)
    os.makedirs(CONTENT_DIR, exist_ok=True)
    filename = os.path.join(CONTENT_DIR, f"{slug}.md")
    image_relative = os.path.relpath(img_path, "static") if img_path else "/images/placeholder.jpg"
    content = f"""---
title: "{title}"
date: {datetime.utcnow().isoformat()}Z
model: "{model}"
image: "/images/posts/{os.path.basename(img_path)}"
---

{text}
"""
    with open(filename, "w", encoding="utf-8") as f:
        f.write(content)
    logging.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
    return slug

# -----------------------------
# –û–±–Ω–æ–≤–ª—è–µ–º –≥–∞–ª–µ—Ä–µ—é
# -----------------------------
def update_gallery(slug, title, img_path):
    os.makedirs(os.path.dirname(GALLERY_FILE), exist_ok=True)
    gallery = []
    if os.path.exists(GALLERY_FILE):
        with open(GALLERY_FILE, "r", encoding="utf-8") as f:
            gallery = yaml.safe_load(f) or []

    gallery.insert(0, {
        "src": f"/images/posts/{os.path.basename(img_path)}",
        "alt": title,
        "title": title
    })
    with open(GALLERY_FILE, "w", encoding="utf-8") as f:
        yaml.dump(gallery, f, allow_unicode=True)
    logging.info(f"‚úÖ –ì–∞–ª–µ—Ä–µ—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {GALLERY_FILE}")

# -----------------------------
# Main
# -----------------------------
def main():
    text, model = generate_article()
    if not text:
        logging.error("–°—Ç–∞—Ç—å—è –Ω–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞. –ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ.")
        return

    title = text.split("\n")[0][:60]  # –ø–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–∞–∫ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    slug = slugify(title)
    img_path = generate_image(title, slug)
    save_article(title, text, model, img_path)
    update_gallery(slug, title, img_path)

if __name__ == "__main__":
    import base64
    main()
