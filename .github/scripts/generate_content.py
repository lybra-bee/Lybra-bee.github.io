#!/usr/bin/env python3
"""
–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è Hugo –±–ª–æ–≥–∞ —Å AI-—Å—Ç–∞—Ç—å—è–º–∏ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
"""

import os
import requests
import random
from datetime import datetime, timezone
import re
import logging
import argparse
import time
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = "8006769060:AAEGAKhjUeuAXfnsQWtdLcKpAjkJrrGQ1Fk"
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID', 'YOUR_CHAT_ID')

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–º—ã ========
def generate_ai_trend_topic():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ç–µ–º—ã –ø—Ä–æ AI —Ç—Ä–µ–Ω–¥—ã"""
    current_trends_2025 = [
        "Multimodal AI –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –∞—É–¥–∏–æ",
        "AI –∞–≥–µ–Ω—Ç—ã –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",
        "–ö–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", 
        "–ù–µ–π—Ä–æ–º–æ—Ä—Ñ–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã",
        "Generative AI —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞",
        "Edge AI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ",
        "AI –¥–ª—è –∫–∏–±–µ—Ä–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
        "–≠—Ç–∏—á–Ω—ã–π AI –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ",
        "AI –≤ healthcare –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞",
        "–ê–≤—Ç–æ–Ω–æ–º–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–∞",
        "–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
        "–ö–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤",
        "–ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–µ —Å–æ—Å—Ç—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å–µ—Ç–∏",
        "–¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã –∏ –±–æ–ª—å—à–∏–µ —è–∑—ã–∫–æ–≤—ã–µ –º–æ–¥–µ–ª–∏",
        "–û–±—É—á–µ–Ω–∏–µ —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º –≤ AI"
    ]
    
    application_domains = [
        "–≤ –≤–µ–± —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ cloud native –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö",
        "–≤ –º–æ–±–∏–ª—å–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è—Ö –∏ IoT —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞—Ö", 
        "–≤ –æ–±–ª–∞—á–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –±–∏–∑–Ω–µ—Å –∞–Ω–∞–ª–∏—Ç–∏–∫–µ",
        "–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∫–∏–±–µ—Ä–∑–∞—â–∏—Ç–µ",
        "–≤ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ –∏ –±–∏–æ—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö",
        "–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ —Ñ–∏–Ω—Ç–µ—Ö–µ",
        "–≤ –∞–≤—Ç–æ–Ω–æ–º–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ smart city –∏ —É–º–Ω–æ–π –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–µ",
        "–≤ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö –∏ EdTech",
        "–≤ —Ä–æ–±–æ—Ç–æ—Ç–µ—Ö–Ω–∏–∫–µ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏",
        "–≤ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–µ –∏ –∏–≥—Ä–∞—Ö",
        "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞",
        "–≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º–∞—Ö",
        "–≤ –ø—Ä–æ–≥–Ω–æ–∑–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–µ"
    ]
    
    trend = random.choice(current_trends_2025)
    domain = random.choice(application_domains)
    
    topic_formats = [
        f"{trend} {domain} –≤ 2025 –≥–æ–¥—É",
        f"–¢–µ–Ω–¥–µ–Ω—Ü–∏–∏ 2025: {trend} {domain}",
        f"{trend}: —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è {domain}",
        f"–ö–∞–∫ {trend} —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç {domain} –≤ 2025",
        f"–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ 2025: {trend} –¥–ª—è {domain}",
        f"{trend} - –±—É–¥—É—â–µ–µ {domain}",
        f"–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ {trend} –≤ {domain}"
    ]
    
    return random.choice(topic_formats)

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ ========
def generate_article_content(topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—å–∏ —á–µ—Ä–µ–∑ AI API"""
    try:
        # –ü—Ä–æ–±—É–µ–º Groq API
        groq_key = os.getenv('GROQ_API_KEY')
        if groq_key and groq_key not in ['', 'your_groq_api_key_here']:
            try:
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º Groq API...")
                content = generate_with_groq(groq_key, topic)
                if content and len(content.strip()) > 200:
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ Groq API")
                    logger.info(f"üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return content
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ Groq: {e}")
        
        # –ü—Ä–æ–±—É–µ–º OpenRouter API
        openrouter_key = os.getenv('OPENROUTER_API_KEY')
        if openrouter_key and openrouter_key not in ['', 'your_openrouter_api_key_here']:
            try:
                logger.info("üîÑ –ü—Ä–æ–±—É–µ–º OpenRouter API...")
                content = generate_with_openrouter(openrouter_key, topic)
                if content and len(content.strip()) > 200:
                    logger.info("‚úÖ –£—Å–ø–µ—à–Ω–æ —á–µ—Ä–µ–∑ OpenRouter API")
                    logger.info(f"üìÑ –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                    return content
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ OpenRouter: {e}")
                
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    
    # Fallback
    logger.info("üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º fallback –∫–æ–Ω—Ç–µ–Ω—Ç")
    return generate_fallback_content(topic)

def generate_with_groq(api_key, topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Groq API"""
    prompt = f"""–ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: '{topic}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –§–æ—Ä–º–∞—Ç Markdown
- 500-800 —Å–ª–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞: –≤–≤–µ–¥–µ–Ω–∏–µ, –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã, –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∫–µ–π—Å—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
- –ê–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ 2025 –≥–æ–¥
- –ò—Å–ø–æ–ª—å–∑—É–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ ## –∏ ###
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏ –≤—ã–≤–æ–¥—ã
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
"""
    
    resp = requests.post(
        "https://api.groq.com/openai/v1/chat/completions",
        headers={
            "Authorization": f"Bearer {api_key}", 
            "Content-Type": "application/json"
        },
        json={
            "model": "llama-3.3-70b-versatile",
            "messages": [{"role": "user", "content": prompt}], 
            "max_tokens": 2500,
            "temperature": 0.7,
            "top_p": 0.9
        },
        timeout=45
    )
    
    if resp.status_code == 200:
        data = resp.json()
        content = data['choices'][0]['message']['content'].strip()
        if not content:
            raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
        return content
    else:
        error_msg = f"HTTP error {resp.status_code}"
        try:
            error_data = resp.json()
            error_msg += f": {error_data.get('error', {}).get('message', 'Unknown error')}"
        except:
            error_msg += f": {resp.text}"
        raise Exception(error_msg)

def generate_with_openrouter(api_key, topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ OpenRouter API"""
    prompt = f"""–ù–∞–ø–∏—à–∏ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—É—é —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É: '{topic}' –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –§–æ—Ä–º–∞—Ç Markdown
- 600-900 —Å–ª–æ–≤
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ —Ä–∞–∑–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã –∏ case studies
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω –Ω–∞–ø–∏—Å–∞–Ω–∏—è
- –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ 2025 –≥–æ–¥–∞
- –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —á–∏—Ç–∞—Ç–µ–ª–µ–π
- –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –¥–µ—Ç–∞–ª–∏ –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
"""
    
    # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –∏–∑-–∑–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö DNS –ø—Ä–æ–±–ª–µ–º
    for attempt in range(3):
        try:
            resp = requests.post(
                "https://api.openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {api_key}", 
                    "Content-Type": "application/json",
                    "HTTP-Referer": "https://lybra-bee.github.io",
                    "X-Title": "AI Content Generator"
                },
                json={
                    "model": "anthropic/claude-3-sonnet", 
                    "messages": [{"role": "user", "content": prompt}], 
                    "max_tokens": 2500,
                    "temperature": 0.7,
                    "top_p": 0.9
                },
                timeout=45
            )
            
            if resp.status_code == 200:
                data = resp.json()
                content = data['choices'][0]['message']['content'].strip()
                if not content:
                    raise Exception("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
                return content
            else:
                raise Exception(f"HTTP error {resp.status_code}: {resp.text}")
                
        except Exception as e:
            if attempt == 2:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                raise e
            time.sleep(2)
            logger.warning(f"üîÑ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3 –¥–ª—è OpenRouter")

def generate_fallback_content(topic):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π fallback –∫–æ–Ω—Ç–µ–Ω—Ç"""
    return f"""# {topic}

## –í–≤–µ–¥–µ–Ω–∏–µ
{topic} –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–¥–Ω—É –∏–∑ –Ω–∞–∏–±–æ–ª–µ–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π 2025 –≥–æ–¥–∞. –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–µ–≤–æ–ª—é—Ü–∏–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –æ—Ç—Ä–∞—Å–ª–∏, –ø—Ä–µ–¥–ª–∞–≥–∞—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏.

## –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –∏ –≤—ã–∑–æ–≤—ã
- **–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤** –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—á–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
- **–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ IT-—Å–∏—Å—Ç–µ–º—ã** –∏ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É
- **–£–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö** –∏ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π
- **–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –æ–ø—ã—Ç–∞** —Å –ø–æ–º–æ—â—å—é –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
- **–≠—Ç–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã** –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å AI —Å–∏—Å—Ç–µ–º
- **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å** –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ AI —Ä–µ—à–µ–Ω–∏—è–º–∏

## –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
–ö–æ–º–ø–∞–Ω–∏–∏ –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –∞–∫—Ç–∏–≤–Ω–æ –≤–Ω–µ–¥—Ä—è—é—Ç AI —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–∏—Ö –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤. –û—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä—É—Ç–∏–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –¥–æ —Å–ª–æ–∂–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –Ω–∞—Ö–æ–¥–∏—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤ —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö –∏ –æ—Ç—Ä–∞—Å–ª—è—Ö –ø—Ä–æ–º—ã—à–ª–µ–Ω–Ω–æ—Å—Ç–∏.

–ö—Ä—É–ø–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ —Å—Ç–∞—Ä—Ç–∞–ø—ã –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ñ–µ—Ä –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ—Ç healthcare –¥–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—è –≤–ø–µ—á–∞—Ç–ª—è—é—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –ø–æ–≤—ã—à–µ–Ω–∏–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–Ω–∏–∂–µ–Ω–∏–∏ –∑–∞—Ç—Ä–∞—Ç.

## –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∞—Å–ø–µ–∫—Ç—ã —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ AI —Å–∏—Å—Ç–µ–º—ã —Ç—Ä–µ–±—É—é—Ç —Ç—â–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã, –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∏ –≥—Ä–∞–º–æ—Ç–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π IT-–∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π. –í–∞–∂–Ω—É—é —Ä–æ–ª—å –∏–≥—Ä–∞–µ—Ç —Ç–∞–∫–∂–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö –º–æ–¥–µ–ª–µ–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –¥–æ–æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

–ù–µ –º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ –∑–∞—â–∏—Ç—ã –¥–∞–Ω–Ω—ã—Ö, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —Å–≤–µ—Ç–µ —É–∂–µ—Å—Ç–æ—á–∞—é—â–∏—Ö—Å—è —Ä–µ–≥—É–ª—è—Ç–æ—Ä–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∏ —Ä–∞—Å—Ç—É—â–∏—Ö –∫–∏–±–µ—Ä—É–≥—Ä–æ–∑.

## –ë—É–¥—É—â–∏–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ
–° —Ä–∞–∑–≤–∏—Ç–∏–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è –∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–µ–º –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π, –º—ã –º–æ–∂–µ–º –æ–∂–∏–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –µ—â–µ –±–æ–ª–µ–µ sophisticated –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤. –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è AI —Å –¥—Ä—É–≥–∏–º–∏ emerging technologies, —Ç–∞–∫–∏–º–∏ –∫–∞–∫ –∫–≤–∞–Ω—Ç–æ–≤—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –∏ blockchain, –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã –¥–ª—è –∏–Ω–Ω–æ–≤–∞—Ü–∏–π.

–≠–∫—Å–ø–µ—Ä—Ç—ã –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É—é—Ç, —á—Ç–æ –∫ 2026-2027 –≥–æ–¥–∞–º AI —Å—Ç–∞–Ω–µ—Ç –Ω–µ–æ—Ç—ä–µ–º–ª–µ–º–æ–π —á–∞—Å—Ç—å—é –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤, –∞ –∫ 2030 –≥–æ–¥—É –∫–æ—Ä–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –º–Ω–æ–≥–∏–µ –æ—Ç—Ä–∞—Å–ª–∏ —ç–∫–æ–Ω–æ–º–∏–∫–∏.

## –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
–ë—É–¥—É—â–µ–µ –≤—ã–≥–ª—è–¥–∏—Ç –º–Ω–æ–≥–æ–æ–±–µ—â–∞—é—â–∏–º —Å —Ä–∞–∑–≤–∏—Ç–∏–µ–º AI —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π. –ü–æ –º–µ—Ä–µ —Ç–æ–≥–æ –∫–∞–∫ –∞–ª–≥–æ—Ä–∏—Ç–º—ã —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω—ã–º–∏ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–º–∏, –º—ã –º–æ–∂–µ–º –æ–∂–∏–¥–∞—Ç—å –ø–æ—è–≤–ª–µ–Ω–∏—è –µ—â–µ –±–æ–ª–µ–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ—à–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –∏–∑–º–µ–Ω—è—Ç –Ω–∞—à—É –∂–∏–∑–Ω—å –∫ –ª—É—á—à–µ–º—É.

–í–∞–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ —ç—Ç–∏—á–µ—Å–∫–∏–º–∏ considerations, –æ–±–µ—Å–ø–µ—á–∏–≤–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞.

*–°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*  
*–¢–µ–º–∞: {topic}*  
*–î–∞—Ç–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {datetime.now().strftime("%Y-%m-%d %H:%M")}*
"""

# ======== –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ========
def generate_article_image(topic):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram –±–æ—Ç–∞"""
    try:
        prompt = f"{topic}, digital art, futuristic, professional, 4k, ultra detailed, high quality"
        
        logger.info(f"üé® –ó–∞–ø—Ä–æ—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {prompt}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –±–æ—Ç—É
        response = requests.post(
            f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage",
            json={
                "chat_id": TELEGRAM_CHAT_ID,
                "text": f"/generate {prompt}",
                "parse_mode": "Markdown"
            },
            timeout=20
        )
        
        logger.info(f"üì§ –û—Ç–≤–µ—Ç Telegram: {response.status_code}")
        
        if response.status_code == 200:
            logger.info("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –±–æ—Ç—É")
            
            # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é + –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            logger.info("‚è≥ –û–∂–∏–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (40 —Å–µ–∫—É–Ω–¥)...")
            time.sleep(40)
            
            logger.info("‚úÖ –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
            return f"/images/posts/{generate_slug(topic)}.jpg"
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {response.text}")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    # Fallback - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫ default –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    return "/images/default.jpg"

def generate_slug(text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è slug"""
    text = text.lower().replace(' ', '-')
    text = re.sub(r'[^a-z0-9\-]', '', text)
    return re.sub(r'-+', '-', text)[:60]

def clean_old_articles(keep_last=5):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π"""
    content_dir = "content/posts"
    images_dir = "static/images/posts"
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π
    if os.path.exists(content_dir):
        posts = sorted([f for f in os.listdir(content_dir) if f.endswith('.md')], reverse=True)
        for post in posts[keep_last:]:
            os.remove(os.path.join(content_dir, post))
            logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ø–æ—Å—Ç: {post}")
            
            # –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            image_name = os.path.splitext(post)[0] + '.jpg'
            image_path = os.path.join(images_dir, image_name)
            if os.path.exists(image_path):
                os.remove(image_path)
                logger.info(f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {image_name}")

def main():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä AI –∫–æ–Ω—Ç–µ–Ω—Ç–∞')
    parser.add_argument('--count', type=int, default=1, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π')
    parser.add_argument('--keep', type=int, default=5, help='–°–∫–æ–ª—å–∫–æ —Å—Ç–∞—Ç–µ–π –æ—Å—Ç–∞–≤–ª—è—Ç—å')
    parser.add_argument('--debug', action='store_true', help='–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏')
    args = parser.parse_args()
    
    # –í–∫–ª—é—á–µ–Ω–∏–µ debug —Ä–µ–∂–∏–º–∞
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
        logger.debug("üîß –†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ –≤–∫–ª—é—á–µ–Ω")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    env_vars = {
        'OPENROUTER_API_KEY': os.getenv('OPENROUTER_API_KEY'),
        'GROQ_API_KEY': os.getenv('GROQ_API_KEY'),
        'TELEGRAM_BOT_TOKEN': os.getenv('TELEGRAM_BOT_TOKEN'),
        'TELEGRAM_CHAT_ID': os.getenv('TELEGRAM_CHAT_ID')
    }
    
    for var, value in env_vars.items():
        status = "—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" if value and value not in ['', f'your_{var.lower()}_here'] else "–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        logger.info(f"   {var}: {status}")
    
    # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Å—Ç–∞—Ç–µ–π
    clean_old_articles(args.keep)
    
    for i in range(args.count):
        topic = generate_ai_trend_topic()
        logger.info(f"üìù –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Ç–∞—Ç—å–∏ {i+1}/{args.count}: {topic}")
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        content = generate_article_content(topic)
        image_path = generate_article_image(topic)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
        slug = generate_slug(topic)
        filename = f"content/posts/{slug}.md"
        
        os.makedirs("content/posts", exist_ok=True)
        os.makedirs("static/images/posts", exist_ok=True)
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(f"""---
title: "{topic.replace('"', "'")}"
date: {datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%SZ')}
image: "{image_path}"
draft: false
tags: ["ai", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "2025", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏"]
categories: ["–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]
summary: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö AI –≤ 2025 –≥–æ–¥—É"
---

{content}
""")
        
        logger.info(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {filename}")
        
        if i < args.count - 1:
            time.sleep(3)

if __name__ == "__main__":
    main()
