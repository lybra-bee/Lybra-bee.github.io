#!/usr/bin/env python3
"""
Telegram –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —á–µ—Ä–µ–∑ Stable Diffusion
–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —Å GPU
"""

import os
import logging
import telebot
from telebot.types import InputFile
import torch
from diffusers import StableDiffusionPipeline
from PIL import Image
import io
import time
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    datefmt='%Y-%m-%d %H:%M:%S'
)
logger = logging.getLogger(__name__)

class ImageGeneratorBot:
    def __init__(self, token):
        self.bot = telebot.TeleBot(token)
        self.setup_handlers()
        self.device = self.setup_device()
        self.pipe = self.load_model()
        
    def setup_device(self):
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"""
        if torch.cuda.is_available():
            device = "cuda"
            logger.info(f"‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name(0)}")
        else:
            device = "cpu"
            logger.warning("‚ö†Ô∏è GPU –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU (–º–µ–¥–ª–µ–Ω–Ω–æ)")
        return device
    
    def load_model(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Stable Diffusion"""
        logger.info("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Stable Diffusion...")
        
        try:
            pipe = StableDiffusionPipeline.from_pretrained(
                "runwayml/stable-diffusion-v1-5",
                torch_dtype=torch.float16 if self.device == "cuda" else torch.float32,
                safety_checker=None,
                requires_safety_checker=False
            )
            
            pipe = pipe.to(self.device)
            
            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è GPU
            if self.device == "cuda":
                pipe.enable_attention_slicing()
            
            logger.info("‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
            return pipe
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
            raise
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ Telegram"""
        
        @self.bot.message_handler(commands=['start', 'help'])
        def send_welcome(message):
            welcome_text = """
ü§ñ *AI Image Generator Bot*

–Ø –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –≤–∞—à–µ–º—É –æ–ø–∏—Å–∞–Ω–∏—é!

*–ö–æ–º–∞–Ω–¥—ã:*
/generate [–æ–ø–∏—Å–∞–Ω–∏–µ] - –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

*–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ `/generate —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –≥–æ—Ä–æ–¥ —Å –Ω–µ–±–æ—Å–∫—Ä–µ–±–∞–º–∏`
‚Ä¢ `/generate —Ä–æ–±–æ—Ç –≤ —Å—Ç–∏–ª–µ –∫–∏–±–µ—Ä–ø–∞–Ω–∫`
‚Ä¢ `/generate –ø–µ–π–∑–∞–∂ –∫–æ—Å–º–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏`

*–°–æ–≤–µ—Ç—ã:*
‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –¥–µ—Ç–∞–ª–∏: "4k, high quality, digital art"
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ —Å—Ç–∏–ª—å: "–≤ —Å—Ç–∏–ª–µ –í–∞–Ω –ì–æ–≥–∞", "–ø–∏–∫—Å–µ–ª—å-–∞—Ä—Ç"
"""
            self.bot.reply_to(message, welcome_text, parse_mode='Markdown')
        
        @self.bot.message_handler(commands=['status'])
        def send_status(message):
            status_text = f"""
*–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:*
‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: `{self.device.upper()}`
‚Ä¢ –ú–æ–¥–µ–ª—å: `Stable Diffusion v1.5`
‚Ä¢ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: `{time.strftime('%H:%M:%S', time.gmtime(time.time() - self.start_time))}`
"""
            self.bot.reply_to(message, status_text, parse_mode='Markdown')
        
        @self.bot.message_handler(commands=['generate'])
        def handle_generate(message):
            try:
                if len(message.text.split()) > 1:
                    prompt = ' '.join(message.text.split()[1:])
                    self.process_generation(message, prompt)
                else:
                    self.bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /generate")
            except Exception as e:
                self.bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
        
        @self.bot.message_handler(func=lambda message: True)
        def handle_all_messages(message):
            if not message.text.startswith('/'):
                self.process_generation(message, message.text)
    
    def process_generation(self, message, prompt):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        chat_id = message.chat.id
        
        try:
            if len(prompt) > 500:
                self.bot.reply_to(message, "‚ùå –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            
            status_msg = self.bot.send_message(
                chat_id, 
                f"üé® *–ì–µ–Ω–µ—Ä–∞—Ü–∏—è:* {prompt[:100]}...\n‚è≥ *–í—Ä–µ–º—è:* 20-30 —Å–µ–∫—É–Ω–¥",
                parse_mode='Markdown'
            )
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            start_time = time.time()
            image = self.generate_image(prompt)
            generation_time = time.time() - start_time
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ bytes –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            img_buffer = io.BytesIO()
            image.save(img_buffer, format='PNG', quality=95)
            img_buffer.seek(0)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.bot.send_photo(
                chat_id, 
                InputFile(img_buffer, filename=f"generated_{int(time.time())}.png"),
                caption=f"‚úÖ *–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ:* {prompt}\n‚è±Ô∏è *–í—Ä–µ–º—è:* {generation_time:.1f}—Å",
                parse_mode='Markdown'
            )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                self.bot.delete_message(chat_id, status_msg.message_id)
            except:
                pass
            
            logger.info(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è: {prompt}")
            
        except Exception as e:
            error_msg = f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}"
            self.bot.send_message(chat_id, error_msg)
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
    
    def generate_image(self, prompt):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stable Diffusion"""
        enhanced_prompt = f"{prompt}, high quality, 4k, professional, detailed, digital art"
        negative_prompt = "blurry, low quality, distorted, ugly, bad anatomy, text, watermark"
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
        with torch.autocast(self.device):
            result = self.pipe(
                prompt=enhanced_prompt,
                negative_prompt=negative_prompt,
                num_inference_steps=30,
                guidance_scale=7.5,
                width=512,
                height=512,
                generator=torch.Generator(device=self.device).manual_seed(int(time.time()))
            )
        
        return result.images[0]
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        self.start_time = time.time()
        logger.info("ü§ñ –ó–∞–ø—É—Å–∫ Telegram
