#!/usr/bin/env python3
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ Hugo
"""

import re
import os
from datetime import datetime, timezone
from PIL import Image, ImageDraw, ImageFont
import textwrap
import logging

logger = logging.getLogger(__name__)

def generate_slug(text):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SEO-friendly slug –∏–∑ —Ç–µ–∫—Å—Ç–∞"""
    text = text.lower()
    text = text.replace(' ', '-')
    text = re.sub(r'[^a-z0-9\-]', '', text)
    text = re.sub(r'-+', '-', text)
    return text[:60]

def generate_frontmatter(title, content, model_used, image_url):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è frontmatter –¥–ª—è Hugo"""
    now = datetime.now(timezone.utc).strftime("%Y-%m-%dT%H:%M:%SZ")
    escaped_title = title.replace(':', ' -').replace('"', "'")
    
    frontmatter = f"""---
title: "{escaped_title}"
date: {now}
draft: false
image: "{image_url}"
ai_model: "{model_used}"
tags: ["ai", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "2025", "–Ω–µ–π—Ä–æ—Å–µ—Ç–∏"]
categories: ["–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]
summary: "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç—å—è –æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è—Ö AI –≤ 2025 –≥–æ–¥—É"
---

{content}
"""
    return frontmatter

def generate_enhanced_placeholder(topic):
    """–°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è Hugo"""
    try:
        os.makedirs("static/images/posts", exist_ok=True)
        filename = f"static/images/posts/{generate_slug(topic)}.jpg"
        width, height = 800, 400
        
        # –°–æ–∑–¥–∞–µ–º —Ñ—É—Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ñ–æ–Ω
        img = Image.new('RGB', (width, height), color='#0f172a')
        draw = ImageDraw.Draw(img)
        
        # –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω
        for i in range(height):
            r = int(15 + (i/height)*40)
            g = int(23 + (i/height)*60)
            b = int(42 + (i/height)*100)
            draw.line([(0, i), (width, i)], fill=(r, g, b))
        
        # –°–µ—Ç–∫–∞ (tech grid effect)
        for i in range(0, width, 40):
            draw.line([(i, 0), (i, height)], fill=(255, 255, 255, 25))
        for i in range(0, height, 40):
            draw.line([(0, i), (width, i)], fill=(255, 255, 255, 25))
        
        # –¢–µ–∫—Å—Ç
        wrapped_text = textwrap.fill(topic, width=35)
        
        # –®—Ä–∏—Ñ—Ç
        try:
            font = ImageFont.truetype("Arial.ttf", 22)
        except:
            try:
                font = ImageFont.truetype("/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf", 20)
            except:
                font = ImageFont.load_default()
        
        # –ü–æ–∑–∏—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
        bbox = draw.textbbox((0, 0), wrapped_text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        x = (width - text_width) / 2
        y = (height - text_height) / 2
        
        # –¢–µ–Ω—å —Ç–µ–∫—Å—Ç–∞
        draw.text((x+3, y+3), wrapped_text, font=font, fill="#000000")
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        draw.text((x, y), wrapped_text, font=font, fill="#ffffff")
        
        # AI badge
        draw.rectangle([(10, height-35), (120, height-10)], fill="#6366f1")
        draw.text((15, height-30), "AI GENERATED", font=ImageFont.load_default(), fill="#ffffff")
        
        img.save(filename, "JPEG", quality=90)
        logger.info(f"üé® –£–ª—É—á—à–µ–Ω–Ω—ã–π placeholder —Å–æ–∑–¥–∞–Ω: {filename}")
        return f"/images/posts/{os.path.basename(filename)}"
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è placeholder: {e}")
        return "/images/default.jpg"
