import requests
import os
import json
from datetime import datetime

# Конфигурация
HF_API_KEY = os.getenv('HF_API_KEY')
REPO_PATH = os.getenv('GITHUB_WORKSPACE', '.')
print(f"Рабочая директория: {REPO_PATH}")
print(f"HF_API_KEY присутствует: {bool(HF_API_KEY)}")

def generate_with_huggingface(prompt):
    """Генерация текста через Hugging Face"""
    print(f"Генерация текста для промта: {prompt}")
    
    API_URL = "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2"
    headers = {"Authorization": f"Bearer {HF_API_KEY}"}
    
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 200,
            "temperature": 0.7,
            "return_full_text": False
        }
    }
    
    try:
        print("Отправка запроса к Hugging Face API...")
        response = requests.post(API_URL, headers=headers, json=payload, timeout=30)
        print(f"Статус ответа: {response.status_code}")
        
        response.raise_for_status()
        
        result = response.json()
        print("API Response:", json.dumps(result, ensure_ascii=False, indent=2))
        
        # Обрабатываем разные форматы ответа
        if isinstance(result, list) and len(result) > 0:
            generated_text = result[0].get('generated_text', 'Не удалось сгенерировать текст')
        elif isinstance(result, dict):
            generated_text = result.get('generated_text', 'Не удалось сгенерировать текст')
        else:
            generated_text = str(result)
            
        print(f"Сгенерированный текст: {generated_text[:100]}...")
        return generated_text
            
    except Exception as e:
        print(f"Ошибка при генерации: {e}")
        return "Автоматически сгенерированная статья. Ошибка при создании контента."

def create_blog_post():
    """Создание нового поста"""
    print("Создание нового поста...")
    
    # Создаем директорию если нет
    posts_dir = os.path.join(REPO_PATH, 'content/posts')
    os.makedirs(posts_dir, exist_ok=True)
    print(f"Директория posts: {posts_dir}")
    
    # Простая тестовая статья без API
    topic = "Тестовая статья без API"
    content = """
## Это тестовая статья

Эта статья была создана для проверки работы автоматизации. 
Если вы видите этот текст, значит базовый механизм работы настроен правильно.

Следующим шагом будет интеграция с Hugging Face API для генерации контента.

*Статья создана автоматически*
"""
    
    # Создаем файл
    from datetime import datetime
    date_str = datetime.now().strftime('%Y-%m-%d')
    filename = f"test-article.md"
    filepath = os.path.join(posts_dir, filename)
    
    front_matter = f"""---
title: "{topic}"
date: {datetime.now().isoformat()}
draft: false
description: "Тестовая автоматически сгенерированная статья"
tags: ["тест", "автоматизация"]
---

{content}
"""
    
    try:
        with open(filepath, 'w', encoding='utf-8') as f:
            f.write(front_matter)
        print(f"Файл создан: {filepath}")
        
        # Проверяем что файл записался
        if os.path.exists(filepath):
            print("Файл успешно создан и существует")
            with open(filepath, 'r', encoding='utf-8') as f:
                content_check = f.read()
            print(f"Размер файла: {len(content_check)} символов")
            return True
        else:
            print("ОШИБКА: Файл не был создан")
            return False
            
    except Exception as e:
        print(f"Ошибка при создании файла: {e}")
        return False

if __name__ == "__main__":
    print("=== ЗАПУСК СКРИПТА ГЕНЕРАЦИИ ===")
    success = create_blog_post()
    print(f"Результат: {'УСПЕХ' if success else 'ОШИБКА'}")
    exit(0 if success else 1)
