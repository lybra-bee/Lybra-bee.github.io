name: Test API Tokens

on:
  workflow_dispatch:  # Позволяет запускать вручную
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-tokens:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pillow

    - name: Create test script
      run: |
        cat > test_tokens.py << 'EOF'
        #!/usr/bin/env python3
        import os
        import requests
        import logging

        # Настройка логирования
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            datefmt='%Y-%m-%d %H:%M:%S'
        )
        logger = logging.getLogger(__name__)

        def test_huggingface_token():
            """Тестирование Hugging Face токена"""
            HF_TOKEN = os.getenv('HF_API_TOKEN')
            if not HF_TOKEN:
                logger.error("❌ HF_API_TOKEN не установлен")
                return False
            
            logger.info("🧪 Тестируем Hugging Face токен...")
            
            try:
                # Проверка аутентификации
                response = requests.get(
                    "https://huggingface.co/api/whoami",
                    headers={"Authorization": f"Bearer {HF_TOKEN}"},
                    timeout=10
                )
                
                if response.status_code == 200:
                    user_info = response.json()
                    logger.info(f"✅ HF токен валиден! Пользователь: {user_info.get('name', 'Unknown')}")
                    
                    # Упрощенная проверка Inference API
                    try:
                        test_response = requests.head(
                            "https://api-inference.huggingface.co/models/gpt2",
                            headers={"Authorization": f"Bearer {HF_TOKEN}"},
                            timeout=10
                        )
                        if test_response.status_code in [200, 403, 503]:
                            logger.info("✅ Доступ к Inference API есть")
                        return True
                    except:
                        logger.info("ℹ️  Inference API проверка пропущена (таймаут)")
                        return True
                        
                else:
                    logger.error(f"❌ HF токен невалиден: {response.status_code}")
                    return False
                    
            except Exception as e:
                logger.error(f"❌ Ошибка тестирования HF: {e}")
                return False

        def test_replicate_token():
            """Тестирование Replicate токена"""
            REPLICATE_TOKEN = os.getenv('REPLICATE_API_TOKEN')
            if not REPLICATE_TOKEN:
                logger.error("❌ REPLICATE_API_TOKEN не установлен")
                return False
            
            logger.info("🧪 Тестируем Replicate токен...")
            
            try:
                # Проверка аутентификации
                response = requests.get(
                    "https://api.replicate.com/v1/models",
                    headers={"Authorization": f"Token {REPLICATE_TOKEN}"},
                    timeout=10
                )
                
                if response.status_code == 200:
                    models = response.json()
                    logger.info(f"✅ Replicate токен валиден! Доступно моделей: {len(models.get('results', []))}")
                    return True
                else:
                    logger.error(f"❌ Replicate токен невалиден: {response.status_code}")
                    return False
                    
            except Exception as e:
                logger.error(f"❌ Ошибка тестирования Replicate: {e}")
                return False

        def test_groq_token():
            """Тестирование Groq токена"""
            GROQ_TOKEN = os.getenv('GROQ_API_KEY')
            if not GROQ_TOKEN:
                logger.error("❌ GROQ_API_KEY не установлен")
                return False
            
            logger.info("🧪 Тестируем Groq токен...")
            
            try:
                response = requests.get(
                    "https://api.groq.com/openai/v1/models",
                    headers={"Authorization": f"Bearer {GROQ_TOKEN}"},
                    timeout=10
                )
                
                if response.status_code == 200:
                    models = response.json()
                    available_models = [model['id'] for model in models.get('data', [])[:2]]
                    logger.info(f"✅ Groq токен валиден! Модели: {', '.join(available_models)}")
                    return True
                else:
                    logger.error(f"❌ Groq токен невалиден: {response.status_code}")
                    return False
                    
            except Exception as e:
                logger.error(f"❌ Ошибка тестирования Groq: {e}")
                return False

        def test_openrouter_token():
            """Тестирование OpenRouter токена"""
            OPENROUTER_TOKEN = os.getenv('OPENROUTER_API_KEY')
            if not OPENROUTER_TOKEN:
                logger.error("❌ OPENROUTER_API_KEY не установлен")
                return False
            
            logger.info("🧪 Тестируем OpenRouter токен...")
            
            try:
                response = requests.get(
                    "https://openrouter.ai/api/v1/auth/key",
                    headers={"Authorization": f"Bearer {OPENROUTER_TOKEN}"},
                    timeout=10
                )
                
                if response.status_code == 200:
                    key_info = response.json()
                    logger.info(f"✅ OpenRouter токен валиден! Лимиты: {key_info.get('data', {}).get('usage', {})}")
                    return True
                else:
                    logger.error(f"❌ OpenRouter токен невалиден: {response.status_code}")
                    return False
                    
            except Exception as e:
                logger.error(f"❌ Ошибка тестирования OpenRouter: {e}")
                return False

        def test_all_tokens():
            """Тестирование всех токенов"""
            print("=" * 60)
            print("🔍 ТЕСТИРОВАНИЕ ТОКЕНОВ API")
            print("=" * 60)
            
            results = {}
            
            # Проверяем какие токены установлены
            tokens = {
                'HF_API_TOKEN': os.getenv('HF_API_TOKEN'),
                'REPLICATE_API_TOKEN': os.getenv('REPLICATE_API_TOKEN'),
                'GROQ_API_KEY': os.getenv('GROQ_API_KEY'),
                'OPENROUTER_API_KEY': os.getenv('OPENROUTER_API_KEY')
            }
            
            print("📋 Установленные токены:")
            for token_name, token_value in tokens.items():
                status = "✅ ПРИСУТСТВУЕТ" if token_value else "❌ ОТСУТСТВУЕТ"
                masked_value = "set" if token_value else "not set"
                print(f"   {token_name}: {status} ({masked_value})")
            
            print("\n" + "=" * 60)
            
            # Тестируем каждый токен
            results['huggingface'] = test_huggingface_token()
            print()
            results['replicate'] = test_replicate_token()
            print()
            results['groq'] = test_groq_token()
            print()
            results['openrouter'] = test_openrouter_token()
            
            print("=" * 60)
            print("📊 РЕЗУЛЬТАТЫ ТЕСТИРОВАНИЯ:")
            print("=" * 60)
            
            all_working = True
            for service, success in results.items():
                status = "✅ РАБОТАЕТ" if success else "❌ НЕ РАБОТАЕТ"
                if not success:
                    all_working = False
                print(f"   {service.upper():<15}: {status}")
            
            print("=" * 60)
            
            # Возвращаем код ошибки если есть проблемы
            if not all_working:
                exit(1)

        if __name__ == "__main__":
            test_all_tokens()
        EOF

    - name: Run token tests
      env:
        HF_API_TOKEN: ${{ secrets.HF_API_TOKEN }}
        REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      run: python test_tokens.py

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: token-test-results
        path: |
          test_tokens.py
