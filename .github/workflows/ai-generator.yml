name: AI Content Generator

on:
  workflow_dispatch:
  schedule:
    - cron: '0 12 * * 1'

permissions:
  contents: write

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: pip install requests

      - name: Create content directory
        run: mkdir -p content/posts

      - name: Generate AI content with Hugging Face
        env:
          HF_API_KEY: ${{ secrets.HF_API_KEY }}
        run: |
          echo "üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Hugging Face API..."
          
          cat > generate_article.py << 'EOF'
import requests
import os
import json
from datetime import datetime
import random
import time

def generate_with_huggingface(prompt):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Hugging Face API"""
    HF_API_KEY = os.getenv('HF_API_KEY')
    if not HF_API_KEY:
        print("‚ùå –û—à–∏–±–∫–∞: HF_API_KEY –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return None
    
    API_URL = "https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2"
    headers = {"Authorization": f"Bearer {HF_API_KEY}"}
    
    payload = {
        "inputs": prompt,
        "parameters": {
            "max_new_tokens": 500,
            "temperature": 0.7,
            "do_sample": True,
            "return_full_text": False
        }
    }
    
    try:
        print(f"üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞...")
        
        # –ü—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º
        for attempt in range(3):
            response = requests.post(API_URL, headers=headers, json=payload, timeout=90)
            
            if response.status_code == 200:
                result = response.json()
                if isinstance(result, list) and len(result) > 0:
                    return result[0]['generated_text'].strip()
                else:
                    print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç API: {result}")
                    return None
                    
            elif response.status_code == 503:
                # –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                wait_time = 30
                print(f"‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è, –∂–¥–µ–º {wait_time} —Å–µ–∫—É–Ω–¥...")
                time.sleep(wait_time)
                continue
                
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}")
                return None
                
        return None
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}")
        return None

def create_ai_blog_post():
    """–°–æ–∑–¥–∞–Ω–∏–µ AI-—Å—Ç–∞—Ç—å–∏"""
    topics = [
        "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤–µ–±-–¥–∏–∑–∞–π–Ω–∞",
        "–ò–∑—É—á–µ–Ω–∏–µ JavaScript –¥–ª—è –Ω–∞—á–∏–Ω–∞—é—â–∏—Ö",
        "CSS Grid –∏ Flexbox –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ",
        "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å GitHub Actions",
        "–ù–µ–π—Ä–æ—Å–µ—Ç–∏ –≤ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    ]
    
    topic = random.choice(topics)
    
    prompt = f"""–ù–∞–ø–∏—à–∏ —Å—Ç–∞—Ç—å—é –Ω–∞ —Ç–µ–º—É "{topic}" –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ –±–ª–æ–≥–∞.

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
- –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π —è–∑—ã–∫
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏–º–µ—Ä—ã
- –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å –≤—ã–≤–æ–¥–∞–º–∏
- –§–æ—Ä–º–∞—Ç Markdown
- –î–ª–∏–Ω–∞: 300-500 —Å–ª–æ–≤

–°—Ç–∞—Ç—å—è:"""
    
    print(f"üìù –¢–µ–º–∞ —Å—Ç–∞—Ç—å–∏: {topic}")
    content = generate_with_huggingface(prompt)
    
    if not content or len(content) < 100:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
    date_str = datetime.now().strftime('%Y-%m-%d')
    slug = topic.lower().replace(' ', '-').replace(':', '').replace(',', '')[:30]
    filename = f"content/posts/{date_str}-{slug}.md"
    
    front_matter = f"""---
title: "{topic}"
date: {datetime.now().isoformat()}
draft: false
description: "–°—Ç–∞—Ç—å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ —Å –ø–æ–º–æ—â—å—é AI"
tags: ["ai", "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"]
---

# {topic}

{content}

---

*–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*
"""
    
    os.makedirs(os.path.dirname(filename), exist_ok=True)
    
    with open(filename, 'w', encoding='utf-8') as f:
        f.write(front_matter)
    
    print(f"‚úÖ –°—Ç–∞—Ç—å—è —Å–æ–∑–¥–∞–Ω–∞: {filename}")
    print(f"üìè –†–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
    return True

if __name__ == "__main__":
    success = create_ai_blog_post()
    exit(0 if success else 1)
EOF

          # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
          python generate_article.py
          GENERATION_SUCCESS=$?
          
          if [ $GENERATION_SUCCESS -eq 0 ]; then
            echo "‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞"
            echo "success" > generation_status.txt
          else
            echo "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å"
            echo "failed" > generation_status.txt
          fi

      - name: Check generation status
        run: |
          if [ -f generation_status.txt ] && [ "$(cat generation_status.txt)" = "success" ]; then
            echo "üöÄ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –∫–æ–º–º–∏—Ç–æ–º"
          else
            echo "‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–º–∏—Ç"
            exit 0
          fi

      - name: Commit and push changes
        if: success()
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          
          git add content/posts/
          
          if git diff --staged --quiet; then
            echo "‚ùå –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –∫–æ–º–º–∏—Ç–∞"
            exit 0
          fi
          
          git commit -m "ü§ñ –î–æ–±–∞–≤–ª–µ–Ω–∞ AI-—Å—Ç–∞—Ç—å—è $(date +%Y-%m-%d)"
          git pull --rebase origin main
          git push origin main
          echo "‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø—É—à–µ–Ω—ã"

      - name: Final verification
        run: |
          echo "=== –†–ï–ó–£–õ–¨–¢–ê–¢ ==="
          echo "–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:"
          find content/posts/ -name "*.md" -type f -exec ls -la {} \; 2>/dev/null || echo "–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
          echo "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞—Ç–µ–π:"
          find content/posts/ -name "*.md" -type f | wc -l
