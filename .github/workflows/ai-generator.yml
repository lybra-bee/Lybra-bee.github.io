name: Generate and Deploy Hugo Site

on:
  workflow_dispatch:
  schedule:
    - cron: '0 6 * * *' # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 6:00 UTC
  push:
    branches: [ main ]

jobs:
  generate:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GIT_TOKEN }}
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests pillow pyyaml

    - name: Generate article and image
      run: |
        python .github/scripts/generate_content.py
      env:
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        FUSIONBRAIN_API_KEY: ${{ secrets.FUSIONBRAIN_API_KEY }}
        FUSION_SECRET_KEY: ${{ secrets.FUSION_SECRET_KEY }}

    - name: Manual copy images (FORCE)
      run: |
        echo "=== –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –ö–û–ü–ò–†–û–í–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ==="
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        mkdir -p static/images/posts
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —á—Ç–æ –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        if [ -d "assets/images/posts" ] && [ "$(ls -A assets/images/posts 2>/dev/null)" ]; then
            echo "–ö–æ–ø–∏—Ä—É–µ–º –í–°–ï –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ assets –≤ static..."
            
            # –ö–æ–ø–∏—Ä—É–µ–º —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
            for img_file in assets/images/posts/*; do
                if [ -f "$img_file" ]; then
                    filename=$(basename "$img_file")
                    cp -v "$img_file" "static/images/posts/$filename"
                    echo "–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ: $filename"
                fi
            done
            
            echo "–ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ static:"
            ls -la static/images/posts/
            echo "–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: $(ls -1 static/images/posts/ 2>/dev/null | wc -l)"
        else
            echo "‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è!"
            echo "–°–æ–¥–µ—Ä–∂–∏–º–æ–µ assets:"
            ls -la assets/ 2>/dev/null || echo "–ù–µ—Ç assets directory"
            # –°–æ–∑–¥–∞–µ–º placeholder
            mkdir -p static/images/
            echo "placeholder" > static/images/placeholder.jpg
        fi

    - name: Setup Hugo
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: '0.120.4'
        extended: true

    - name: Build Hugo site
      run: |
        echo "=== Building Hugo site ==="
        hugo --minify --verbose
        echo "=== Build completed ==="

    - name: Verify all files
      run: |
        echo "=== –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –§–ê–ô–õ–û–í ==="
        
        echo "1. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ assets:"
        ls -la assets/images/posts/ 2>/dev/null || echo "  ‚ùå –ù–µ—Ç assets images"
        find assets/images/posts/ -name "*.*" 2>/dev/null | head -5
        
        echo "2. –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ static:"
        ls -la static/images/posts/ 2>/dev/null || echo "  ‚ùå –ù–µ—Ç static images"
        find static/images/posts/ -name "*.*" 2>/dev/null | head -5
        
        echo "3. –î–∞–Ω–Ω—ã–µ –≥–∞–ª–µ—Ä–µ–∏:"
        ls -la data/ 2>/dev/null || echo "  ‚ùå –ù–µ—Ç data directory"
        if [ -f "data/gallery.yaml" ]; then
            echo "  ‚úÖ gallery.yaml —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
            echo "  –†–∞–∑–º–µ—Ä: $(wc -l < data/gallery.yaml) —Å—Ç—Ä–æ–∫"
        fi
        
        echo "4. –°—Ç–∞—Ç—å–∏:"
        ls -la content/posts/ 2>/dev/null || echo "  ‚ùå –ù–µ—Ç content/posts"
        find content/posts/ -name "*.md" | head -5

    - name: Create verification files
      run: |
        echo "–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏..."
        echo "–ì–∞–ª–µ—Ä–µ—è: $(find static/images/posts/ -name '*.*' 2>/dev/null | wc -l) –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π" > public/VERIFICATION.txt
        echo "–°—Ç–∞—Ç—å–∏: $(find content/posts/ -name '*.md' | wc -l) —Å—Ç–∞—Ç–µ–π" >> public/VERIFICATION.txt
        echo "–í—Ä–µ–º—è —Å–±–æ—Ä–∫–∏: $(date)" >> public/VERIFICATION.txt
        echo "Workflow: ${{ github.workflow }}" >> public/VERIFICATION.txt

    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_branch: gh-pages
        publish_dir: ./public
        force_orphan: true
        keep_files: false
        enable_jekyll: false
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'

    - name: Show deployment info
      run: |
        echo "‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω!"
        echo "üåê –°–∞–π—Ç: https://lybra-bee.github.io"
        echo "üìä –ü—Ä–æ–≤–µ—Ä–∫–∞: https://lybra-bee.github.io/VERIFICATION.txt"
        echo "üñºÔ∏è –ì–∞–ª–µ—Ä–µ—è: https://lybra-bee.github.io/gallery/"
        echo "üìù –°—Ç–∞—Ç—å–∏: https://lybra-bee.github.io/posts/"
        echo "‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 06:00 UTC"

  verify:
    needs: generate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - name: Wait for deployment
      run: |
        echo "–ñ–¥–µ–º –¥–µ–ø–ª–æ–π GitHub Pages..."
        sleep 120
        
    - name: Check site accessibility
      run: |
        echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞..."
        if curl -s -f https://lybra-bee.github.io/VERIFICATION.txt > /dev/null; then
            echo "‚úÖ –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω!"
            echo "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ verification:"
            curl -s https://lybra-bee.github.io/VERIFICATION.txt
        else
            echo "‚ùå –°–∞–π—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω"
            echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GitHub Pages:"
            echo "https://github.com/lybra-bee/lybra-bee.github.io/settings/pages"
        fi

    - name: Check gallery
      run: |
        echo "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–∞–ª–µ—Ä–µ—é..."
        if curl -s -f https://lybra-bee.github.io/gallery/ > /dev/null; then
            echo "‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–∞–ª–µ—Ä–µ–∏ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è"
        else
            echo "‚ùå –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–∞–ª–µ—Ä–µ–∏ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞"
        fi
